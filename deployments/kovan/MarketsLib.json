{
  "address": "0x73E77FD64707E19727650491b92Dc89E296880EA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    }
  ],
  "transactionHash": "0xbd743cb5657c01b439d8907f2c7ce2bea2cba28c769820a16892dd3195c72c9f",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x73E77FD64707E19727650491b92Dc89E296880EA",
    "transactionIndex": 16,
    "gasUsed": "1456809",
    "logsBloom": "0x
    "blockHash": "0x0672785a6ba5279e7368343968a5e8d90f644d7e47677a288507628db2b7aca6",
    "transactionHash": "0xbd743cb5657c01b439d8907f2c7ce2bea2cba28c769820a16892dd3195c72c9f",
    "logs": [],
    "blockNumber": 30309705,
    "cumulativeGasUsed": "11423477",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountLiquidity(MarketsLib.Book storage,IOracle,address,address,uint256,uint256)\":{\"details\":\"Function to get account's liquidity for a certain market/maturity pool\",\"params\":{\"account\":\"wallet which the liquidity will be calculated\",\"book\":\"account book that it will be used to calculate liquidity\",\"borrowAmount\":\"amount to simulate borrow\",\"fixedLenderToSimulate\":\"fixedLender in which we want to simulate withdraw/borrow ops (see next two args)\",\"oracle\":\"oracle used to perform all liquidity calculations\",\"withdrawAmount\":\"amount to simulate withdraw\"}},\"addToMarket(MarketsLib.Book storage,address,address)\":{\"details\":\"Allows a user to start participating in a market\",\"params\":{\"book\":\"book in which the addMarket function will be applied to\",\"fixedLenderAddress\":\"address used to retrieve the market data\",\"who\":\"address of the user that it will start participating in a market/maturity\"}},\"exitMarket(MarketsLib.Book storage,address,address)\":{\"details\":\"Allows wallet to exit certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money stops being used as collateral\",\"params\":{\"book\":\"book in which the addMarket function will be applied to\",\"fixedLenderAddress\":\"market address used to retrieve the market data\",\"who\":\"wallet that wants to exit a market/maturity\"}},\"validateBorrow(MarketsLib.Book storage,address,address)\":{\"details\":\"Function to validate if a borrow should be allowed based on the what the book says. if the user is not participating in a market, and the caller is a fixedLender, the function will subscribe the wallet to the market membership\",\"params\":{\"book\":\"account book that it will be used to perform validation\",\"borrower\":\"address which will be borrowing money from this market\",\"fixedLenderAddress\":\"address of the market that the borrow will be validated. If this equals msg.sender then the wallet will be autosubscribed to the market membership,\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/MarketsLib.sol\":\"MarketsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IAuditor {\\n    // this one validates post liquidity check\\n    function validateBorrowMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function validateAccountShortfall(\\n        address fixedLenderAddress,\\n        address account,\\n        uint256 amount\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xfeeaef06e0c471ebf447c7fa20fd3e5243cf792cdb15e1eeb52992fbef334539\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` and `auditor` are set\\n     * - The FixedLender is where the eToken is used\\n     * - The Auditor is called in every transfer\\n     */\\n    event Initialized(address indexed fixedLender, address indexed auditor);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x71ce614408fff79ac5f133fb257a0ac1df686f65c0cfdf8efb8d0682838da5b0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) external;\\n\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function withdrawFromTreasury(address who, uint256 amount) external;\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function mpDepositDistributionWeighter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x27005f060493f78101145dca8c6c56ffbe5f04684e7e1657cbcd1e18b6cd4749\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOracle interface\\n * @notice Interface for the Exactly oracle.\\n */\\ninterface IOracle {\\n    /**\\n     * @dev Returns the asset price\\n     * @param symbol The symbol of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(string memory symbol)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f4220f4a16226c85164c6dc4481878bb01b33a145ba4d4e4c8cf5fbb3f6cc52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MarketsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IFixedLender.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../utils/DecimalMath.sol\\\";\\n\\nlibrary MarketsLib {\\n    using DecimalMath for uint256;\\n\\n    // Struct to avoid stack too deep\\n    struct AccountLiquidity {\\n        uint256 balance;\\n        uint256 borrowBalance;\\n        uint256 collateralFactor;\\n        uint256 oraclePrice;\\n        uint256 sumCollateral;\\n        uint256 sumDebt;\\n    }\\n\\n    // Book-keeping\\n    struct Book {\\n        mapping(address => MarketsLib.Market) markets;\\n        mapping(address => uint256) borrowCaps;\\n        mapping(address => IFixedLender[]) accountAssets;\\n    }\\n\\n    // Struct for FixedLender's markets\\n    struct Market {\\n        string symbol;\\n        string name;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        uint8 decimals;\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    uint256 internal constant ALL_MATURITIES = 0;\\n\\n    event MarketEntered(address fixedLender, address account);\\n    event MarketExited(address fixedLender, address account);\\n\\n    /**\\n     * @dev Allows wallet to exit certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money stops being used as collateral\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress market address used to retrieve the market data\\n     * @param who wallet that wants to exit a market/maturity\\n     */\\n    function exitMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who\\n    ) external {\\n        MarketsLib.Market storage marketToExit = book.markets[\\n            fixedLenderAddress\\n        ];\\n\\n        if (marketToExit.accountMembership[who] == false) {\\n            return;\\n        }\\n\\n        delete marketToExit.accountMembership[who];\\n\\n        // load into memory for faster iteration\\n        IFixedLender[] memory userAssetList = book.accountAssets[who];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == IFixedLender(fixedLenderAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        IFixedLender[] storage storedList = book.accountAssets[who];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(fixedLenderAddress, who);\\n    }\\n\\n    /**\\n     * @dev Function to validate if a borrow should be allowed based on the what the book says.\\n            if the user is not participating in a market, and the caller is a fixedLender, the function\\n            will subscribe the wallet to the market membership\\n     * @param book account book that it will be used to perform validation\\n     * @param fixedLenderAddress address of the market that the borrow will be validated. If this equals msg.sender\\n              then the wallet will be autosubscribed to the market membership,\\n     * @param borrower address which will be borrowing money from this market\\n     */\\n    function validateBorrow(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address borrower\\n    ) external {\\n        if (!book.markets[fixedLenderAddress].accountMembership[borrower]) {\\n            // only fixedLenders may call borrowAllowed if borrower not in market\\n            if (msg.sender != fixedLenderAddress) {\\n                revert GenericError(ErrorCode.NOT_A_FIXED_LENDER_SENDER);\\n            }\\n\\n            // attempt to add borrower to the market // reverts if error\\n            addToMarket(book, fixedLenderAddress, borrower);\\n\\n            // it should be impossible to break the important invariant\\n            // TODO: is this tested?\\n            assert(\\n                book.markets[fixedLenderAddress].accountMembership[borrower]\\n            );\\n        }\\n\\n        uint256 borrowCap = book.borrowCaps[fixedLenderAddress];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = IFixedLender(fixedLenderAddress)\\n                .totalMpBorrows();\\n            if (totalBorrows >= borrowCap) {\\n                revert GenericError(ErrorCode.MARKET_BORROW_CAP_REACHED);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get account's liquidity for a certain market/maturity pool\\n     * @param book account book that it will be used to calculate liquidity\\n     * @param oracle oracle used to perform all liquidity calculations\\n     * @param account wallet which the liquidity will be calculated\\n     * @param fixedLenderToSimulate fixedLender in which we want to simulate withdraw/borrow ops (see next two args)\\n     * @param withdrawAmount amount to simulate withdraw\\n     * @param borrowAmount amount to simulate borrow\\n     */\\n    function accountLiquidity(\\n        Book storage book,\\n        IOracle oracle,\\n        address account,\\n        address fixedLenderToSimulate,\\n        uint256 withdrawAmount,\\n        uint256 borrowAmount\\n    ) external view returns (uint256, uint256) {\\n        AccountLiquidity memory vars; // Holds all our calculation results\\n\\n        // For each asset the account is in\\n        IFixedLender[] memory assets = book.accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IFixedLender asset = assets[i];\\n            MarketsLib.Market storage market = book.markets[address(asset)];\\n\\n            // Read the balances\\n            (vars.balance, vars.borrowBalance) = asset.getAccountSnapshot(\\n                account,\\n                ALL_MATURITIES\\n            );\\n\\n            vars.collateralFactor = book\\n                .markets[address(asset)]\\n                .collateralFactor;\\n\\n            // Get the normalized price of the asset (18 decimals)\\n            vars.oraclePrice = oracle.getAssetPrice(\\n                asset.underlyingTokenName()\\n            );\\n\\n            // We sum all the collateral prices\\n            vars.sumCollateral += DecimalMath\\n                .getTokenAmountInUSD(\\n                    vars.balance,\\n                    vars.oraclePrice,\\n                    market.decimals\\n                )\\n                .mul_(vars.collateralFactor);\\n\\n            // We sum all the debt\\n            vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                vars.borrowBalance,\\n                vars.oraclePrice,\\n                market.decimals\\n            );\\n\\n            // Simulate the effects of borrowing from/lending to a pool\\n            if (asset == IFixedLender(fixedLenderToSimulate)) {\\n                // Calculate the effects of borrowing fixedLenders\\n                if (borrowAmount != 0) {\\n                    vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                        borrowAmount,\\n                        vars.oraclePrice,\\n                        market.decimals\\n                    );\\n                }\\n\\n                // Calculate the effects of redeeming fixedLenders\\n                // (having less collateral is the same as having more debt for this calculation)\\n                if (withdrawAmount != 0) {\\n                    vars.sumDebt += DecimalMath\\n                        .getTokenAmountInUSD(\\n                            withdrawAmount,\\n                            vars.oraclePrice,\\n                            market.decimals\\n                        )\\n                        .mul_(vars.collateralFactor);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumDebt) {\\n            return (vars.sumCollateral - vars.sumDebt, 0);\\n        } else {\\n            return (0, vars.sumDebt - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows a user to start participating in a market\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress address used to retrieve the market data\\n     * @param who address of the user that it will start participating in a market/maturity\\n     */\\n    function addToMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who\\n    ) public {\\n        MarketsLib.Market storage marketToJoin = book.markets[\\n            fixedLenderAddress\\n        ];\\n\\n        if (marketToJoin.accountMembership[who] == true) {\\n            return;\\n        }\\n\\n        marketToJoin.accountMembership[who] = true;\\n\\n        book.accountAssets[who].push(IFixedLender(fixedLenderAddress));\\n        emit MarketEntered(fixedLenderAddress, who);\\n    }\\n}\\n\",\"keccak256\":\"0x7139c096e9b618db1ba3abf88481108c40a5bded5e008ef1e619325bdfbac1c2\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61197c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063a5234b421461005b578063c7c4db5c14610084578063ea5116dd146100b5578063fbb4331e146100de575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d9190611163565b610107565b005b61009e600480360381019061009991906111b2565b6102e9565b6040516100ac9291906113a4565b60405180910390f35b8180156100c157600080fd5b506100dc60048036038101906100d79190611163565b61081d565b005b8180156100ea57600080fd5b5061010560048036038101906101009190611163565b610ca4565b005b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600115158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156101ad57506102e4565b60018160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508360020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a583836040516102da929190611315565b60405180910390a1505b505050565b6000806102f461101b565b60008960020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161036d575b5050505050905060005b81518110156107c3576000828281518110610405577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008c60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8c60006040518363ffffffff1660e01b815260040161049092919061133e565b604080518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611264565b8660000187602001828152508281525050508c60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548560400181815250508b73ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8373ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105de9190611122565b6040518263ffffffff1660e01b81526004016105fa9190611382565b60206040518083038186803b15801561061257600080fd5b505afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a919061123b565b85606001818152505061068d856040015161067f876000015188606001518560040160009054906101000a900460ff16610f93565b610ff290919063ffffffff16565b8560800181815161069e919061143f565b915081815250506106c9856020015186606001518360040160009054906101000a900460ff16610f93565b8560a0018181516106da919061143f565b915081815250508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107ae57600088146107565761073d8886606001518360040160009054906101000a900460ff16610f93565b8560a00181815161074e919061143f565b915081815250505b600089146107ad5761079485604001516107868b88606001518560040160009054906101000a900460ff16610f93565b610ff290919063ffffffff16565b8560a0018181516107a5919061143f565b915081815250505b5b505080806107bb906117b3565b9150506103c1565b508160a00151826080015111156107f5578160a0015182608001516107e89190611691565b6000935093505050610812565b600082608001518360a0015161080b9190611691565b9350935050505b965096945050505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156108c35750610c9f565b8060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008460020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161098d575b50505050509050600081519050600081905060005b82811015610a83578673ffffffffffffffffffffffffffffffffffffffff16848281518110610a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610a7057809150610a83565b8080610a7b906117b3565b9150506109ec565b50818110610aba577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008760020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060018280549050610b119190611691565b81548110610b48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381548110610bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080805480610c2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590557fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d8787604051610c91929190611315565b60405180910390a150505050505b505050565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e76578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da857600e6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d9f9190611367565b60405180910390fd5b610db3838383610107565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e75577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b60008360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610f8d5760008373ffffffffffffffffffffffffffffffffffffffff1663c0107f816040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0c57600080fd5b505afa158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f44919061123b565b9050818110610f8b5760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610f829190611367565b60405180910390fd5b505b50505050565b60008082600a610fa39190611519565b9050600081670de0b6b3a764000087610fbc9190611637565b610fc69190611495565b9050670de0b6b3a76400008582610fdd9190611637565b610fe79190611495565b925050509392505050565b6000670de0b6b3a764000082846110099190611637565b6110139190611495565b905092915050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061106461105f846113f2565b6113cd565b90508281526020810184848401111561107c57600080fd5b61108784828561174f565b509392505050565b60008135905061109e816118ea565b92915050565b6000813590506110b381611901565b92915050565b600082601f8301126110ca57600080fd5b81516110da848260208601611051565b91505092915050565b6000813590506110f281611918565b92915050565b6000813590506111078161192f565b92915050565b60008151905061111c8161192f565b92915050565b60006020828403121561113457600080fd5b600082015167ffffffffffffffff81111561114e57600080fd5b61115a848285016110b9565b91505092915050565b60008060006060848603121561117857600080fd5b6000611186868287016110e3565b93505060206111978682870161108f565b92505060406111a88682870161108f565b9150509250925092565b60008060008060008060c087890312156111cb57600080fd5b60006111d989828a016110e3565b96505060206111ea89828a016110a4565b95505060406111fb89828a0161108f565b945050606061120c89828a0161108f565b935050608061121d89828a016110f8565b92505060a061122e89828a016110f8565b9150509295509295509295565b60006020828403121561124d57600080fd5b600061125b8482850161110d565b91505092915050565b6000806040838503121561127757600080fd5b60006112858582860161110d565b92505060206112968582860161110d565b9150509250929050565b6112a9816116c5565b82525050565b6112b88161173d565b82525050565b60006112c982611423565b6112d3818561142e565b93506112e381856020860161174f565b6112ec816118b8565b840191505092915050565b61130081611726565b82525050565b61130f81611726565b82525050565b600060408201905061132a60008301856112a0565b61133760208301846112a0565b9392505050565b600060408201905061135360008301856112a0565b61136060208301846112f7565b9392505050565b600060208201905061137c60008301846112af565b92915050565b6000602082019050818103600083015261139c81846112be565b905092915050565b60006040820190506113b96000830185611306565b6113c66020830184611306565b9392505050565b60006113d76113e8565b90506113e38282611782565b919050565b6000604051905090565b600067ffffffffffffffff82111561140d5761140c611889565b5b611416826118b8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061144a82611726565b915061145583611726565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561148a576114896117fc565b5b828201905092915050565b60006114a082611726565b91506114ab83611726565b9250826114bb576114ba61182b565b5b828204905092915050565b6000808291508390505b6001851115611510578086048111156114ec576114eb6117fc565b5b60018516156114fb5780820291505b8081029050611509856118c9565b94506114d0565b94509492505050565b600061152482611726565b915061152f83611730565b925061155c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611564565b905092915050565b6000826115745760019050611630565b816115825760009050611630565b816001811461159857600281146115a2576115d1565b6001915050611630565b60ff8411156115b4576115b36117fc565b5b8360020a9150848211156115cb576115ca6117fc565b5b50611630565b5060208310610133831016604e8410600b84101617156116065782820a905083811115611601576116006117fc565b5b611630565b61161384848460016114c6565b9250905081840481111561162a576116296117fc565b5b81810290505b9392505050565b600061164282611726565b915061164d83611726565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611686576116856117fc565b5b828202905092915050565b600061169c82611726565b91506116a783611726565b9250828210156116ba576116b96117fc565b5b828203905092915050565b60006116d082611706565b9050919050565b60006116e2826116c5565b9050919050565b60008190506116f7826118d6565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611748826116e9565b9050919050565b60005b8381101561176d578082015181840152602081019050611752565b8381111561177c576000848401525b50505050565b61178b826118b8565b810181811067ffffffffffffffff821117156117aa576117a9611889565b5b80604052505050565b60006117be82611726565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117f1576117f06117fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b601c81106118e7576118e661185a565b5b50565b6118f3816116c5565b81146118fe57600080fd5b50565b61190a816116d7565b811461191557600080fd5b50565b611921816116fc565b811461192c57600080fd5b50565b61193881611726565b811461194357600080fd5b5056fea26469706673582212209b8e136b1d392bce5bea91085a1c4e61e8489b30ccc55641d0cddff848f1d96064736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063a5234b421461005b578063c7c4db5c14610084578063ea5116dd146100b5578063fbb4331e146100de575b600080fd5b81801561006757600080fd5b50610082600480360381019061007d9190611163565b610107565b005b61009e600480360381019061009991906111b2565b6102e9565b6040516100ac9291906113a4565b60405180910390f35b8180156100c157600080fd5b506100dc60048036038101906100d79190611163565b61081d565b005b8180156100ea57600080fd5b5061010560048036038101906101009190611163565b610ca4565b005b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600115158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156101ad57506102e4565b60018160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508360020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a583836040516102da929190611315565b60405180910390a1505b505050565b6000806102f461101b565b60008960020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161036d575b5050505050905060005b81518110156107c3576000828281518110610405577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008c60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8c60006040518363ffffffff1660e01b815260040161049092919061133e565b604080518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611264565b8660000187602001828152508281525050508c60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301548560400181815250508b73ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8373ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105de9190611122565b6040518263ffffffff1660e01b81526004016105fa9190611382565b60206040518083038186803b15801561061257600080fd5b505afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a919061123b565b85606001818152505061068d856040015161067f876000015188606001518560040160009054906101000a900460ff16610f93565b610ff290919063ffffffff16565b8560800181815161069e919061143f565b915081815250506106c9856020015186606001518360040160009054906101000a900460ff16610f93565b8560a0018181516106da919061143f565b915081815250508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107ae57600088146107565761073d8886606001518360040160009054906101000a900460ff16610f93565b8560a00181815161074e919061143f565b915081815250505b600089146107ad5761079485604001516107868b88606001518560040160009054906101000a900460ff16610f93565b610ff290919063ffffffff16565b8560a0018181516107a5919061143f565b915081815250505b5b505080806107bb906117b3565b9150506103c1565b508160a00151826080015111156107f5578160a0015182608001516107e89190611691565b6000935093505050610812565b600082608001518360a0015161080b9190611691565b9350935050505b965096945050505050565b60008360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600015158160050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156108c35750610c9f565b8060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905560008460020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161098d575b50505050509050600081519050600081905060005b82811015610a83578673ffffffffffffffffffffffffffffffffffffffff16848281518110610a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610a7057809150610a83565b8080610a7b906117b3565b9150506109ec565b50818110610aba577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008760020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060018280549050610b119190611691565b81548110610b48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16818381548110610bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080805480610c2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590557fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d8787604051610c91929190611315565b60405180910390a150505050505b505050565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e76578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610da857600e6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d9f9190611367565b60405180910390fd5b610db3838383610107565b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e75577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b60008360010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610f8d5760008373ffffffffffffffffffffffffffffffffffffffff1663c0107f816040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0c57600080fd5b505afa158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f44919061123b565b9050818110610f8b5760106040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610f829190611367565b60405180910390fd5b505b50505050565b60008082600a610fa39190611519565b9050600081670de0b6b3a764000087610fbc9190611637565b610fc69190611495565b9050670de0b6b3a76400008582610fdd9190611637565b610fe79190611495565b925050509392505050565b6000670de0b6b3a764000082846110099190611637565b6110139190611495565b905092915050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061106461105f846113f2565b6113cd565b90508281526020810184848401111561107c57600080fd5b61108784828561174f565b509392505050565b60008135905061109e816118ea565b92915050565b6000813590506110b381611901565b92915050565b600082601f8301126110ca57600080fd5b81516110da848260208601611051565b91505092915050565b6000813590506110f281611918565b92915050565b6000813590506111078161192f565b92915050565b60008151905061111c8161192f565b92915050565b60006020828403121561113457600080fd5b600082015167ffffffffffffffff81111561114e57600080fd5b61115a848285016110b9565b91505092915050565b60008060006060848603121561117857600080fd5b6000611186868287016110e3565b93505060206111978682870161108f565b92505060406111a88682870161108f565b9150509250925092565b60008060008060008060c087890312156111cb57600080fd5b60006111d989828a016110e3565b96505060206111ea89828a016110a4565b95505060406111fb89828a0161108f565b945050606061120c89828a0161108f565b935050608061121d89828a016110f8565b92505060a061122e89828a016110f8565b9150509295509295509295565b60006020828403121561124d57600080fd5b600061125b8482850161110d565b91505092915050565b6000806040838503121561127757600080fd5b60006112858582860161110d565b92505060206112968582860161110d565b9150509250929050565b6112a9816116c5565b82525050565b6112b88161173d565b82525050565b60006112c982611423565b6112d3818561142e565b93506112e381856020860161174f565b6112ec816118b8565b840191505092915050565b61130081611726565b82525050565b61130f81611726565b82525050565b600060408201905061132a60008301856112a0565b61133760208301846112a0565b9392505050565b600060408201905061135360008301856112a0565b61136060208301846112f7565b9392505050565b600060208201905061137c60008301846112af565b92915050565b6000602082019050818103600083015261139c81846112be565b905092915050565b60006040820190506113b96000830185611306565b6113c66020830184611306565b9392505050565b60006113d76113e8565b90506113e38282611782565b919050565b6000604051905090565b600067ffffffffffffffff82111561140d5761140c611889565b5b611416826118b8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600061144a82611726565b915061145583611726565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561148a576114896117fc565b5b828201905092915050565b60006114a082611726565b91506114ab83611726565b9250826114bb576114ba61182b565b5b828204905092915050565b6000808291508390505b6001851115611510578086048111156114ec576114eb6117fc565b5b60018516156114fb5780820291505b8081029050611509856118c9565b94506114d0565b94509492505050565b600061152482611726565b915061152f83611730565b925061155c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611564565b905092915050565b6000826115745760019050611630565b816115825760009050611630565b816001811461159857600281146115a2576115d1565b6001915050611630565b60ff8411156115b4576115b36117fc565b5b8360020a9150848211156115cb576115ca6117fc565b5b50611630565b5060208310610133831016604e8410600b84101617156116065782820a905083811115611601576116006117fc565b5b611630565b61161384848460016114c6565b9250905081840481111561162a576116296117fc565b5b81810290505b9392505050565b600061164282611726565b915061164d83611726565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611686576116856117fc565b5b828202905092915050565b600061169c82611726565b91506116a783611726565b9250828210156116ba576116b96117fc565b5b828203905092915050565b60006116d082611706565b9050919050565b60006116e2826116c5565b9050919050565b60008190506116f7826118d6565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611748826116e9565b9050919050565b60005b8381101561176d578082015181840152602081019050611752565b8381111561177c576000848401525b50505050565b61178b826118b8565b810181811067ffffffffffffffff821117156117aa576117a9611889565b5b80604052505050565b60006117be82611726565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117f1576117f06117fc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b601c81106118e7576118e661185a565b5b50565b6118f3816116c5565b81146118fe57600080fd5b50565b61190a816116d7565b811461191557600080fd5b50565b611921816116fc565b811461192c57600080fd5b50565b61193881611726565b811461194357600080fd5b5056fea26469706673582212209b8e136b1d392bce5bea91085a1c4e61e8489b30ccc55641d0cddff848f1d96064736f6c63430008040033",
  "libraries": {
    "DecimalMath": "0xC2ca02660Fe270aA11Ee1649AE024F9825f08C17"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountLiquidity(MarketsLib.Book storage,IOracle,address,address,uint256,uint256)": {
        "details": "Function to get account's liquidity for a certain market/maturity pool",
        "params": {
          "account": "wallet which the liquidity will be calculated",
          "book": "account book that it will be used to calculate liquidity",
          "borrowAmount": "amount to simulate borrow",
          "fixedLenderToSimulate": "fixedLender in which we want to simulate withdraw/borrow ops (see next two args)",
          "oracle": "oracle used to perform all liquidity calculations",
          "withdrawAmount": "amount to simulate withdraw"
        }
      },
      "addToMarket(MarketsLib.Book storage,address,address)": {
        "details": "Allows a user to start participating in a market",
        "params": {
          "book": "book in which the addMarket function will be applied to",
          "fixedLenderAddress": "address used to retrieve the market data",
          "who": "address of the user that it will start participating in a market/maturity"
        }
      },
      "exitMarket(MarketsLib.Book storage,address,address)": {
        "details": "Allows wallet to exit certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money stops being used as collateral",
        "params": {
          "book": "book in which the addMarket function will be applied to",
          "fixedLenderAddress": "market address used to retrieve the market data",
          "who": "wallet that wants to exit a market/maturity"
        }
      },
      "validateBorrow(MarketsLib.Book storage,address,address)": {
        "details": "Function to validate if a borrow should be allowed based on the what the book says. if the user is not participating in a market, and the caller is a fixedLender, the function will subscribe the wallet to the market membership",
        "params": {
          "book": "account book that it will be used to perform validation",
          "borrower": "address which will be borrowing money from this market",
          "fixedLenderAddress": "address of the market that the borrow will be validated. If this equals msg.sender then the wallet will be autosubscribed to the market membership,"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}