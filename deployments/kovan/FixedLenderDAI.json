{
  "address": "0xE2e8F5eC2A95eD1D6709266E4dB1ee58c6Ea72f7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_underlyingTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_eTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_auditorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolAccounting",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "alternativeState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolStateMultiple",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "AddReserves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "BorrowFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "DepositToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToSmartPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "RepayToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        }
      ],
      "name": "SeizeAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromSmartPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUTURE_POOLS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountAllowed",
          "type": "uint256"
        }
      ],
      "name": "borrowFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountRequired",
          "type": "uint256"
        }
      ],
      "name": "depositToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eToken",
      "outputs": [
        {
          "internalType": "contract IEToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFuturePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartPoolDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getTotalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IFixedLender",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpDepositDistributionWeighter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccounting",
      "outputs": [
        {
          "internalType": "contract IPoolAccounting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSpreadFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeAmount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mpDepositDistributionWeighter",
          "type": "uint256"
        }
      ],
      "name": "setMpDepositDistributionWeighter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolSpreadFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolSpreadFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedUnderlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingTokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe39a40b6f07c857262c62663ea0f44f24beb558c9ebf5fadb36a7467ede8b91c",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0xE2e8F5eC2A95eD1D6709266E4dB1ee58c6Ea72f7",
    "transactionIndex": 10,
    "gasUsed": "4565146",
    "logsBloom": "0x
    "blockHash": "0x8c85b3135f62ea5f8db9cae4095db2456c22b193be97761d3e327a797bb4e646",
    "transactionHash": "0xe39a40b6f07c857262c62663ea0f44f24beb558c9ebf5fadb36a7467ede8b91c",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 30310030,
        "transactionHash": "0xe39a40b6f07c857262c62663ea0f44f24beb558c9ebf5fadb36a7467ede8b91c",
        "address": "0xE2e8F5eC2A95eD1D6709266E4dB1ee58c6Ea72f7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x8c85b3135f62ea5f8db9cae4095db2456c22b193be97761d3e327a797bb4e646"
      }
    ],
    "blockNumber": 30310030,
    "cumulativeGasUsed": "14277810",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa",
    "DAI",
    "0x856DDeBa939289bFe3b5eD28A55BF0c82693E8AC",
    "0x6c12C61d9227F5315Bc4436E68121D9073961681",
    "0xB6Fb7d160001CfD13d15B762A4a46eF95cA0BA0a"
  ],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_underlyingTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_eTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auditorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAccounting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alternativeState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolStateMultiple\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"AddReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"BorrowFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"DepositToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToSmartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"RepayToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"}],\"name\":\"SeizeAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromSmartPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUTURE_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"borrowFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountRequired\",\"type\":\"uint256\"}],\"name\":\"depositToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eToken\",\"outputs\":[{\"internalType\":\"contract IEToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFuturePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartPoolDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getTotalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IFixedLender\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpDepositDistributionWeighter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccounting\",\"outputs\":[{\"internalType\":\"contract IPoolAccounting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSpreadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeAmount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mpDepositDistributionWeighter\",\"type\":\"uint256\"}],\"name\":\"setMpDepositDistributionWeighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolSpreadFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolSpreadFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedUnderlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddReserves(address,uint256)\":{\"params\":{\"addAmount\":\"amount added as reserves as part of the liquidation event\",\"benefactor\":\"address added a certain amount to its reserves\"}},\"BorrowFromMaturityPool(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was borrowed\",\"fee\":\"amount extra that it will need to be paid at maturity\",\"maturityDate\":\"dateID/poolID/maturity in which the user will have                     to repay the loan\",\"to\":\"address which borrowed the asset\"}},\"DepositToMaturityPool(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was deposited\",\"fee\":\"is the extra amount that it will be collected at maturity\",\"from\":\"address which deposited the asset\",\"maturityDate\":\"dateID/poolID/maturity in which the user will be able                     to collect his deposit + his fee\"}},\"DepositToSmartPool(address,uint256)\":{\"params\":{\"amount\":\"amount added to the smart pool\",\"user\":\"address that added a certain amount to the smart pool\"}},\"LiquidateBorrow(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"fixedLenderCollateral\":\"address of the asset that it was seized                              by the liquidator\",\"liquidator\":\"address which repaid the previously borrowed amount\",\"maturityDate\":\"poolID where the borrower had an uncollaterized position\",\"repayAmount\":\"amount of the asset that it was repaid\",\"seizedAmount\":\"amount seized of the collateral\"}},\"RepayToMaturityPool(address,address,uint256,uint256,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"debtCovered\":\"amount of the debt that was covered in this repayment (penalties could have been repaid)\",\"maturityDate\":\"poolID where the user repaid its borrowed amounts\",\"payer\":\"address which repaid the previously borrowed amount\",\"repayAmount\":\"amount that was repaid\"}},\"SeizeAsset(address,address,uint256)\":{\"params\":{\"borrower\":\"address which had the original debt\",\"liquidator\":\"address which seized this collateral\",\"seizedAmount\":\"amount seized of the collateral\"}},\"WithdrawFromMaturityPool(address,uint256,uint256)\":{\"params\":{\"amount\":\"of the asset that it was deposited\",\"from\":\"address which will be collecting the asset\",\"maturityDate\":\"poolID where the user collected its deposits\"}},\"WithdrawFromSmartPool(address,uint256)\":{\"params\":{\"amount\":\"amount withdrawn to the smart pool\",\"user\":\"address that withdrew a certain amount from the smart pool\"}}},\"kind\":\"dev\",\"methods\":{\"borrowFromMaturityPool(uint256,uint256,uint256)\":{\"details\":\"Lends to a wallet for a certain maturity date/pool\",\"params\":{\"amount\":\"amount to send to the msg.sender\",\"maturityDate\":\"maturity date for repayment\",\"maxAmountAllowed\":\"maximum amount of debt that        the user is willing to accept for the transaction        to go through\"}},\"depositToMaturityPool(uint256,uint256,uint256)\":{\"details\":\"Deposits a certain amount to the protocol for      a certain maturity date/pool\",\"params\":{\"amount\":\"amount to receive from the msg.sender\",\"maturityDate\":\"maturity date / pool ID\",\"minAmountRequired\":\"minimum amount of capital required        by the depositor for the transaction to be accepted\"}},\"depositToSmartPool(uint256)\":{\"details\":\"Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC\",\"params\":{\"amount\":\"The amount to be deposited\"}},\"getAccountSnapshot(address,uint256)\":{\"details\":\"Gets current snapshot for a wallet in certain maturity\",\"params\":{\"maturityDate\":\"maturityDate - Send the value 0 in order to get the snapshot for all maturities where the user borrowed\",\"who\":\"wallet to return status snapshot in the specified maturity date\"},\"returns\":{\"_0\":\"the amount the user deposited to the smart pool and the total money he owes from maturities\"}},\"getAuditor()\":{\"details\":\"Gets the auditor contract interface being used to validate positions\"},\"getFuturePools()\":{\"details\":\"Function to retrieve valid future pools\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSmartPoolDeposits()\":{\"details\":\"Gets the market size of the smart pool, usefull for dApps to show current status\"},\"getTotalMpBorrows(uint256)\":{\"details\":\"Gets the total amount of borrowed money for a maturityDate\",\"params\":{\"maturityDate\":\"maturity date\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidate(address,uint256,address,uint256)\":{\"details\":\"Msg.sender liquidates a borrower's position and repays a certain amount of debt      for a maturity date, seizing a part of borrower's collateral\",\"params\":{\"borrower\":\"wallet that has an outstanding debt for a certain maturity date\",\"fixedLenderCollateral\":\"address of fixedLender from which the collateral will be seized to give the liquidator\",\"maturityDate\":\"maturity date for which the position will be liquidated\",\"repayAmount\":\"amount to be repaid by liquidator(msg.sender)\"}},\"pause()\":{\"details\":\"Sets the _pause state to true in case of emergency, triggered by an authorized account\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to repay to should be matured\",\"params\":{\"borrower\":\"The address of the account that has the debt\",\"maturityDate\":\"The matured date where the debt is located\",\"repayAmount\":\"amount to be paid for the borrower's debt\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seize(address,address,uint256)\":{\"details\":\"Public function for liquidator to seize borrowers tokens in the smart pool.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)\",\"params\":{\"borrower\":\"address from which the tokens will be seized\",\"liquidator\":\"address which will receive the seized tokens\",\"seizeAmount\":\"amount to be removed from borrower's posession\"}},\"setMpDepositDistributionWeighter(uint256)\":{\"details\":\"Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order      to share out more or less unassigned earnings to that deposit\",\"params\":{\"_mpDepositDistributionWeighter\":\"percentage amount represented with 1e18 decimals that will multiply the amount to deposit\"}},\"setProtocolLiquidationFee(uint256)\":{\"details\":\"Sets the protocol's collateral liquidation fee used on liquidations\",\"params\":{\"_protocolLiquidationFee\":\"percentage amount represented with 1e18 decimals\"}},\"setProtocolSpreadFee(uint256)\":{\"details\":\"Sets the protocol's spread fee used on loan repayment\",\"params\":{\"_protocolSpreadFee\":\"percentage amount represented with 1e18 decimals\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Sets the _pause state to false when threat is gone, triggered by an authorized account\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to retrieve the money should be matured\",\"params\":{\"maturityDate\":\"The matured date for which we're trying to retrieve the funds\",\"redeemAmount\":\"The number of underlying tokens to receive\",\"redeemer\":\"The address of the account which is redeeming the tokens\"}},\"withdrawFromSmartPool(uint256)\":{\"details\":\"Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\",\"params\":{\"amount\":\"The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance\"}},\"withdrawFromTreasury(address,uint256)\":{\"params\":{\"amount\":\"amount to be transferred\",\"who\":\"address which will receive the funds\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AddReserves(address,uint256)\":{\"notice\":\"Event emitted reserves have been added to the protocol\"},\"BorrowFromMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user borrows amount of an asset from a         certain maturity date\"},\"DepositToMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a fee at the end of the         period\"},\"DepositToSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"},\"LiquidateBorrow(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user's position had a liquidation\"},\"RepayToMaturityPool(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user repays its borrows after maturity\"},\"SeizeAsset(address,address,uint256)\":{\"notice\":\"Event emitted when a user's collateral has been seized\"},\"WithdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user collects its deposits after maturity\"},\"WithdrawFromSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"}},\"kind\":\"user\",\"methods\":{\"liquidate(address,uint256,address,uint256)\":{\"notice\":\"Function to liquidate an uncollaterized position\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"notice\":\"Sender repays an amount of borrower's debt for a maturity date\"},\"seize(address,address,uint256)\":{\"notice\":\"Public function to seize a certain amount of tokens\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date\"},\"withdrawFromTreasury(address,uint256)\":{\"notice\":\"public function to transfer funds from protocol earnings to a specified wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedLender.sol\":\"FixedLender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/EToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\n\\ncontract EToken is IEToken, AccessControl {\\n    using DecimalMath for uint256;\\n\\n    // totalSupply = smart pool's balance\\n    uint256 public override totalSupply;\\n    // index = totalSupply / totalScaledBalance\\n    uint256 private totalScaledBalance;\\n    // userBalance = userScaledBalance * index\\n    mapping(address => uint256) private userScaledBalance;\\n    mapping(address => uint256) private lastBalanceIncrease;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    string public override name;\\n    string public override symbol;\\n    uint8 public override decimals;\\n\\n    IFixedLender public fixedLender;\\n    IAuditor public auditor;\\n\\n    modifier onlyFixedLender() {\\n        if (msg.sender != address(fixedLender)) {\\n            revert GenericError(ErrorCode.CALLER_MUST_BE_FIXED_LENDER);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        uint256 scaledBalance = amount;\\n        if (totalSupply != 0) {\\n            scaledBalance = (scaledBalance * totalScaledBalance) / totalSupply;\\n        }\\n\\n        userScaledBalance[user] += scaledBalance;\\n        totalScaledBalance += scaledBalance;\\n        totalSupply += amount;\\n        lastBalanceIncrease[user] = block.number;\\n\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external override onlyFixedLender {\\n        totalSupply += amount;\\n        emit EarningsAccrued(amount);\\n    }\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        if (lastBalanceIncrease[user] >= block.number) {\\n            revert GenericError(ErrorCode.SMART_POOL_FUNDS_LOCKED);\\n        }\\n\\n        require(\\n            balanceOf(user) >= amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n\\n        uint256 scaledWithdrawAmount = (amount * totalScaledBalance) /\\n            totalSupply;\\n\\n        totalScaledBalance -= scaledWithdrawAmount;\\n        userScaledBalance[user] -= scaledWithdrawAmount;\\n        totalSupply -= amount;\\n\\n        emit Transfer(user, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Initializes the eToken setting the FixedLender and Auditor addresses\\n     * - Only able to initialize once\\n     * @param fixedLenderAddress The address of the FixedLender that uses this eToken\\n     * @param auditorAddress The address of the Auditor\\n     */\\n    function initialize(address fixedLenderAddress, address auditorAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (\\n            address(fixedLender) != address(0) && address(auditor) != address(0)\\n        ) {\\n            revert GenericError(ErrorCode.CONTRACT_ALREADY_INITIALIZED);\\n        }\\n        fixedLender = IFixedLender(fixedLenderAddress);\\n        auditor = IAuditor(auditorAddress);\\n\\n        emit Initialized(fixedLenderAddress, auditorAddress);\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of tokens from msg.sender to recipient\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n     * @param sender The owner of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows `spender` to spend the tokens owned by msg.sender\\n     * @param spender The user allowed to spend msg.sender tokens\\n     * @param amount The amount of tokens spender is allowed to spend\\n     * @return `true` if the reverts succeeds, reverts otherwise\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true` if the increase allowance succeeds, reverts otherwise\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true` if the decrease allowance succeeds, reverts otherwise\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param account The user whose balance is calculated\\n     * @return The balance of the user\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (userScaledBalance[account] == 0) {\\n            return 0;\\n        }\\n\\n        return (userScaledBalance[account] * totalSupply) / totalScaledBalance;\\n    }\\n\\n    /**\\n     * @dev Returns the allowance of spender on the tokens owned by owner\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend the owner's tokens\\n     * @return The amount of owner's tokens spender is allowed to spend\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     * @param sender The sender of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        // reverts on failure\\n        auditor.validateAccountShortfall(address(fixedLender), sender, amount);\\n\\n        uint256 senderRemainingBalance = senderBalance - amount;\\n        userScaledBalance[sender] =\\n            (senderRemainingBalance * totalScaledBalance) /\\n            totalSupply;\\n        userScaledBalance[recipient] =\\n            ((balanceOf(recipient) + amount) * totalScaledBalance) /\\n            totalSupply;\\n        lastBalanceIncrease[recipient] = block.number;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend owner tokens\\n     * @param amount The amount of owner's tokens spender is allowed to spend\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb2154e4fd7f6978fc44995eab630cc4a7c107c30605a24cdedf414f706c87707\",\"license\":\"GPL-3.0-or-later\"},\"contracts/FixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./EToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IPoolAccounting.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract FixedLender is IFixedLender, ReentrancyGuard, AccessControl, Pausable {\\n    using DecimalMath for uint256;\\n\\n    uint256 public protocolSpreadFee = 2.8e16; // 2.8%\\n    uint256 public protocolLiquidationFee = 2.8e16; // 2.8%\\n    uint256 public override mpDepositDistributionWeighter = 1e18; // 100%\\n    uint8 public constant MAX_FUTURE_POOLS = 12; // if every 14 days, then 6 months\\n    uint256 public treasury;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    IERC20 public override trustedUnderlying;\\n    IEToken public override eToken;\\n    string public override underlyingTokenName;\\n    IPoolAccounting public poolAccounting;\\n\\n    IAuditor public auditor;\\n\\n    // Total borrows in all maturities\\n    uint256 public override totalMpBorrows;\\n\\n    /**\\n     * @notice Event emitted when a user borrows amount of an asset from a\\n     *         certain maturity date\\n     * @param to address which borrowed the asset\\n     * @param amount of the asset that it was borrowed\\n     * @param fee amount extra that it will need to be paid at maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will have\\n     *                     to repay the loan\\n     */\\n    event BorrowFromMaturityPool(\\n        address indexed to,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user deposits an amount of an asset to a\\n     *         certain maturity date collecting a fee at the end of the\\n     *         period\\n     * @param from address which deposited the asset\\n     * @param amount of the asset that it was deposited\\n     * @param fee is the extra amount that it will be collected at maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will be able\\n     *                     to collect his deposit + his fee\\n     */\\n    event DepositToMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user collects its deposits after maturity\\n     * @param from address which will be collecting the asset\\n     * @param amount of the asset that it was deposited\\n     * @param maturityDate poolID where the user collected its deposits\\n     */\\n    event WithdrawFromMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user repays its borrows after maturity\\n     * @param payer address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param repayAmount amount that was repaid\\n     * @param debtCovered amount of the debt that was covered in this repayment (penalties could have been repaid)\\n     * @param maturityDate poolID where the user repaid its borrowed amounts\\n     */\\n    event RepayToMaturityPool(\\n        address indexed payer,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 debtCovered,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's position had a liquidation\\n     * @param liquidator address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param repayAmount amount of the asset that it was repaid\\n     * @param fixedLenderCollateral address of the asset that it was seized\\n     *                              by the liquidator\\n     * @param seizedAmount amount seized of the collateral\\n     * @param maturityDate poolID where the borrower had an uncollaterized position\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address fixedLenderCollateral,\\n        uint256 seizedAmount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's collateral has been seized\\n     * @param liquidator address which seized this collateral\\n     * @param borrower address which had the original debt\\n     * @param seizedAmount amount seized of the collateral\\n     */\\n    event SeizeAsset(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizedAmount\\n    );\\n\\n    /**\\n     * @notice Event emitted reserves have been added to the protocol\\n     * @param benefactor address added a certain amount to its reserves\\n     * @param addAmount amount added as reserves as part of the liquidation event\\n     */\\n    event AddReserves(address benefactor, uint256 addAmount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that added a certain amount to the smart pool\\n     * @param amount amount added to the smart pool\\n     */\\n    event DepositToSmartPool(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that withdrew a certain amount from the smart pool\\n     * @param amount amount withdrawn to the smart pool\\n     */\\n    event WithdrawFromSmartPool(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _tokenAddress,\\n        string memory _underlyingTokenName,\\n        address _eTokenAddress,\\n        address _auditorAddress,\\n        address _poolAccounting\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        trustedUnderlying = IERC20(_tokenAddress);\\n        underlyingTokenName = _underlyingTokenName;\\n\\n        auditor = IAuditor(_auditorAddress);\\n        eToken = IEToken(_eTokenAddress);\\n        poolAccounting = IPoolAccounting(_poolAccounting);\\n    }\\n\\n    /**\\n     * @dev Sets the protocol's spread fee used on loan repayment\\n     * @param _protocolSpreadFee percentage amount represented with 1e18 decimals\\n     */\\n    function setProtocolSpreadFee(uint256 _protocolSpreadFee)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        protocolSpreadFee = _protocolSpreadFee;\\n    }\\n\\n    /**\\n     * @dev Sets the protocol's collateral liquidation fee used on liquidations\\n     * @param _protocolLiquidationFee percentage amount represented with 1e18 decimals\\n     */\\n    function setProtocolLiquidationFee(uint256 _protocolLiquidationFee)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        protocolLiquidationFee = _protocolLiquidationFee;\\n    }\\n\\n    /**\\n     * @dev Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order\\n     *      to share out more or less unassigned earnings to that deposit\\n     * @param _mpDepositDistributionWeighter percentage amount represented with 1e18 decimals that will multiply the amount to deposit\\n     */\\n    function setMpDepositDistributionWeighter(\\n        uint256 _mpDepositDistributionWeighter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mpDepositDistributionWeighter = _mpDepositDistributionWeighter;\\n    }\\n\\n    /**\\n     * @dev Sets the _pause state to true in case of emergency, triggered by an authorized account\\n     */\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Sets the _pause state to false when threat is gone, triggered by an authorized account\\n     */\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /** @notice Function to liquidate an uncollaterized position\\n     * @dev Msg.sender liquidates a borrower's position and repays a certain amount of debt\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external override nonReentrant whenNotPaused returns (uint256) {\\n        return\\n            _liquidate(\\n                msg.sender,\\n                borrower,\\n                repayAmount,\\n                fixedLenderCollateral,\\n                maturityDate\\n            );\\n    }\\n\\n    /**\\n     * @notice Public function to seize a certain amount of tokens\\n     * @dev Public function for liquidator to seize borrowers tokens in the smart pool.\\n     *      This function will only be called from another FixedLender, on `liquidation` calls.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _seize(msg.sender, liquidator, borrower, seizeAmount);\\n    }\\n\\n    /**\\n     * @dev Function to retrieve valid future pools\\n     */\\n    function getFuturePools() external view returns (uint256[] memory) {\\n        return TSUtils.futurePools(MAX_FUTURE_POOLS);\\n    }\\n\\n    /**\\n     * @notice User collects a certain amount of underlying asset after having\\n     *         supplied tokens until a certain maturity date\\n     * @dev The pool that the user is trying to retrieve the money should be matured\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemAmount The number of underlying tokens to receive\\n     * @param maturityDate The matured date for which we're trying to retrieve the funds\\n     */\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) public override nonReentrant {\\n        if (redeemAmount == 0) {\\n            revert GenericError(ErrorCode.REDEEM_CANT_BE_ZERO);\\n        }\\n\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.MATURED,\\n            TSUtils.State.NONE\\n        );\\n\\n        poolAccounting.withdrawMP(\\n            maturityDate,\\n            redeemer,\\n            redeemAmount,\\n            eToken.totalSupply() / MAX_FUTURE_POOLS\\n        );\\n\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        emit WithdrawFromMaturityPool(redeemer, redeemAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @notice public function to transfer funds from protocol earnings to a specified wallet\\n     * @param who address which will receive the funds\\n     * @param amount amount to be transferred\\n     */\\n    function withdrawFromTreasury(address who, uint256 amount)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        treasury -= amount;\\n        SafeERC20.safeTransfer(trustedUnderlying, who, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned\\n     * - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\\n     * @param amount The underlying amount to be withdrawn\\n     * - Send the value type(uint256).max in order to withdraw the whole eToken balance\\n     */\\n    function withdrawFromSmartPool(uint256 amount) public override {\\n        // reverts on failure\\n        auditor.validateAccountShortfall(address(this), msg.sender, amount);\\n\\n        uint256 userBalance = eToken.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n\\n        // We check if the underlying liquidity that the user wants to withdraw is borrowed\\n        if (\\n            eToken.totalSupply() - amountToWithdraw <\\n            poolAccounting.smartPoolBorrowed()\\n        ) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n\\n        eToken.burn(msg.sender, amountToWithdraw);\\n        doTransferOut(msg.sender, amountToWithdraw);\\n\\n        emit WithdrawFromSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Lends to a wallet for a certain maturity date/pool\\n     * @param amount amount to send to the msg.sender\\n     * @param maturityDate maturity date for repayment\\n     * @param maxAmountAllowed maximum amount of debt that\\n     *        the user is willing to accept for the transaction\\n     *        to go through\\n     */\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.NONE\\n        );\\n\\n        uint256 totalOwed = poolAccounting.borrowMP(\\n            maturityDate,\\n            msg.sender,\\n            amount,\\n            maxAmountAllowed,\\n            eToken.totalSupply(),\\n            MAX_FUTURE_POOLS\\n        );\\n        totalMpBorrows += totalOwed;\\n\\n        auditor.validateBorrowMP(address(this), msg.sender);\\n\\n        doTransferOut(msg.sender, amount);\\n\\n        emit BorrowFromMaturityPool(\\n            msg.sender,\\n            amount,\\n            totalOwed - amount, // fee\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposits a certain amount to the protocol for\\n     *      a certain maturity date/pool\\n     * @param amount amount to receive from the msg.sender\\n     * @param maturityDate maturity date / pool ID\\n     * @param minAmountRequired minimum amount of capital required\\n     *        by the depositor for the transaction to be accepted\\n     */\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.NONE\\n        );\\n\\n        amount = doTransferIn(msg.sender, amount);\\n\\n        uint256 currentTotalDeposit = poolAccounting.depositMP(\\n            maturityDate,\\n            msg.sender,\\n            amount,\\n            minAmountRequired\\n        );\\n\\n        emit DepositToMaturityPool(\\n            msg.sender,\\n            amount,\\n            currentTotalDeposit - amount,\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @notice Sender repays an amount of borrower's debt for a maturity date\\n     * @dev The pool that the user is trying to repay to should be matured\\n     * @param borrower The address of the account that has the debt\\n     * @param maturityDate The matured date where the debt is located\\n     * @param repayAmount amount to be paid for the borrower's debt\\n     */\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.MATURED\\n        );\\n\\n        _repay(msg.sender, borrower, repayAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 eUSDC\\n     * @param amount The amount to be deposited\\n     */\\n    function depositToSmartPool(uint256 amount) public override whenNotPaused {\\n        amount = doTransferIn(msg.sender, amount);\\n        eToken.mint(msg.sender, amount);\\n        emit DepositToSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Gets the market size of the smart pool, usefull for dApps to show current status\\n     */\\n    function getSmartPoolDeposits() public view returns (uint256) {\\n        return eToken.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Gets the auditor contract interface being used to validate positions\\n     */\\n    function getAuditor() public view override returns (IAuditor) {\\n        return IAuditor(auditor);\\n    }\\n\\n    /**\\n     * @dev Gets current snapshot for a wallet in certain maturity\\n     * @param who wallet to return status snapshot in the specified maturity date\\n     * @param maturityDate maturityDate\\n     * - Send the value 0 in order to get the snapshot for all maturities where the user borrowed\\n     * @return the amount the user deposited to the smart pool and the total money he owes from maturities\\n     */\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            eToken.balanceOf(who),\\n            poolAccounting.getAccountBorrows(who, maturityDate)\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of borrowed money for a maturityDate\\n     * @param maturityDate maturity date\\n     */\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolAccounting.getTotalMpBorrows(maturityDate);\\n    }\\n\\n    /**\\n     * @notice This function allows to (partially) repay a position\\n     * @dev Internal repay function, it allows to partially pay debt and it\\n     *      should be called after `beforeRepayMP` or `liquidateAllowed`\\n     *      on the auditor\\n     * @param payer the address of the account that will pay the debt\\n     * @param borrower the address of the account that has the debt\\n     * @param repayAmount the amount of debt of the pool that should be paid\\n     * @param maturityDate the maturityDate to access the pool\\n     * @return the actual amount that it was transferred into the protocol\\n     */\\n    function _repay(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        if (repayAmount == 0) {\\n            revert GenericError(ErrorCode.REPAY_ZERO);\\n        }\\n\\n        repayAmount = doTransferIn(payer, repayAmount);\\n\\n        (\\n            uint256 spareRepayAmount,\\n            uint256 debtCovered,\\n            uint256 fee,\\n            uint256 earningsRepay\\n        ) = poolAccounting.repayMP(maturityDate, borrower, repayAmount);\\n\\n        if (spareRepayAmount > 0) {\\n            doTransferOut(payer, spareRepayAmount);\\n        }\\n\\n        // We take a share of the spread of the protocol\\n        uint256 protocolShare = fee.mul_(protocolSpreadFee);\\n        treasury += protocolShare;\\n        eToken.accrueEarnings(fee - protocolShare + earningsRepay);\\n\\n        totalMpBorrows -= debtCovered;\\n\\n        emit RepayToMaturityPool(\\n            payer,\\n            borrower,\\n            repayAmount,\\n            debtCovered,\\n            maturityDate\\n        );\\n\\n        return repayAmount - spareRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Internal Function to liquidate an uncollaterized position\\n     * @dev Liquidator liquidates a borrower's position and repays a certain amount of collateral\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function _liquidate(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        // reverts on failure\\n        auditor.liquidateAllowed(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n\\n        repayAmount = _repay(liquidator, borrower, repayAmount, maturityDate);\\n\\n        // reverts on failure\\n        uint256 seizeTokens = auditor.liquidateCalculateSeizeAmount(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            repayAmount\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        (uint256 balance, ) = fixedLenderCollateral.getAccountSnapshot(\\n            borrower,\\n            maturityDate\\n        );\\n        if (balance < seizeTokens) {\\n            revert GenericError(ErrorCode.TOKENS_MORE_THAN_BALANCE);\\n        }\\n\\n        // If this is also the collateral\\n        // run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        // both revert on failure\\n        if (address(fixedLenderCollateral) == address(this)) {\\n            _seize(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            fixedLenderCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            address(fixedLenderCollateral),\\n            seizeTokens,\\n            maturityDate\\n        );\\n\\n        return repayAmount;\\n    }\\n\\n    /**\\n     * @notice Private function to seize a certain amount of tokens\\n     * @dev Private function for liquidator to seize borrowers tokens in the smart pool.\\n     *      This function will only be called from this FixedLender, on `liquidation` or through `seize` calls from another FixedLender.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param seizerFixedLender address which is calling the seize function (see `seize` public function)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     */\\n    function _seize(\\n        address seizerFixedLender,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount\\n    ) internal {\\n        // reverts on failure\\n        auditor.seizeAllowed(\\n            address(this),\\n            seizerFixedLender,\\n            liquidator,\\n            borrower\\n        );\\n\\n        uint256 protocolAmount = seizeAmount.mul_(protocolLiquidationFee);\\n        uint256 amountToTransfer = seizeAmount - protocolAmount;\\n        treasury += protocolAmount;\\n\\n        // We check if the underlying liquidity that the user wants to seize is borrowed\\n        if (\\n            eToken.totalSupply() - amountToTransfer <\\n            poolAccounting.smartPoolBorrowed()\\n        ) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n\\n        // That seize amount diminishes liquidity in the pool\\n        eToken.burn(borrower, seizeAmount);\\n        doTransferOut(liquidator, amountToTransfer);\\n\\n        emit SeizeAsset(liquidator, borrower, seizeAmount);\\n        emit AddReserves(address(this), protocolAmount);\\n    }\\n\\n    /**\\n     * @notice Private function to safely transfer funds into this contract\\n     * @dev Some underlying token implementations can alter the transfer function to\\n     *      transfer less of the initial amount (ie: take a fee out).\\n     *      This function takes into account this scenario\\n     * @param from address which will transfer funds in (approve needed on underlying token)\\n     * @param amount amount to be transferred\\n     * @return amount actually transferred by the protocol\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 balanceBefore = trustedUnderlying.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(\\n            trustedUnderlying,\\n            from,\\n            address(this),\\n            amount\\n        );\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = trustedUnderlying.balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function doTransferOut(address to, uint256 amount) internal virtual {\\n        SafeERC20.safeTransfer(trustedUnderlying, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x35b1c57e02d240080f12ea3923e10fabe633ad604f13330c60102b831b4e805d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IAuditor {\\n    // this one validates post liquidity check\\n    function validateBorrowMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function validateAccountShortfall(\\n        address fixedLenderAddress,\\n        address account,\\n        uint256 amount\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xfeeaef06e0c471ebf447c7fa20fd3e5243cf792cdb15e1eeb52992fbef334539\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` and `auditor` are set\\n     * - The FixedLender is where the eToken is used\\n     * - The Auditor is called in every transfer\\n     */\\n    event Initialized(address indexed fixedLender, address indexed auditor);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x71ce614408fff79ac5f133fb257a0ac1df686f65c0cfdf8efb8d0682838da5b0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) external;\\n\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function withdrawFromTreasury(address who, uint256 amount) external;\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function mpDepositDistributionWeighter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x27005f060493f78101145dca8c6c56ffbe5f04684e7e1657cbcd1e18b6cd4749\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IInterestRateModel {\\n    function getRateToBorrow(\\n        uint256 maturityDate,\\n        uint256 currentDate,\\n        uint256 borrowedMP,\\n        uint256 suppliedMP,\\n        uint256 smartPoolLiquidityShare\\n    ) external view returns (uint256);\\n\\n    function penaltyRate() external view returns (uint256);\\n\\n    function getYieldForDeposit(\\n        uint256 suppliedSP,\\n        uint256 unassignedEarnings,\\n        uint256 amount,\\n        uint256 mpDepositDistributionWeighter\\n    ) external pure returns (uint256 earningsShare);\\n}\\n\",\"keccak256\":\"0xcc618fcafbde0babd3c00d0c22c161975ccdc4994dc4b778ebb9574ea8cf64d9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IPoolAccounting {\\n    function borrowMP(\\n        uint256 maturityDate,\\n        address borrower,\\n        uint256 amount,\\n        uint256 maxAmountAllowed,\\n        uint256 eTokenTotalSupply,\\n        uint8 maxFuturePools\\n    ) external returns (uint256);\\n\\n    function depositMP(\\n        uint256 maturityDate,\\n        address supplier,\\n        uint256 amount,\\n        uint256 minAmountRequired\\n    ) external returns (uint256);\\n\\n    function withdrawMP(\\n        uint256 maturityDate,\\n        address redeemer,\\n        uint256 amount,\\n        uint256 maxSPDebt\\n    ) external;\\n\\n    function repayMP(\\n        uint256 maturityDate,\\n        address borrower,\\n        uint256 repayAmount\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAccountBorrows(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function smartPoolBorrowed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ef4cbb67edd2cdfaf431ae715ca8ade2aba7a4a5cf02c25f38d961505963b35\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        NONE,\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    error UnmatchedPoolState(uint8 state, uint8 requiredState);\\n    error UnmatchedPoolStateMultiple(\\n        uint8 state,\\n        uint8 requiredState,\\n        uint8 alternativeState\\n    );\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many seconds are left to a certain date\\n     * @param timestampFrom to calculate the difference in seconds from a date\\n     * @param timestampTo to calculate the difference in seconds to a date\\n     */\\n    function secondsPre(uint256 timestampFrom, uint256 timestampTo)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     * @param alternativeState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function validateRequiredPoolState(\\n        uint8 maxFuturePools,\\n        uint256 maturityDate,\\n        State requiredState,\\n        State alternativeState\\n    ) internal view {\\n        State poolState = getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n\\n        if (poolState != requiredState && poolState != alternativeState) {\\n            if (alternativeState == State.NONE) {\\n                revert UnmatchedPoolState(\\n                    uint8(poolState),\\n                    uint8(requiredState)\\n                );\\n            }\\n            revert UnmatchedPoolStateMultiple(\\n                uint8(poolState),\\n                uint8(requiredState),\\n                uint8(alternativeState)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     */\\n    function futurePools(uint8 maxFuturePools)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxFuturePools);\\n        uint256 timestamp = block.timestamp - (block.timestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxFuturePools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b88ac2787f2cd0a2d0b23d2ad94c49361127b3636ead1c7227aea5a03dc0b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052666379da05b60000600355666379da05b60000600455670de0b6b3a76400006005553480156200003357600080fd5b50604051620054363803806200543683398181016040528101906200005991906200046c565b60016000819055506000600260006101000a81548160ff021916908315150217905550620000916000801b33620001b960201b60201c565b84600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360099080519060200190620000ea92919062000333565b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620006c5565b620001cb8282620001cf60201b60201c565b5050565b620001e18282620002c060201b60201c565b620002bc57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002616200032b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b8280546200034190620005d0565b90600052602060002090601f016020900481019282620003655760008555620003b1565b82601f106200038057805160ff1916838001178555620003b1565b82800160010185558215620003b1579182015b82811115620003b057825182559160200191906001019062000393565b5b509050620003c09190620003c4565b5090565b5b80821115620003df576000816000905550600101620003c5565b5090565b6000620003fa620003f48462000530565b62000507565b9050828152602081018484840111156200041357600080fd5b620004208482856200059a565b509392505050565b6000815190506200043981620006ab565b92915050565b600082601f8301126200045157600080fd5b815162000463848260208601620003e3565b91505092915050565b600080600080600060a086880312156200048557600080fd5b6000620004958882890162000428565b955050602086015167ffffffffffffffff811115620004b357600080fd5b620004c1888289016200043f565b9450506040620004d48882890162000428565b9350506060620004e78882890162000428565b9250506080620004fa8882890162000428565b9150509295509295909350565b60006200051362000526565b905062000521828262000606565b919050565b6000604051905090565b600067ffffffffffffffff8211156200054e576200054d6200066b565b5b62000559826200069a565b9050602081019050919050565b600062000573826200057a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620005ba5780820151818401526020810190506200059d565b83811115620005ca576000848401525b50505050565b60006002820490506001821680620005e957607f821691505b602082108114156200060057620005ff6200063c565b5b50919050565b62000611826200069a565b810181811067ffffffffffffffff821117156200063357620006326200066b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620006b68162000566565b8114620006c257600080fd5b50565b614d6180620006d56000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806361d027b31161013b578063953d9cf1116100b8578063bce100d31161007c578063bce100d31461066b578063c0107f8114610687578063d547741f146106a5578063e63ab1e9146106c1578063eafecffa146106df5761023d565b8063953d9cf1146105d9578063a217fddf146105f7578063b2a02ff114610615578063b72ddee914610631578063b7f394c01461064f5761023d565b806375e1d781116100ff57806375e1d781146105215780638456cb591461055157806391d148541461055b57806391f3e4721461058b5780639457be23146105a95761023d565b806361d027b31461048f57806362dd9f23146104ad57806368effd5c146104cb57806375b9f418146104e757806375d4b96f146105055761023d565b80632f2ff15d116101c9578063433b35961161018d578063433b3596146103e85780634bf2ee391461040657806355a1ac2e146104245780635c975abb146104555780636135600f146104735761023d565b80632f2ff15d1461036c5780633384c3bc1461038857806336568abe146103a45780633ec045a6146103c05780633f4ba83a146103de5761023d565b80630bda514e116102105780630bda514e146102c85780631ea8946d146102e4578063248a9ca31461030257806325c346b61461033257806327f1a884146103505761023d565b806301ffc9a7146102425780630663af081461027257806307219b091461028e578063086c9f1c146102ac575b600080fd5b61025c60048036038101906102579190613a8e565b6106fd565b604051610269919061412a565b60405180910390f35b61028c60048036038101906102879190613912565b610777565b005b6102966107d7565b6040516102a39190614108565b60405180910390f35b6102c660048036038101906102c19190613b45565b6107e8565b005b6102e260048036038101906102dd91906139b1565b6109bb565b005b6102ec610a7a565b6040516102f99190614309565b60405180910390f35b61031c60048036038101906103179190613a29565b610a80565b6040516103299190614145565b60405180910390f35b61033a610aa0565b60405161034791906144a6565b60405180910390f35b61036a60048036038101906103659190613874565b610aa5565b005b61038660048036038101906103819190613a52565b610cf1565b005b6103a2600480360381019061039d9190613ab7565b610d1a565b005b6103be60048036038101906103b99190613a52565b610d3a565b005b6103c8610dbd565b6040516103d59190614160565b60405180910390f35b6103e6610de3565b005b6103f0610e20565b6040516103fd91906141b1565b60405180910390f35b61040e610e46565b60405161041b919061417b565b60405180910390f35b61043e60048036038101906104399190613912565b610e6c565b60405161044c929190614446565b60405180910390f35b61045d610fd2565b60405161046a919061412a565b60405180910390f35b61048d60048036038101906104889190613ab7565b610fe9565b005b61049761111d565b6040516104a49190614309565b60405180910390f35b6104b5611123565b6040516104c29190614309565b60405180910390f35b6104e560048036038101906104e09190613b45565b611129565b005b6104ef611446565b6040516104fc9190614309565b60405180910390f35b61051f600480360381019061051a9190613ab7565b6114ed565b005b61053b60048036038101906105369190613ab7565b61150d565b6040516105489190614309565b60405180910390f35b6105596115c1565b005b61057560048036038101906105709190613a52565b6115fe565b604051610582919061412a565b60405180910390f35b610593611669565b6040516105a091906141e7565b60405180910390f35b6105c360048036038101906105be919061394e565b6116f7565b6040516105d09190614309565b60405180910390f35b6105e16117ae565b6040516105ee9190614196565b60405180910390f35b6105ff6117d4565b60405161060c9190614145565b60405180910390f35b61062f600480360381019061062a91906138c3565b6117db565b005b61063961188a565b6040516106469190614160565b60405180910390f35b61066960048036038101906106649190613ab7565b6118b4565b005b61068560048036038101906106809190613ab7565b611c9e565b005b61068f611cbe565b60405161069c9190614309565b60405180910390f35b6106bf60048036038101906106ba9190613a52565b611cc4565b005b6106c9611ced565b6040516106d69190614145565b60405180910390f35b6106e7611d11565b6040516106f49190614309565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610770575061076f82611d17565b5b9050919050565b6000801b61078c81610787611d81565b611d89565b816006600082825461079e91906146b6565b925050819055506107d2600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611e26565b505050565b60606107e3600c611eac565b905090565b6002600054141561082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610825906142c9565b60405180910390fd5b600260008190555061083e610fd2565b1561087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590614269565b60405180910390fd5b61088d600c8360036000611fd1565b61089733846122ed565b92506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd9c2ecb843387866040518563ffffffff1660e01b81526004016108fc94939291906143a0565b602060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613ae0565b90503373ffffffffffffffffffffffffffffffffffffffff167fe983baebb65a77750c6277cf1d19a6a07b25a472b789a59005944cb59b91425a85868461099591906146b6565b866040516109a59392919061446f565b60405180910390a2506001600081905550505050565b60026000541415610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f8906142c9565b60405180910390fd5b6002600081905550610a11610fd2565b15610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890614269565b60405180910390fd5b610a60600c8360036002611fd1565b610a6c33848385612490565b506001600081905550505050565b60055481565b600060016000838152602001908152602001600020600101549050919050565b600c81565b60026000541415610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae2906142c9565b60405180910390fd5b60026000819055506000821415610b3a5760126040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b3191906141cc565b60405180910390fd5b610b49600c8260026000611fd1565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ee436a1828585600c60ff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf757600080fd5b505afa158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2f9190613ae0565b610c3991906145ed565b6040518563ffffffff1660e01b8152600401610c589493929190614324565b600060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b50505050610c948383612729565b8273ffffffffffffffffffffffffffffffffffffffff167fac44b7cd8d864cbf99c4acc9c9787f54f5a4ac089349fecf3de4ce2ddff7b7bb8383604051610cdc929190614446565b60405180910390a26001600081905550505050565b610cfa82610a80565b610d0b81610d06611d81565b611d89565b610d15838361275a565b505050565b6000801b610d2f81610d2a611d81565b611d89565b816003819055505050565b610d42611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da6906142e9565b60405180910390fd5b610db9828261283a565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610e1581610e10611d81565b611d89565b610e1d61291c565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610eca9190613f6b565b60206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190613ae0565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b0a67fe86866040518363ffffffff1660e01b8152600401610f779291906140df565b60206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613ae0565b915091509250929050565b6000600260009054906101000a900460ff16905090565b610ff1610fd2565b15611031576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102890614269565b60405180910390fd5b61103b33826122ed565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161109a9291906140df565b600060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fd5656bd5348ef71585f018f0e1310274a6c223cc991afb5c5c2ee9f42313ad44826040516111129190614309565b60405180910390a250565b60065481565b60035481565b6002600054141561116f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611166906142c9565b60405180910390fd5b600260008190555061117f610fd2565b156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690614269565b60405180910390fd5b6111ce600c8360036000611fd1565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb0b8a5584338786600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190613ae0565b600c6040518763ffffffff1660e01b81526004016112d5969594939291906143e5565b602060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113279190613ae0565b905080600c600082825461133b9190614597565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663144348d530336040518363ffffffff1660e01b815260040161139f929190613f86565b600060405180830381600087803b1580156113b957600080fd5b505af11580156113cd573d6000803e3d6000fd5b505050506113db3385612729565b3373ffffffffffffffffffffffffffffffffffffffff167fee72e8c8b6eca9a0d0d7e3769f539ba283595748fe87a842d8d64d5d825173a885868461142091906146b6565b866040516114309392919061446f565b60405180910390a2506001600081905550505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e89190613ae0565b905090565b6000801b611502816114fd611d81565b611d89565b816005819055505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375e1d781836040518263ffffffff1660e01b815260040161156a9190614309565b60206040518083038186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba9190613ae0565b9050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6115f3816115ee611d81565b611d89565b6115fb6129be565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60098054611676906148f1565b80601f01602080910402602001604051908101604052809291908181526020018280546116a2906148f1565b80156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b505050505081565b60006002600054141561173f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611736906142c9565b60405180910390fd5b600260008190555061174f610fd2565b1561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690614269565b60405180910390fd5b61179c3386868686612a61565b90506001600081905550949350505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b60026000541415611821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611818906142c9565b60405180910390fd5b6002600081905550611831610fd2565b15611871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186890614269565b60405180910390fd5b61187d33848484612d90565b6001600081905550505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbda20e3033846040518463ffffffff1660e01b815260040161191393929190614047565b60006040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016119a09190613f6b565b60206040518083038186803b1580156119b857600080fd5b505afa1580156119cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f09190613ae0565b905060008290507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415611a23578190505b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190613ae0565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2c57600080fd5b505afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190613ae0565b611b6e91906146b6565b1015611bb25760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611ba991906141cc565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401611c0f9291906140df565b600060405180830381600087803b158015611c2957600080fd5b505af1158015611c3d573d6000803e3d6000fd5b50505050611c4b3382612729565b3373ffffffffffffffffffffffffffffffffffffffff167f2326675290def598d0fd820ee11f06c58c01b80230ab369044cf0b17dbfdc57f84604051611c919190614309565b60405180910390a2505050565b6000801b611cb381611cae611d81565b611d89565b816004819055505050565b600c5481565b611ccd82610a80565b611cde81611cd9611d81565b611d89565b611ce8838361283a565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b611d9382826115fe565b611e2257611db88173ffffffffffffffffffffffffffffffffffffffff166014613107565b611dc68360001c6020613107565b604051602001611dd7929190613f31565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1991906141e7565b60405180910390fd5b5050565b611ea78363a9059cbb60e01b8484604051602401611e459291906140df565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613401565b505050565b606060008260ff1667ffffffffffffffff811115611ef3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f215781602001602082028036833780820191505090505b509050600062093a8063ffffffff1642611f3b919061496c565b42611f4691906146b6565b905060005b8460ff16811015611fc65762093a8063ffffffff1682611f6b9190614597565b915081838281518110611fa7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611fbe90614923565b915050611f4b565b508192505050919050565b6000611fde4285876134c8565b9050826004811115612019577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612052577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141580156120d05750816004811115612094577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156120cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14155b156122e6576000600481111561210f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826004811115612148577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156121fd57806004811115612187577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8360048111156121c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016121f49291906144c1565b60405180910390fd5b806004811115612236577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83600481111561226f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8360048111156122a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f537c4e510000000000000000000000000000000000000000000000000000000081526004016122dd939291906144ea565b60405180910390fd5b5050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161234b9190613f6b565b60206040518083038186803b15801561236357600080fd5b505afa158015612377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239b9190613ae0565b90506123cb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16853086613564565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124289190613f6b565b60206040518083038186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190613ae0565b9050818161248691906146b6565b9250505092915050565b6000808314156124d85760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124cf91906141cc565b60405180910390fd5b6124e285846122ed565b9250600080600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372cd230b878a8a6040518463ffffffff1660e01b815260040161254993929190614369565b608060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b9190613b94565b935093509350935060008411156125b7576125b68985612729565b5b60006125ce600354846135ed90919063ffffffff16565b905080600660008282546125e29190614597565b92505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fa467c483838661263491906146b6565b61263e9190614597565b6040518263ffffffff1660e01b815260040161265a9190614309565b600060405180830381600087803b15801561267457600080fd5b505af1158015612688573d6000803e3d6000fd5b5050505083600c600082825461269e91906146b6565b925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f29c098a0b2f51718bfec23f9b7f06f8d3a257d44b55f33fb0ccf606e7104820c8a878b6040516127069392919061446f565b60405180910390a3848861271a91906146b6565b95505050505050949350505050565b612756600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383611e26565b5050565b61276482826115fe565b61283657600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506127db611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61284482826115fe565b156129185760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506128bd611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612924610fd2565b612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a90614229565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129a7611d81565b6040516129b49190613f6b565b60405180910390a1565b6129c6610fd2565b15612a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fd90614269565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a4a611d81565b604051612a579190613f6b565b60405180910390a1565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d0aef8d30858989896040518663ffffffff1660e01b8152600401612ac6959493929190613ff4565b60006040518083038186803b158015612ade57600080fd5b505afa158015612af2573d6000803e3d6000fd5b50505050612b0286868685612490565b93506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635efadbd13086886040518463ffffffff1660e01b8152600401612b6593929190614047565b60206040518083038186803b158015612b7d57600080fd5b505afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190613ae0565b905060008473ffffffffffffffffffffffffffffffffffffffff166355a1ac2e88866040518363ffffffff1660e01b8152600401612bf49291906140df565b604080518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190613b09565b50905081811015612c8c57600a6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612c8391906141cc565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612cd157612ccc30898985612d90565b612d41565b8473ffffffffffffffffffffffffffffffffffffffff1663b2a02ff18989856040518463ffffffff1660e01b8152600401612d0e93929190614047565b600060405180830381600087803b158015612d2857600080fd5b505af1158015612d3c573d6000803e3d6000fd5b505050505b7f9e76a01ba2e51393f58ccc22c0afc9520815e0cc3f301f7b5d7442fcaee9fdc1888888888689604051612d7a9695949392919061407e565b60405180910390a1859250505095945050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eafe967b308686866040518563ffffffff1660e01b8152600401612df19493929190613faf565b60006040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506000612e38600454836135ed90919063ffffffff16565b905060008183612e4891906146b6565b90508160066000828254612e5c9190614597565b92505081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b158015612ecb57600080fd5b505afa158015612edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f039190613ae0565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6c57600080fd5b505afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa49190613ae0565b612fae91906146b6565b1015612ff25760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612fe991906141cc565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac85856040518363ffffffff1660e01b815260040161304f9291906140df565b600060405180830381600087803b15801561306957600080fd5b505af115801561307d573d6000803e3d6000fd5b5050505061308b8582612729565b7f47cadff479ffebc80dd9d2330c72e274eaf0e620bb4e9d617356df321e8297618585856040516130be93929190614047565b60405180910390a17f77c97459a115e74ba5adced182b076766b1b9825e785d85b5f0f06d444bef21130836040516130f79291906140df565b60405180910390a1505050505050565b60606000600283600261311a919061461e565b6131249190614597565b67ffffffffffffffff811115613163577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156131955781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106131f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061327d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026132bd919061461e565b6132c79190614597565b90505b60018111156133b3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061332f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061336c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806133ac906148c7565b90506132ca565b50600084146133f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ee90614209565b60405180910390fd5b8091505092915050565b6000613463826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136169092919063ffffffff16565b90506000815111156134c357808060200190518101906134839190613a00565b6134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b9906142a9565b60405180910390fd5b5b505050565b60008062093a8063ffffffff16846134e0919061496c565b146134ee576001905061355d565b838310156134ff576002905061355d565b60008260ff1662093a806135139190614678565b63ffffffff1690508062093a8063ffffffff1686613531919061496c565b8661353c91906146b6565b6135469190614597565b84111561355757600491505061355d565b60039150505b9392505050565b6135e7846323b872dd60e01b85858560405160240161358593929190614047565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613401565b50505050565b6000670de0b6b3a76400008284613604919061461e565b61360e91906145ed565b905092915050565b6060613625848460008561362e565b90509392505050565b606082471015613673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366a90614249565b60405180910390fd5b61367c85613742565b6136bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136b290614289565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136e49190613f1a565b60006040518083038185875af1925050503d8060008114613721576040519150601f19603f3d011682016040523d82523d6000602084013e613726565b606091505b5091509150613736828286613765565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613775578290506137c5565b6000835111156137885782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bc91906141e7565b60405180910390fd5b9392505050565b6000813590506137db81614c8a565b92915050565b6000813590506137f081614ca1565b92915050565b60008151905061380581614cb8565b92915050565b60008135905061381a81614ccf565b92915050565b60008135905061382f81614ce6565b92915050565b60008135905061384481614cfd565b92915050565b60008135905061385981614d14565b92915050565b60008151905061386e81614d14565b92915050565b60008060006060848603121561388957600080fd5b6000613897868287016137e1565b93505060206138a88682870161384a565b92505060406138b98682870161384a565b9150509250925092565b6000806000606084860312156138d857600080fd5b60006138e6868287016137cc565b93505060206138f7868287016137cc565b92505060406139088682870161384a565b9150509250925092565b6000806040838503121561392557600080fd5b6000613933858286016137cc565b92505060206139448582860161384a565b9150509250929050565b6000806000806080858703121561396457600080fd5b6000613972878288016137cc565b94505060206139838782880161384a565b935050604061399487828801613835565b92505060606139a58782880161384a565b91505092959194509250565b6000806000606084860312156139c657600080fd5b60006139d4868287016137cc565b93505060206139e58682870161384a565b92505060406139f68682870161384a565b9150509250925092565b600060208284031215613a1257600080fd5b6000613a20848285016137f6565b91505092915050565b600060208284031215613a3b57600080fd5b6000613a498482850161380b565b91505092915050565b60008060408385031215613a6557600080fd5b6000613a738582860161380b565b9250506020613a84858286016137cc565b9150509250929050565b600060208284031215613aa057600080fd5b6000613aae84828501613820565b91505092915050565b600060208284031215613ac957600080fd5b6000613ad78482850161384a565b91505092915050565b600060208284031215613af257600080fd5b6000613b008482850161385f565b91505092915050565b60008060408385031215613b1c57600080fd5b6000613b2a8582860161385f565b9250506020613b3b8582860161385f565b9150509250929050565b600080600060608486031215613b5a57600080fd5b6000613b688682870161384a565b9350506020613b798682870161384a565b9250506040613b8a8682870161384a565b9150509250925092565b60008060008060808587031215613baa57600080fd5b6000613bb88782880161385f565b9450506020613bc98782880161385f565b9350506040613bda8782880161385f565b9250506060613beb8782880161385f565b91505092959194509250565b6000613c038383613eed565b60208301905092915050565b613c18816147bc565b82525050565b613c27816146ea565b82525050565b6000613c3882614531565b613c42818561455f565b9350613c4d83614521565b8060005b83811015613c7e578151613c658882613bf7565b9750613c7083614552565b925050600181019050613c51565b5085935050505092915050565b613c948161470e565b82525050565b613ca38161471a565b82525050565b6000613cb48261453c565b613cbe8185614570565b9350613cce818560208601614894565b80840191505092915050565b613ce3816147ce565b82525050565b613cf2816147f2565b82525050565b613d0181614816565b82525050565b613d108161483a565b82525050565b613d1f8161485e565b82525050565b6000613d3082614547565b613d3a818561457b565b9350613d4a818560208601614894565b613d5381614a59565b840191505092915050565b6000613d6982614547565b613d73818561458c565b9350613d83818560208601614894565b80840191505092915050565b6000613d9c60208361457b565b9150613da782614a6a565b602082019050919050565b6000613dbf60148361457b565b9150613dca82614a93565b602082019050919050565b6000613de260268361457b565b9150613ded82614abc565b604082019050919050565b6000613e0560108361457b565b9150613e1082614b0b565b602082019050919050565b6000613e28601d8361457b565b9150613e3382614b34565b602082019050919050565b6000613e4b60178361458c565b9150613e5682614b5d565b601782019050919050565b6000613e6e602a8361457b565b9150613e7982614b86565b604082019050919050565b6000613e91601f8361457b565b9150613e9c82614bd5565b602082019050919050565b6000613eb460118361458c565b9150613ebf82614bfe565b601182019050919050565b6000613ed7602f8361457b565b9150613ee282614c27565b604082019050919050565b613ef681614795565b82525050565b613f0581614795565b82525050565b613f14816147af565b82525050565b6000613f268284613ca9565b915081905092915050565b6000613f3c82613e3e565b9150613f488285613d5e565b9150613f5382613ea7565b9150613f5f8284613d5e565b91508190509392505050565b6000602082019050613f806000830184613c1e565b92915050565b6000604082019050613f9b6000830185613c1e565b613fa86020830184613c1e565b9392505050565b6000608082019050613fc46000830187613c1e565b613fd16020830186613c1e565b613fde6040830185613c1e565b613feb6060830184613c1e565b95945050505050565b600060a0820190506140096000830188613c1e565b6140166020830187613c1e565b6140236040830186613c1e565b6140306060830185613c1e565b61403d6080830184613efc565b9695505050505050565b600060608201905061405c6000830186613c1e565b6140696020830185613c1e565b6140766040830184613efc565b949350505050565b600060c0820190506140936000830189613c1e565b6140a06020830188613c1e565b6140ad6040830187613efc565b6140ba6060830186613c1e565b6140c76080830185613efc565b6140d460a0830184613efc565b979650505050505050565b60006040820190506140f46000830185613c1e565b6141016020830184613efc565b9392505050565b600060208201905081810360008301526141228184613c2d565b905092915050565b600060208201905061413f6000830184613c8b565b92915050565b600060208201905061415a6000830184613c9a565b92915050565b60006020820190506141756000830184613cda565b92915050565b60006020820190506141906000830184613ce9565b92915050565b60006020820190506141ab6000830184613cf8565b92915050565b60006020820190506141c66000830184613d07565b92915050565b60006020820190506141e16000830184613d16565b92915050565b600060208201905081810360008301526142018184613d25565b905092915050565b6000602082019050818103600083015261422281613d8f565b9050919050565b6000602082019050818103600083015261424281613db2565b9050919050565b6000602082019050818103600083015261426281613dd5565b9050919050565b6000602082019050818103600083015261428281613df8565b9050919050565b600060208201905081810360008301526142a281613e1b565b9050919050565b600060208201905081810360008301526142c281613e61565b9050919050565b600060208201905081810360008301526142e281613e84565b9050919050565b6000602082019050818103600083015261430281613eca565b9050919050565b600060208201905061431e6000830184613efc565b92915050565b60006080820190506143396000830187613efc565b6143466020830186613c0f565b6143536040830185613efc565b6143606060830184613efc565b95945050505050565b600060608201905061437e6000830186613efc565b61438b6020830185613c1e565b6143986040830184613efc565b949350505050565b60006080820190506143b56000830187613efc565b6143c26020830186613c1e565b6143cf6040830185613efc565b6143dc6060830184613efc565b95945050505050565b600060c0820190506143fa6000830189613efc565b6144076020830188613c1e565b6144146040830187613efc565b6144216060830186613efc565b61442e6080830185613efc565b61443b60a0830184613f0b565b979650505050505050565b600060408201905061445b6000830185613efc565b6144686020830184613efc565b9392505050565b60006060820190506144846000830186613efc565b6144916020830185613efc565b61449e6040830184613efc565b949350505050565b60006020820190506144bb6000830184613f0b565b92915050565b60006040820190506144d66000830185613f0b565b6144e36020830184613f0b565b9392505050565b60006060820190506144ff6000830186613f0b565b61450c6020830185613f0b565b6145196040830184613f0b565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006145a282614795565b91506145ad83614795565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145e2576145e161499d565b5b828201905092915050565b60006145f882614795565b915061460383614795565b925082614613576146126149cc565b5b828204905092915050565b600061462982614795565b915061463483614795565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561466d5761466c61499d565b5b828202905092915050565b60006146838261479f565b915061468e8361479f565b92508163ffffffff04831182151516156146ab576146aa61499d565b5b828202905092915050565b60006146c182614795565b91506146cc83614795565b9250828210156146df576146de61499d565b5b828203905092915050565b60006146f582614775565b9050919050565b600061470782614775565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061475b826146ea565b9050919050565b600081905061477082614c76565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006147c782614870565b9050919050565b60006147d9826147e0565b9050919050565b60006147eb82614775565b9050919050565b60006147fd82614804565b9050919050565b600061480f82614775565b9050919050565b600061482182614828565b9050919050565b600061483382614775565b9050919050565b60006148458261484c565b9050919050565b600061485782614775565b9050919050565b600061486982614762565b9050919050565b600061487b82614882565b9050919050565b600061488d82614775565b9050919050565b60005b838110156148b2578082015181840152602081019050614897565b838111156148c1576000848401525b50505050565b60006148d282614795565b915060008214156148e6576148e561499d565b5b600182039050919050565b6000600282049050600182168061490957607f821691505b6020821081141561491d5761491c614a2a565b5b50919050565b600061492e82614795565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149615761496061499d565b5b600182019050919050565b600061497782614795565b915061498283614795565b925082614992576149916149cc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c8110614c8757614c866149fb565b5b50565b614c93816146ea565b8114614c9e57600080fd5b50565b614caa816146fc565b8114614cb557600080fd5b50565b614cc18161470e565b8114614ccc57600080fd5b50565b614cd88161471a565b8114614ce357600080fd5b50565b614cef81614724565b8114614cfa57600080fd5b50565b614d0681614750565b8114614d1157600080fd5b50565b614d1d81614795565b8114614d2857600080fd5b5056fea264697066735822122010e7077edb7067a7cfa4eecd2533441849140e67fc5c80fe939ce0d3fadf7e7964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806361d027b31161013b578063953d9cf1116100b8578063bce100d31161007c578063bce100d31461066b578063c0107f8114610687578063d547741f146106a5578063e63ab1e9146106c1578063eafecffa146106df5761023d565b8063953d9cf1146105d9578063a217fddf146105f7578063b2a02ff114610615578063b72ddee914610631578063b7f394c01461064f5761023d565b806375e1d781116100ff57806375e1d781146105215780638456cb591461055157806391d148541461055b57806391f3e4721461058b5780639457be23146105a95761023d565b806361d027b31461048f57806362dd9f23146104ad57806368effd5c146104cb57806375b9f418146104e757806375d4b96f146105055761023d565b80632f2ff15d116101c9578063433b35961161018d578063433b3596146103e85780634bf2ee391461040657806355a1ac2e146104245780635c975abb146104555780636135600f146104735761023d565b80632f2ff15d1461036c5780633384c3bc1461038857806336568abe146103a45780633ec045a6146103c05780633f4ba83a146103de5761023d565b80630bda514e116102105780630bda514e146102c85780631ea8946d146102e4578063248a9ca31461030257806325c346b61461033257806327f1a884146103505761023d565b806301ffc9a7146102425780630663af081461027257806307219b091461028e578063086c9f1c146102ac575b600080fd5b61025c60048036038101906102579190613a8e565b6106fd565b604051610269919061412a565b60405180910390f35b61028c60048036038101906102879190613912565b610777565b005b6102966107d7565b6040516102a39190614108565b60405180910390f35b6102c660048036038101906102c19190613b45565b6107e8565b005b6102e260048036038101906102dd91906139b1565b6109bb565b005b6102ec610a7a565b6040516102f99190614309565b60405180910390f35b61031c60048036038101906103179190613a29565b610a80565b6040516103299190614145565b60405180910390f35b61033a610aa0565b60405161034791906144a6565b60405180910390f35b61036a60048036038101906103659190613874565b610aa5565b005b61038660048036038101906103819190613a52565b610cf1565b005b6103a2600480360381019061039d9190613ab7565b610d1a565b005b6103be60048036038101906103b99190613a52565b610d3a565b005b6103c8610dbd565b6040516103d59190614160565b60405180910390f35b6103e6610de3565b005b6103f0610e20565b6040516103fd91906141b1565b60405180910390f35b61040e610e46565b60405161041b919061417b565b60405180910390f35b61043e60048036038101906104399190613912565b610e6c565b60405161044c929190614446565b60405180910390f35b61045d610fd2565b60405161046a919061412a565b60405180910390f35b61048d60048036038101906104889190613ab7565b610fe9565b005b61049761111d565b6040516104a49190614309565b60405180910390f35b6104b5611123565b6040516104c29190614309565b60405180910390f35b6104e560048036038101906104e09190613b45565b611129565b005b6104ef611446565b6040516104fc9190614309565b60405180910390f35b61051f600480360381019061051a9190613ab7565b6114ed565b005b61053b60048036038101906105369190613ab7565b61150d565b6040516105489190614309565b60405180910390f35b6105596115c1565b005b61057560048036038101906105709190613a52565b6115fe565b604051610582919061412a565b60405180910390f35b610593611669565b6040516105a091906141e7565b60405180910390f35b6105c360048036038101906105be919061394e565b6116f7565b6040516105d09190614309565b60405180910390f35b6105e16117ae565b6040516105ee9190614196565b60405180910390f35b6105ff6117d4565b60405161060c9190614145565b60405180910390f35b61062f600480360381019061062a91906138c3565b6117db565b005b61063961188a565b6040516106469190614160565b60405180910390f35b61066960048036038101906106649190613ab7565b6118b4565b005b61068560048036038101906106809190613ab7565b611c9e565b005b61068f611cbe565b60405161069c9190614309565b60405180910390f35b6106bf60048036038101906106ba9190613a52565b611cc4565b005b6106c9611ced565b6040516106d69190614145565b60405180910390f35b6106e7611d11565b6040516106f49190614309565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610770575061076f82611d17565b5b9050919050565b6000801b61078c81610787611d81565b611d89565b816006600082825461079e91906146b6565b925050819055506107d2600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611e26565b505050565b60606107e3600c611eac565b905090565b6002600054141561082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610825906142c9565b60405180910390fd5b600260008190555061083e610fd2565b1561087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590614269565b60405180910390fd5b61088d600c8360036000611fd1565b61089733846122ed565b92506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd9c2ecb843387866040518563ffffffff1660e01b81526004016108fc94939291906143a0565b602060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613ae0565b90503373ffffffffffffffffffffffffffffffffffffffff167fe983baebb65a77750c6277cf1d19a6a07b25a472b789a59005944cb59b91425a85868461099591906146b6565b866040516109a59392919061446f565b60405180910390a2506001600081905550505050565b60026000541415610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f8906142c9565b60405180910390fd5b6002600081905550610a11610fd2565b15610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890614269565b60405180910390fd5b610a60600c8360036002611fd1565b610a6c33848385612490565b506001600081905550505050565b60055481565b600060016000838152602001908152602001600020600101549050919050565b600c81565b60026000541415610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae2906142c9565b60405180910390fd5b60026000819055506000821415610b3a5760126040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b3191906141cc565b60405180910390fd5b610b49600c8260026000611fd1565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ee436a1828585600c60ff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf757600080fd5b505afa158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2f9190613ae0565b610c3991906145ed565b6040518563ffffffff1660e01b8152600401610c589493929190614324565b600060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b50505050610c948383612729565b8273ffffffffffffffffffffffffffffffffffffffff167fac44b7cd8d864cbf99c4acc9c9787f54f5a4ac089349fecf3de4ce2ddff7b7bb8383604051610cdc929190614446565b60405180910390a26001600081905550505050565b610cfa82610a80565b610d0b81610d06611d81565b611d89565b610d15838361275a565b505050565b6000801b610d2f81610d2a611d81565b611d89565b816003819055505050565b610d42611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da6906142e9565b60405180910390fd5b610db9828261283a565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610e1581610e10611d81565b611d89565b610e1d61291c565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610eca9190613f6b565b60206040518083038186803b158015610ee257600080fd5b505afa158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1a9190613ae0565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b0a67fe86866040518363ffffffff1660e01b8152600401610f779291906140df565b60206040518083038186803b158015610f8f57600080fd5b505afa158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613ae0565b915091509250929050565b6000600260009054906101000a900460ff16905090565b610ff1610fd2565b15611031576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102890614269565b60405180910390fd5b61103b33826122ed565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161109a9291906140df565b600060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fd5656bd5348ef71585f018f0e1310274a6c223cc991afb5c5c2ee9f42313ad44826040516111129190614309565b60405180910390a250565b60065481565b60035481565b6002600054141561116f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611166906142c9565b60405180910390fd5b600260008190555061117f610fd2565b156111bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b690614269565b60405180910390fd5b6111ce600c8360036000611fd1565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb0b8a5584338786600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190613ae0565b600c6040518763ffffffff1660e01b81526004016112d5969594939291906143e5565b602060405180830381600087803b1580156112ef57600080fd5b505af1158015611303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113279190613ae0565b905080600c600082825461133b9190614597565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663144348d530336040518363ffffffff1660e01b815260040161139f929190613f86565b600060405180830381600087803b1580156113b957600080fd5b505af11580156113cd573d6000803e3d6000fd5b505050506113db3385612729565b3373ffffffffffffffffffffffffffffffffffffffff167fee72e8c8b6eca9a0d0d7e3769f539ba283595748fe87a842d8d64d5d825173a885868461142091906146b6565b866040516114309392919061446f565b60405180910390a2506001600081905550505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b057600080fd5b505afa1580156114c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e89190613ae0565b905090565b6000801b611502816114fd611d81565b611d89565b816005819055505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375e1d781836040518263ffffffff1660e01b815260040161156a9190614309565b60206040518083038186803b15801561158257600080fd5b505afa158015611596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ba9190613ae0565b9050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6115f3816115ee611d81565b611d89565b6115fb6129be565b50565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60098054611676906148f1565b80601f01602080910402602001604051908101604052809291908181526020018280546116a2906148f1565b80156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b505050505081565b60006002600054141561173f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611736906142c9565b60405180910390fd5b600260008190555061174f610fd2565b1561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690614269565b60405180910390fd5b61179c3386868686612a61565b90506001600081905550949350505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b60026000541415611821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611818906142c9565b60405180910390fd5b6002600081905550611831610fd2565b15611871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186890614269565b60405180910390fd5b61187d33848484612d90565b6001600081905550505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbda20e3033846040518463ffffffff1660e01b815260040161191393929190614047565b60006040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016119a09190613f6b565b60206040518083038186803b1580156119b857600080fd5b505afa1580156119cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f09190613ae0565b905060008290507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415611a23578190505b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190613ae0565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2c57600080fd5b505afa158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190613ae0565b611b6e91906146b6565b1015611bb25760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611ba991906141cc565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401611c0f9291906140df565b600060405180830381600087803b158015611c2957600080fd5b505af1158015611c3d573d6000803e3d6000fd5b50505050611c4b3382612729565b3373ffffffffffffffffffffffffffffffffffffffff167f2326675290def598d0fd820ee11f06c58c01b80230ab369044cf0b17dbfdc57f84604051611c919190614309565b60405180910390a2505050565b6000801b611cb381611cae611d81565b611d89565b816004819055505050565b600c5481565b611ccd82610a80565b611cde81611cd9611d81565b611d89565b611ce8838361283a565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60045481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b611d9382826115fe565b611e2257611db88173ffffffffffffffffffffffffffffffffffffffff166014613107565b611dc68360001c6020613107565b604051602001611dd7929190613f31565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1991906141e7565b60405180910390fd5b5050565b611ea78363a9059cbb60e01b8484604051602401611e459291906140df565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613401565b505050565b606060008260ff1667ffffffffffffffff811115611ef3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f215781602001602082028036833780820191505090505b509050600062093a8063ffffffff1642611f3b919061496c565b42611f4691906146b6565b905060005b8460ff16811015611fc65762093a8063ffffffff1682611f6b9190614597565b915081838281518110611fa7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611fbe90614923565b915050611f4b565b508192505050919050565b6000611fde4285876134c8565b9050826004811115612019577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612052577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141580156120d05750816004811115612094577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156120cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14155b156122e6576000600481111561210f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826004811115612148577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156121fd57806004811115612187577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8360048111156121c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f34e2603a0000000000000000000000000000000000000000000000000000000081526004016121f49291906144c1565b60405180910390fd5b806004811115612236577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83600481111561226f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8360048111156122a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f537c4e510000000000000000000000000000000000000000000000000000000081526004016122dd939291906144ea565b60405180910390fd5b5050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161234b9190613f6b565b60206040518083038186803b15801561236357600080fd5b505afa158015612377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239b9190613ae0565b90506123cb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16853086613564565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124289190613f6b565b60206040518083038186803b15801561244057600080fd5b505afa158015612454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124789190613ae0565b9050818161248691906146b6565b9250505092915050565b6000808314156124d85760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016124cf91906141cc565b60405180910390fd5b6124e285846122ed565b9250600080600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372cd230b878a8a6040518463ffffffff1660e01b815260040161254993929190614369565b608060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b9190613b94565b935093509350935060008411156125b7576125b68985612729565b5b60006125ce600354846135ed90919063ffffffff16565b905080600660008282546125e29190614597565b92505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fa467c483838661263491906146b6565b61263e9190614597565b6040518263ffffffff1660e01b815260040161265a9190614309565b600060405180830381600087803b15801561267457600080fd5b505af1158015612688573d6000803e3d6000fd5b5050505083600c600082825461269e91906146b6565b925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f29c098a0b2f51718bfec23f9b7f06f8d3a257d44b55f33fb0ccf606e7104820c8a878b6040516127069392919061446f565b60405180910390a3848861271a91906146b6565b95505050505050949350505050565b612756600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383611e26565b5050565b61276482826115fe565b61283657600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506127db611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61284482826115fe565b156129185760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506128bd611d81565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612924610fd2565b612963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295a90614229565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129a7611d81565b6040516129b49190613f6b565b60405180910390a1565b6129c6610fd2565b15612a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fd90614269565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a4a611d81565b604051612a579190613f6b565b60405180910390a1565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d0aef8d30858989896040518663ffffffff1660e01b8152600401612ac6959493929190613ff4565b60006040518083038186803b158015612ade57600080fd5b505afa158015612af2573d6000803e3d6000fd5b50505050612b0286868685612490565b93506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635efadbd13086886040518463ffffffff1660e01b8152600401612b6593929190614047565b60206040518083038186803b158015612b7d57600080fd5b505afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190613ae0565b905060008473ffffffffffffffffffffffffffffffffffffffff166355a1ac2e88866040518363ffffffff1660e01b8152600401612bf49291906140df565b604080518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190613b09565b50905081811015612c8c57600a6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612c8391906141cc565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612cd157612ccc30898985612d90565b612d41565b8473ffffffffffffffffffffffffffffffffffffffff1663b2a02ff18989856040518463ffffffff1660e01b8152600401612d0e93929190614047565b600060405180830381600087803b158015612d2857600080fd5b505af1158015612d3c573d6000803e3d6000fd5b505050505b7f9e76a01ba2e51393f58ccc22c0afc9520815e0cc3f301f7b5d7442fcaee9fdc1888888888689604051612d7a9695949392919061407e565b60405180910390a1859250505095945050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eafe967b308686866040518563ffffffff1660e01b8152600401612df19493929190613faf565b60006040518083038186803b158015612e0957600080fd5b505afa158015612e1d573d6000803e3d6000fd5b505050506000612e38600454836135ed90919063ffffffff16565b905060008183612e4891906146b6565b90508160066000828254612e5c9190614597565b92505081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b158015612ecb57600080fd5b505afa158015612edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f039190613ae0565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6c57600080fd5b505afa158015612f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa49190613ae0565b612fae91906146b6565b1015612ff25760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401612fe991906141cc565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac85856040518363ffffffff1660e01b815260040161304f9291906140df565b600060405180830381600087803b15801561306957600080fd5b505af115801561307d573d6000803e3d6000fd5b5050505061308b8582612729565b7f47cadff479ffebc80dd9d2330c72e274eaf0e620bb4e9d617356df321e8297618585856040516130be93929190614047565b60405180910390a17f77c97459a115e74ba5adced182b076766b1b9825e785d85b5f0f06d444bef21130836040516130f79291906140df565b60405180910390a1505050505050565b60606000600283600261311a919061461e565b6131249190614597565b67ffffffffffffffff811115613163577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156131955781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106131f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061327d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026132bd919061461e565b6132c79190614597565b90505b60018111156133b3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061332f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061336c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806133ac906148c7565b90506132ca565b50600084146133f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ee90614209565b60405180910390fd5b8091505092915050565b6000613463826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136169092919063ffffffff16565b90506000815111156134c357808060200190518101906134839190613a00565b6134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b9906142a9565b60405180910390fd5b5b505050565b60008062093a8063ffffffff16846134e0919061496c565b146134ee576001905061355d565b838310156134ff576002905061355d565b60008260ff1662093a806135139190614678565b63ffffffff1690508062093a8063ffffffff1686613531919061496c565b8661353c91906146b6565b6135469190614597565b84111561355757600491505061355d565b60039150505b9392505050565b6135e7846323b872dd60e01b85858560405160240161358593929190614047565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613401565b50505050565b6000670de0b6b3a76400008284613604919061461e565b61360e91906145ed565b905092915050565b6060613625848460008561362e565b90509392505050565b606082471015613673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161366a90614249565b60405180910390fd5b61367c85613742565b6136bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136b290614289565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136e49190613f1a565b60006040518083038185875af1925050503d8060008114613721576040519150601f19603f3d011682016040523d82523d6000602084013e613726565b606091505b5091509150613736828286613765565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613775578290506137c5565b6000835111156137885782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bc91906141e7565b60405180910390fd5b9392505050565b6000813590506137db81614c8a565b92915050565b6000813590506137f081614ca1565b92915050565b60008151905061380581614cb8565b92915050565b60008135905061381a81614ccf565b92915050565b60008135905061382f81614ce6565b92915050565b60008135905061384481614cfd565b92915050565b60008135905061385981614d14565b92915050565b60008151905061386e81614d14565b92915050565b60008060006060848603121561388957600080fd5b6000613897868287016137e1565b93505060206138a88682870161384a565b92505060406138b98682870161384a565b9150509250925092565b6000806000606084860312156138d857600080fd5b60006138e6868287016137cc565b93505060206138f7868287016137cc565b92505060406139088682870161384a565b9150509250925092565b6000806040838503121561392557600080fd5b6000613933858286016137cc565b92505060206139448582860161384a565b9150509250929050565b6000806000806080858703121561396457600080fd5b6000613972878288016137cc565b94505060206139838782880161384a565b935050604061399487828801613835565b92505060606139a58782880161384a565b91505092959194509250565b6000806000606084860312156139c657600080fd5b60006139d4868287016137cc565b93505060206139e58682870161384a565b92505060406139f68682870161384a565b9150509250925092565b600060208284031215613a1257600080fd5b6000613a20848285016137f6565b91505092915050565b600060208284031215613a3b57600080fd5b6000613a498482850161380b565b91505092915050565b60008060408385031215613a6557600080fd5b6000613a738582860161380b565b9250506020613a84858286016137cc565b9150509250929050565b600060208284031215613aa057600080fd5b6000613aae84828501613820565b91505092915050565b600060208284031215613ac957600080fd5b6000613ad78482850161384a565b91505092915050565b600060208284031215613af257600080fd5b6000613b008482850161385f565b91505092915050565b60008060408385031215613b1c57600080fd5b6000613b2a8582860161385f565b9250506020613b3b8582860161385f565b9150509250929050565b600080600060608486031215613b5a57600080fd5b6000613b688682870161384a565b9350506020613b798682870161384a565b9250506040613b8a8682870161384a565b9150509250925092565b60008060008060808587031215613baa57600080fd5b6000613bb88782880161385f565b9450506020613bc98782880161385f565b9350506040613bda8782880161385f565b9250506060613beb8782880161385f565b91505092959194509250565b6000613c038383613eed565b60208301905092915050565b613c18816147bc565b82525050565b613c27816146ea565b82525050565b6000613c3882614531565b613c42818561455f565b9350613c4d83614521565b8060005b83811015613c7e578151613c658882613bf7565b9750613c7083614552565b925050600181019050613c51565b5085935050505092915050565b613c948161470e565b82525050565b613ca38161471a565b82525050565b6000613cb48261453c565b613cbe8185614570565b9350613cce818560208601614894565b80840191505092915050565b613ce3816147ce565b82525050565b613cf2816147f2565b82525050565b613d0181614816565b82525050565b613d108161483a565b82525050565b613d1f8161485e565b82525050565b6000613d3082614547565b613d3a818561457b565b9350613d4a818560208601614894565b613d5381614a59565b840191505092915050565b6000613d6982614547565b613d73818561458c565b9350613d83818560208601614894565b80840191505092915050565b6000613d9c60208361457b565b9150613da782614a6a565b602082019050919050565b6000613dbf60148361457b565b9150613dca82614a93565b602082019050919050565b6000613de260268361457b565b9150613ded82614abc565b604082019050919050565b6000613e0560108361457b565b9150613e1082614b0b565b602082019050919050565b6000613e28601d8361457b565b9150613e3382614b34565b602082019050919050565b6000613e4b60178361458c565b9150613e5682614b5d565b601782019050919050565b6000613e6e602a8361457b565b9150613e7982614b86565b604082019050919050565b6000613e91601f8361457b565b9150613e9c82614bd5565b602082019050919050565b6000613eb460118361458c565b9150613ebf82614bfe565b601182019050919050565b6000613ed7602f8361457b565b9150613ee282614c27565b604082019050919050565b613ef681614795565b82525050565b613f0581614795565b82525050565b613f14816147af565b82525050565b6000613f268284613ca9565b915081905092915050565b6000613f3c82613e3e565b9150613f488285613d5e565b9150613f5382613ea7565b9150613f5f8284613d5e565b91508190509392505050565b6000602082019050613f806000830184613c1e565b92915050565b6000604082019050613f9b6000830185613c1e565b613fa86020830184613c1e565b9392505050565b6000608082019050613fc46000830187613c1e565b613fd16020830186613c1e565b613fde6040830185613c1e565b613feb6060830184613c1e565b95945050505050565b600060a0820190506140096000830188613c1e565b6140166020830187613c1e565b6140236040830186613c1e565b6140306060830185613c1e565b61403d6080830184613efc565b9695505050505050565b600060608201905061405c6000830186613c1e565b6140696020830185613c1e565b6140766040830184613efc565b949350505050565b600060c0820190506140936000830189613c1e565b6140a06020830188613c1e565b6140ad6040830187613efc565b6140ba6060830186613c1e565b6140c76080830185613efc565b6140d460a0830184613efc565b979650505050505050565b60006040820190506140f46000830185613c1e565b6141016020830184613efc565b9392505050565b600060208201905081810360008301526141228184613c2d565b905092915050565b600060208201905061413f6000830184613c8b565b92915050565b600060208201905061415a6000830184613c9a565b92915050565b60006020820190506141756000830184613cda565b92915050565b60006020820190506141906000830184613ce9565b92915050565b60006020820190506141ab6000830184613cf8565b92915050565b60006020820190506141c66000830184613d07565b92915050565b60006020820190506141e16000830184613d16565b92915050565b600060208201905081810360008301526142018184613d25565b905092915050565b6000602082019050818103600083015261422281613d8f565b9050919050565b6000602082019050818103600083015261424281613db2565b9050919050565b6000602082019050818103600083015261426281613dd5565b9050919050565b6000602082019050818103600083015261428281613df8565b9050919050565b600060208201905081810360008301526142a281613e1b565b9050919050565b600060208201905081810360008301526142c281613e61565b9050919050565b600060208201905081810360008301526142e281613e84565b9050919050565b6000602082019050818103600083015261430281613eca565b9050919050565b600060208201905061431e6000830184613efc565b92915050565b60006080820190506143396000830187613efc565b6143466020830186613c0f565b6143536040830185613efc565b6143606060830184613efc565b95945050505050565b600060608201905061437e6000830186613efc565b61438b6020830185613c1e565b6143986040830184613efc565b949350505050565b60006080820190506143b56000830187613efc565b6143c26020830186613c1e565b6143cf6040830185613efc565b6143dc6060830184613efc565b95945050505050565b600060c0820190506143fa6000830189613efc565b6144076020830188613c1e565b6144146040830187613efc565b6144216060830186613efc565b61442e6080830185613efc565b61443b60a0830184613f0b565b979650505050505050565b600060408201905061445b6000830185613efc565b6144686020830184613efc565b9392505050565b60006060820190506144846000830186613efc565b6144916020830185613efc565b61449e6040830184613efc565b949350505050565b60006020820190506144bb6000830184613f0b565b92915050565b60006040820190506144d66000830185613f0b565b6144e36020830184613f0b565b9392505050565b60006060820190506144ff6000830186613f0b565b61450c6020830185613f0b565b6145196040830184613f0b565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006145a282614795565b91506145ad83614795565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156145e2576145e161499d565b5b828201905092915050565b60006145f882614795565b915061460383614795565b925082614613576146126149cc565b5b828204905092915050565b600061462982614795565b915061463483614795565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561466d5761466c61499d565b5b828202905092915050565b60006146838261479f565b915061468e8361479f565b92508163ffffffff04831182151516156146ab576146aa61499d565b5b828202905092915050565b60006146c182614795565b91506146cc83614795565b9250828210156146df576146de61499d565b5b828203905092915050565b60006146f582614775565b9050919050565b600061470782614775565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061475b826146ea565b9050919050565b600081905061477082614c76565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006147c782614870565b9050919050565b60006147d9826147e0565b9050919050565b60006147eb82614775565b9050919050565b60006147fd82614804565b9050919050565b600061480f82614775565b9050919050565b600061482182614828565b9050919050565b600061483382614775565b9050919050565b60006148458261484c565b9050919050565b600061485782614775565b9050919050565b600061486982614762565b9050919050565b600061487b82614882565b9050919050565b600061488d82614775565b9050919050565b60005b838110156148b2578082015181840152602081019050614897565b838111156148c1576000848401525b50505050565b60006148d282614795565b915060008214156148e6576148e561499d565b5b600182039050919050565b6000600282049050600182168061490957607f821691505b6020821081141561491d5761491c614a2a565b5b50919050565b600061492e82614795565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149615761496061499d565b5b600182019050919050565b600061497782614795565b915061498283614795565b925082614992576149916149cc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c8110614c8757614c866149fb565b5b50565b614c93816146ea565b8114614c9e57600080fd5b50565b614caa816146fc565b8114614cb557600080fd5b50565b614cc18161470e565b8114614ccc57600080fd5b50565b614cd88161471a565b8114614ce357600080fd5b50565b614cef81614724565b8114614cfa57600080fd5b50565b614d0681614750565b8114614d1157600080fd5b50565b614d1d81614795565b8114614d2857600080fd5b5056fea264697066735822122010e7077edb7067a7cfa4eecd2533441849140e67fc5c80fe939ce0d3fadf7e7964736f6c63430008040033",
  "devdoc": {
    "events": {
      "AddReserves(address,uint256)": {
        "params": {
          "addAmount": "amount added as reserves as part of the liquidation event",
          "benefactor": "address added a certain amount to its reserves"
        }
      },
      "BorrowFromMaturityPool(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was borrowed",
          "fee": "amount extra that it will need to be paid at maturity",
          "maturityDate": "dateID/poolID/maturity in which the user will have                     to repay the loan",
          "to": "address which borrowed the asset"
        }
      },
      "DepositToMaturityPool(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was deposited",
          "fee": "is the extra amount that it will be collected at maturity",
          "from": "address which deposited the asset",
          "maturityDate": "dateID/poolID/maturity in which the user will be able                     to collect his deposit + his fee"
        }
      },
      "DepositToSmartPool(address,uint256)": {
        "params": {
          "amount": "amount added to the smart pool",
          "user": "address that added a certain amount to the smart pool"
        }
      },
      "LiquidateBorrow(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "fixedLenderCollateral": "address of the asset that it was seized                              by the liquidator",
          "liquidator": "address which repaid the previously borrowed amount",
          "maturityDate": "poolID where the borrower had an uncollaterized position",
          "repayAmount": "amount of the asset that it was repaid",
          "seizedAmount": "amount seized of the collateral"
        }
      },
      "RepayToMaturityPool(address,address,uint256,uint256,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "debtCovered": "amount of the debt that was covered in this repayment (penalties could have been repaid)",
          "maturityDate": "poolID where the user repaid its borrowed amounts",
          "payer": "address which repaid the previously borrowed amount",
          "repayAmount": "amount that was repaid"
        }
      },
      "SeizeAsset(address,address,uint256)": {
        "params": {
          "borrower": "address which had the original debt",
          "liquidator": "address which seized this collateral",
          "seizedAmount": "amount seized of the collateral"
        }
      },
      "WithdrawFromMaturityPool(address,uint256,uint256)": {
        "params": {
          "amount": "of the asset that it was deposited",
          "from": "address which will be collecting the asset",
          "maturityDate": "poolID where the user collected its deposits"
        }
      },
      "WithdrawFromSmartPool(address,uint256)": {
        "params": {
          "amount": "amount withdrawn to the smart pool",
          "user": "address that withdrew a certain amount from the smart pool"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrowFromMaturityPool(uint256,uint256,uint256)": {
        "details": "Lends to a wallet for a certain maturity date/pool",
        "params": {
          "amount": "amount to send to the msg.sender",
          "maturityDate": "maturity date for repayment",
          "maxAmountAllowed": "maximum amount of debt that        the user is willing to accept for the transaction        to go through"
        }
      },
      "depositToMaturityPool(uint256,uint256,uint256)": {
        "details": "Deposits a certain amount to the protocol for      a certain maturity date/pool",
        "params": {
          "amount": "amount to receive from the msg.sender",
          "maturityDate": "maturity date / pool ID",
          "minAmountRequired": "minimum amount of capital required        by the depositor for the transaction to be accepted"
        }
      },
      "depositToSmartPool(uint256)": {
        "details": "Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC",
        "params": {
          "amount": "The amount to be deposited"
        }
      },
      "getAccountSnapshot(address,uint256)": {
        "details": "Gets current snapshot for a wallet in certain maturity",
        "params": {
          "maturityDate": "maturityDate - Send the value 0 in order to get the snapshot for all maturities where the user borrowed",
          "who": "wallet to return status snapshot in the specified maturity date"
        },
        "returns": {
          "_0": "the amount the user deposited to the smart pool and the total money he owes from maturities"
        }
      },
      "getAuditor()": {
        "details": "Gets the auditor contract interface being used to validate positions"
      },
      "getFuturePools()": {
        "details": "Function to retrieve valid future pools"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSmartPoolDeposits()": {
        "details": "Gets the market size of the smart pool, usefull for dApps to show current status"
      },
      "getTotalMpBorrows(uint256)": {
        "details": "Gets the total amount of borrowed money for a maturityDate",
        "params": {
          "maturityDate": "maturity date"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidate(address,uint256,address,uint256)": {
        "details": "Msg.sender liquidates a borrower's position and repays a certain amount of debt      for a maturity date, seizing a part of borrower's collateral",
        "params": {
          "borrower": "wallet that has an outstanding debt for a certain maturity date",
          "fixedLenderCollateral": "address of fixedLender from which the collateral will be seized to give the liquidator",
          "maturityDate": "maturity date for which the position will be liquidated",
          "repayAmount": "amount to be repaid by liquidator(msg.sender)"
        }
      },
      "pause()": {
        "details": "Sets the _pause state to true in case of emergency, triggered by an authorized account"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to repay to should be matured",
        "params": {
          "borrower": "The address of the account that has the debt",
          "maturityDate": "The matured date where the debt is located",
          "repayAmount": "amount to be paid for the borrower's debt"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seize(address,address,uint256)": {
        "details": "Public function for liquidator to seize borrowers tokens in the smart pool.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)",
        "params": {
          "borrower": "address from which the tokens will be seized",
          "liquidator": "address which will receive the seized tokens",
          "seizeAmount": "amount to be removed from borrower's posession"
        }
      },
      "setMpDepositDistributionWeighter(uint256)": {
        "details": "Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order      to share out more or less unassigned earnings to that deposit",
        "params": {
          "_mpDepositDistributionWeighter": "percentage amount represented with 1e18 decimals that will multiply the amount to deposit"
        }
      },
      "setProtocolLiquidationFee(uint256)": {
        "details": "Sets the protocol's collateral liquidation fee used on liquidations",
        "params": {
          "_protocolLiquidationFee": "percentage amount represented with 1e18 decimals"
        }
      },
      "setProtocolSpreadFee(uint256)": {
        "details": "Sets the protocol's spread fee used on loan repayment",
        "params": {
          "_protocolSpreadFee": "percentage amount represented with 1e18 decimals"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Sets the _pause state to false when threat is gone, triggered by an authorized account"
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to retrieve the money should be matured",
        "params": {
          "maturityDate": "The matured date for which we're trying to retrieve the funds",
          "redeemAmount": "The number of underlying tokens to receive",
          "redeemer": "The address of the account which is redeeming the tokens"
        }
      },
      "withdrawFromSmartPool(uint256)": {
        "details": "Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC",
        "params": {
          "amount": "The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance"
        }
      },
      "withdrawFromTreasury(address,uint256)": {
        "params": {
          "amount": "amount to be transferred",
          "who": "address which will receive the funds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddReserves(address,uint256)": {
        "notice": "Event emitted reserves have been added to the protocol"
      },
      "BorrowFromMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user borrows amount of an asset from a         certain maturity date"
      },
      "DepositToMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a fee at the end of the         period"
      },
      "DepositToSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256,uint256)": {
        "notice": "Event emitted when a user's position had a liquidation"
      },
      "RepayToMaturityPool(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user repays its borrows after maturity"
      },
      "SeizeAsset(address,address,uint256)": {
        "notice": "Event emitted when a user's collateral has been seized"
      },
      "WithdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "Event emitted when a user collects its deposits after maturity"
      },
      "WithdrawFromSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      }
    },
    "kind": "user",
    "methods": {
      "liquidate(address,uint256,address,uint256)": {
        "notice": "Function to liquidate an uncollaterized position"
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "notice": "Sender repays an amount of borrower's debt for a maturity date"
      },
      "seize(address,address,uint256)": {
        "notice": "Public function to seize a certain amount of tokens"
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date"
      },
      "withdrawFromTreasury(address,uint256)": {
        "notice": "public function to transfer funds from protocol earnings to a specified wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1263,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1178,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5526,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "protocolSpreadFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5529,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5533,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "mpDepositDistributionWeighter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5538,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5547,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "trustedUnderlying",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1958"
      },
      {
        "astId": 5551,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "eToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IEToken)8897"
      },
      {
        "astId": 5554,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "underlyingTokenName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 5557,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "poolAccounting",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPoolAccounting)9163"
      },
      {
        "astId": 5560,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "auditor",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IAuditor)8832"
      },
      {
        "astId": 5563,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalMpBorrows",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuditor)8832": {
        "encoding": "inplace",
        "label": "contract IAuditor",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1958": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEToken)8897": {
        "encoding": "inplace",
        "label": "contract IEToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAccounting)9163": {
        "encoding": "inplace",
        "label": "contract IPoolAccounting",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}