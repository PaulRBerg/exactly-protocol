{
  "address": "0x51B23a106B2c31C51A00A1288755946B64eBc7F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    }
  ],
  "transactionHash": "0x7f106585eac8d72cf6e67a346586f34c027b1d23a09d73f14661934af1f24453",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x51B23a106B2c31C51A00A1288755946B64eBc7F7",
    "transactionIndex": 12,
    "gasUsed": "604802",
    "logsBloom": "0x
    "blockHash": "0x631f8d866470926c31fc4bbeee06bd938807e665c5f4306fde8cfc0639dd2ce4",
    "transactionHash": "0x7f106585eac8d72cf6e67a346586f34c027b1d23a09d73f14661934af1f24453",
    "logs": [],
    "blockNumber": 30309718,
    "cumulativeGasUsed": "10362756",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accrueEarningsToSP(PoolLib.MaturityPool storage,uint256)\":{\"params\":{\"maturityID\":\"timestamp in which maturity pool matures\",\"pool\":\"maturity pool that needs to be updated\"}},\"addFee(PoolLib.MaturityPool storage,uint256)\":{\"params\":{\"fee\":\"fee to be added to the earnings for                   the pool at maturity\",\"pool\":\"maturity pool that needs to be updated\"}},\"addMoney(PoolLib.MaturityPool storage,uint256)\":{\"params\":{\"amount\":\"amount to be added to the maturity pool\",\"pool\":\"maturity pool where money will be added\"}},\"repay(PoolLib.MaturityPool storage,uint256)\":{\"params\":{\"amount\":\"amount to be added to the maturity pool\",\"pool\":\"maturity pool where money will be added\"},\"returns\":{\"earningsRepay\":\": amount to distribute as earnings to the SP - extras (penalties,         not shared with anyone)\",\"fee\":\": amount to distribute as earnings to the SP (revenue share with protocol)\",\"smartPoolDebtReduction\":\": amount to reduce the SP debt\"}},\"takeFee(PoolLib.MaturityPool storage,uint256)\":{\"params\":{\"fee\":\"fee to be added to the earnings for                   the pool at maturity\",\"pool\":\"maturity pool that needs to be updated\"}},\"takeMoney(PoolLib.MaturityPool storage,uint256,uint256)\":{\"params\":{\"amount\":\"amount to be taken out of the pool before it matures\",\"pool\":\"maturity pool where money needs to be taken out\"},\"returns\":{\"newDebtSP\":\"amount of new debt that needs to be taken out of the SP\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrueEarningsToSP(PoolLib.MaturityPool storage,uint256)\":{\"notice\":\"External function to accrue Smart Pool earnings\"},\"addFee(PoolLib.MaturityPool storage,uint256)\":{\"notice\":\"External function to add fee to be collected at maturity\"},\"addMoney(PoolLib.MaturityPool storage,uint256)\":{\"notice\":\"function that registers an operation to add money to         maturity pool\"},\"repay(PoolLib.MaturityPool storage,uint256)\":{\"notice\":\"function that registers an operation to repay to         maturity pool. Reduces the amount of supplied amount by         MP depositors, after that reduces SP debt, and finally         returns the amount of earnings to pay to SP\"},\"takeFee(PoolLib.MaturityPool storage,uint256)\":{\"notice\":\"External function to take a fee out of earnings at maturity\"},\"takeMoney(PoolLib.MaturityPool storage,uint256,uint256)\":{\"notice\":\"function that registers an operation to take money out of the         maturity pool that returns if there's new debt to be taken out         of the smart pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/PoolLib.sol\":\"PoolLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TSUtils.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PoolLib {\\n    /**\\n     * @notice struct that helps manage the maturity pools and also keep\\n     * @param borrowed total amount borrowed at the MP\\n     * @param supplied total amount supplied to the MP\\n     * @param suppliedSP total amount borrowed over time from the SP.\\n     *        It's worth noticing that it only increases, and it's the last\\n     *        debt to be repaid at maturity\\n     * @param earnings total amount of earnings to be collected at maturity.\\n     *        This earnings haven't accrued yet (see: lastAccrue). Each interaction\\n     *        with the MP, some of these earnings are accrued to earningsSP. This is\\n     *        done by doing:\\n     *             EARNINGSSP += DAYS(NOW - LAST_ACCRUE) * EARNINGS /\\n     *                              DAYS(MATURITY_DATE - LAST_ACCRUE)\\n     *        If there's a new deposit to the MP, the commission for that deposit comes\\n     *        out of the future earnings:\\n     *              NEWCOMMISSION = DEPOSIT * EARNINGS / (SUPPLIEDSP + DEPOSIT);\\n     *              EARNINGS -= NEWCOMMISSION;\\n     * @param earningsSP total amount of earnings that already belong to the SP\\n     * @param lastAccrue timestamp for the last time that some of the earnings\\n     *        have been transferred to earningsSP (SP gained some earnings for having\\n     *        supported the loans)\\n     */\\n    struct MaturityPool {\\n        uint256 borrowed;\\n        uint256 supplied;\\n        uint256 suppliedSP;\\n        uint256 unassignedEarnings;\\n        uint256 earningsMP;\\n        uint256 earningsSP;\\n        uint256 lastAccrue;\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to add money to\\n     *         maturity pool\\n     * @param pool maturity pool where money will be added\\n     * @param amount amount to be added to the maturity pool\\n     */\\n    function addMoney(MaturityPool storage pool, uint256 amount) external {\\n        pool.supplied += amount;\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to take money out of the\\n     *         maturity pool that returns if there's new debt to be taken out\\n     *         of the smart pool\\n     * @param pool maturity pool where money needs to be taken out\\n     * @param amount amount to be taken out of the pool before it matures\\n     * @return newDebtSP amount of new debt that needs to be taken out of the SP\\n     */\\n    function takeMoney(\\n        MaturityPool storage pool,\\n        uint256 amount,\\n        uint256 maxDebt\\n    ) external returns (uint256 newDebtSP) {\\n        uint256 newBorrowed = pool.borrowed + amount;\\n        pool.borrowed = newBorrowed;\\n\\n        uint256 suppliedSP = pool.suppliedSP;\\n        uint256 suppliedMP = pool.supplied;\\n        uint256 supplied = suppliedSP + suppliedMP;\\n\\n        if (newBorrowed > supplied) {\\n            uint256 newSupplySP = newBorrowed - suppliedMP;\\n\\n            if (newSupplySP > maxDebt) {\\n                revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n            }\\n\\n            // We take money out from the Smart Pool\\n            // because there's not enough in the MP\\n            newDebtSP = newBorrowed - supplied;\\n            pool.suppliedSP = newSupplySP;\\n        }\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to repay to\\n     *         maturity pool. Reduces the amount of supplied amount by\\n     *         MP depositors, after that reduces SP debt, and finally\\n     *         returns the amount of earnings to pay to SP\\n     * @param pool maturity pool where money will be added\\n     * @param amount amount to be added to the maturity pool\\n     * @return smartPoolDebtReduction : amount to reduce the SP debt\\n     * @return fee : amount to distribute as earnings to the SP (revenue share with protocol)\\n     * @return earningsRepay : amount to distribute as earnings to the SP - extras (penalties,\\n     *         not shared with anyone)\\n     */\\n    function repay(MaturityPool storage pool, uint256 amount)\\n        external\\n        returns (\\n            uint256 smartPoolDebtReduction,\\n            uint256 fee,\\n            uint256 earningsRepay\\n        )\\n    {\\n        uint256 borrowMP = pool.borrowed;\\n        uint256 supplySP = pool.suppliedSP;\\n        uint256 earningsSP = pool.earningsSP;\\n\\n        // You can't have repayments bigger than the borrowed amount\\n        // but amount might contain the fees or penalties\\n        pool.borrowed = borrowMP - Math.min(borrowMP, amount);\\n\\n        // This is the amount that is being lent out by the protocol\\n        // that belongs to the MP depositors\\n        uint256 depositsBorrowed = borrowMP - Math.min(borrowMP, supplySP);\\n        if (amount > depositsBorrowed) {\\n            // if its more than the amount being repaid, then it should\\n            // take a little part of the SP debt\\n            uint256 extra = amount - depositsBorrowed;\\n\\n            uint256 earningsDebtMP = Math.min(pool.earningsMP, extra);\\n            pool.earningsMP -= earningsDebtMP;\\n            extra -= earningsDebtMP;\\n            if (extra <= supplySP) {\\n                // Covered part of the supply SP\\n                pool.suppliedSP -= extra;\\n                smartPoolDebtReduction = extra;\\n                // unchanged values:\\n                //   fee = 0\\n                //   earningsRepay = 0\\n            } else if (extra < supplySP + earningsSP) {\\n                // Covered the supply SP and part of the earningsSP\\n                pool.suppliedSP = 0;\\n                extra -= supplySP;\\n                pool.earningsSP -= extra;\\n\\n                smartPoolDebtReduction = supplySP;\\n                fee = extra;\\n                // unchanged values:\\n                //   earningsRepay = 0\\n            } else {\\n                // Covered the supply SP and the earnings SP and extras SP\\n                smartPoolDebtReduction = supplySP;\\n                fee = pool.earningsSP;\\n                earningsRepay = extra - supplySP - fee;\\n\\n                pool.suppliedSP = 0;\\n                pool.earningsSP = 0;\\n            }\\n        }\\n\\n        // No smart pool debt reduction\\n        // No revenue for smart pool and protocol\\n        // No extras for smart pool\\n        //   smartPoolDebtReduction = 0\\n        //   fee = 0\\n        //   earningsRepay = 0\\n    }\\n\\n    /**\\n     * @notice External function to add fee to be collected at maturity\\n     * @param pool maturity pool that needs to be updated\\n     * @param fee fee to be added to the earnings for\\n     *                   the pool at maturity\\n     */\\n    function addFee(MaturityPool storage pool, uint256 fee) external {\\n        pool.unassignedEarnings += fee;\\n    }\\n\\n    /**\\n     * @notice External function to take a fee out of earnings at maturity\\n     * @param pool maturity pool that needs to be updated\\n     * @param fee fee to be added to the earnings for\\n     *                   the pool at maturity\\n     */\\n    function takeFee(MaturityPool storage pool, uint256 fee) external {\\n        pool.unassignedEarnings -= fee;\\n        pool.earningsMP += fee;\\n    }\\n\\n    /**\\n     * @notice External function to accrue Smart Pool earnings\\n     * @param pool maturity pool that needs to be updated\\n     * @param maturityID timestamp in which maturity pool matures\\n     */\\n    function accrueEarningsToSP(MaturityPool storage pool, uint256 maturityID)\\n        external\\n    {\\n        if (pool.lastAccrue == maturityID) {\\n            return;\\n        }\\n\\n        // seconds from last accrual to the closest:\\n        // maturity date or the current timestamp\\n        uint256 secondsSinceLastAccrue = TSUtils.secondsPre(\\n            pool.lastAccrue,\\n            Math.min(maturityID, block.timestamp)\\n        );\\n        // seconds from last accrual to the maturity date\\n        uint256 secondsTotalToMaturity = TSUtils.secondsPre(\\n            pool.lastAccrue,\\n            maturityID\\n        );\\n        uint256 unassignedEarnings = pool.unassignedEarnings;\\n\\n        // assign some of the earnings to be collected at maturity\\n        uint256 earningsToAccrue = secondsTotalToMaturity == 0\\n            ? 0\\n            : (unassignedEarnings * secondsSinceLastAccrue) /\\n                secondsTotalToMaturity;\\n        pool.earningsSP += earningsToAccrue;\\n        pool.unassignedEarnings = unassignedEarnings - earningsToAccrue;\\n        pool.lastAccrue = Math.min(maturityID, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x32ea0b713922907de28b66d2ba168788b3210d981dcd38df89aa2f296b7ac152\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        NONE,\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    error UnmatchedPoolState(uint8 state, uint8 requiredState);\\n    error UnmatchedPoolStateMultiple(\\n        uint8 state,\\n        uint8 requiredState,\\n        uint8 alternativeState\\n    );\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many seconds are left to a certain date\\n     * @param timestampFrom to calculate the difference in seconds from a date\\n     * @param timestampTo to calculate the difference in seconds to a date\\n     */\\n    function secondsPre(uint256 timestampFrom, uint256 timestampTo)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     * @param alternativeState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function validateRequiredPoolState(\\n        uint8 maxFuturePools,\\n        uint256 maturityDate,\\n        State requiredState,\\n        State alternativeState\\n    ) internal view {\\n        State poolState = getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n\\n        if (poolState != requiredState && poolState != alternativeState) {\\n            if (alternativeState == State.NONE) {\\n                revert UnmatchedPoolState(\\n                    uint8(poolState),\\n                    uint8(requiredState)\\n                );\\n            }\\n            revert UnmatchedPoolStateMultiple(\\n                uint8(poolState),\\n                uint8(requiredState),\\n                uint8(alternativeState)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     */\\n    function futurePools(uint8 maxFuturePools)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxFuturePools);\\n        uint256 timestamp = block.timestamp - (block.timestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxFuturePools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b88ac2787f2cd0a2d0b23d2ad94c49361127b3636ead1c7227aea5a03dc0b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x610a01610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806310f9fd2a1461007157806373f9ac64146100b057806389426e7b146100d95780639d6957d414610102578063b80b8bc71461013f578063c1fbc94314610168575b600080fd5b81801561007d57600080fd5b5061009860048036038101906100939190610646565b610191565b6040516100a793929190610777565b60405180910390f35b8180156100bc57600080fd5b506100d760048036038101906100d29190610646565b6102fb565b005b8180156100e557600080fd5b5061010060048036038101906100fb9190610646565b61031a565b005b81801561010e57600080fd5b5061012960048036038101906101249190610682565b6104d3565b6040516101369190610733565b60405180910390f35b81801561014b57600080fd5b5061016660048036038101906101619190610646565b610595565b005b81801561017457600080fd5b5061018f600480360381019061018a9190610646565b6105b4565b005b600080600080856000015490506000866002015490506000876005015490506101ba83886105ee565b836101c5919061088f565b886000018190555060006101d984846105ee565b846101e4919061088f565b9050808811156102f057600081896101fc919061088f565b9050600061020e8b60040154836105ee565b9050808b6004016000828254610224919061088f565b925050819055508082610237919061088f565b915084821161026357818b6002016000828254610254919061088f565b925050819055508198506102ed565b838561026f91906107ae565b8210156102b45760008b60020181905550848261028c919061088f565b9150818b60050160008282546102a2919061088f565b925050819055508498508197506102ec565b8498508a6005015497508785836102cb919061088f565b6102d5919061088f565b965060008b6002018190555060008b600501819055505b5b50505b505050509250925092565b8082600101600082825461030f91906107ae565b925050819055505050565b808260060154141561032b576104cf565b6000739Cb53e5c24Fa1d1cd68c19f5d6f9135E7600bdDb63883d0709846006015461035685426105ee565b6040518363ffffffff1660e01b815260040161037392919061074e565b60206040518083038186803b15801561038b57600080fd5b505af415801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c391906106d1565b90506000739Cb53e5c24Fa1d1cd68c19f5d6f9135E7600bdDb63883d07098560060154856040518363ffffffff1660e01b815260040161040492919061074e565b60206040518083038186803b15801561041c57600080fd5b505af4158015610430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045491906106d1565b90506000846003015490506000808314610484578284836104759190610835565b61047f9190610804565b610487565b60005b90508086600501600082825461049d91906107ae565b9250508190555080826104b0919061088f565b86600301819055506104c285426105ee565b8660060181905550505050505b5050565b6000808385600001546104e691906107ae565b90508085600001819055506000856002015490506000866001015490506000818361051191906107ae565b90508084111561058a5760008285610529919061088f565b9050868111156105715760166040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016105689190610718565b60405180910390fd5b818561057d919061088f565b9550808960020181905550505b505050509392505050565b808260030160008282546105a991906107ae565b925050819055505050565b808260030160008282546105c8919061088f565b92505081905550808260040160008282546105e391906107ae565b925050819055505050565b60008183106105fd57816105ff565b825b905092915050565b6000813590506106168161099d565b92915050565b60008135905061062b816109b4565b92915050565b600081519050610640816109b4565b92915050565b6000806040838503121561065957600080fd5b600061066785828601610607565b92505060206106788582860161061c565b9150509250929050565b60008060006060848603121561069757600080fd5b60006106a586828701610607565b93505060206106b68682870161061c565b92505060406106c78682870161061c565b9150509250925092565b6000602082840312156106e357600080fd5b60006106f184828501610631565b91505092915050565b610703816108ea565b82525050565b610712816108e0565b82525050565b600060208201905061072d60008301846106fa565b92915050565b60006020820190506107486000830184610709565b92915050565b60006040820190506107636000830185610709565b6107706020830184610709565b9392505050565b600060608201905061078c6000830186610709565b6107996020830185610709565b6107a66040830184610709565b949350505050565b60006107b9826108e0565b91506107c4836108e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107f9576107f86108fc565b5b828201905092915050565b600061080f826108e0565b915061081a836108e0565b92508261082a5761082961092b565b5b828204905092915050565b6000610840826108e0565b915061084b836108e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610884576108836108fc565b5b828202905092915050565b600061089a826108e0565b91506108a5836108e0565b9250828210156108b8576108b76108fc565b5b828203905092915050565b60008190506108d182610989565b919050565b6000819050919050565b6000819050919050565b60006108f5826108c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b601c811061099a5761099961095a565b5b50565b6109a6816108d6565b81146109b157600080fd5b50565b6109bd816108e0565b81146109c857600080fd5b5056fea26469706673582212202d5a154780da3a40ed939a5d330224a623bfd96943689d424e8b2d1688d24aca64736f6c63430008040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806310f9fd2a1461007157806373f9ac64146100b057806389426e7b146100d95780639d6957d414610102578063b80b8bc71461013f578063c1fbc94314610168575b600080fd5b81801561007d57600080fd5b5061009860048036038101906100939190610646565b610191565b6040516100a793929190610777565b60405180910390f35b8180156100bc57600080fd5b506100d760048036038101906100d29190610646565b6102fb565b005b8180156100e557600080fd5b5061010060048036038101906100fb9190610646565b61031a565b005b81801561010e57600080fd5b5061012960048036038101906101249190610682565b6104d3565b6040516101369190610733565b60405180910390f35b81801561014b57600080fd5b5061016660048036038101906101619190610646565b610595565b005b81801561017457600080fd5b5061018f600480360381019061018a9190610646565b6105b4565b005b600080600080856000015490506000866002015490506000876005015490506101ba83886105ee565b836101c5919061088f565b886000018190555060006101d984846105ee565b846101e4919061088f565b9050808811156102f057600081896101fc919061088f565b9050600061020e8b60040154836105ee565b9050808b6004016000828254610224919061088f565b925050819055508082610237919061088f565b915084821161026357818b6002016000828254610254919061088f565b925050819055508198506102ed565b838561026f91906107ae565b8210156102b45760008b60020181905550848261028c919061088f565b9150818b60050160008282546102a2919061088f565b925050819055508498508197506102ec565b8498508a6005015497508785836102cb919061088f565b6102d5919061088f565b965060008b6002018190555060008b600501819055505b5b50505b505050509250925092565b8082600101600082825461030f91906107ae565b925050819055505050565b808260060154141561032b576104cf565b600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63883d0709846006015461035685426105ee565b6040518363ffffffff1660e01b815260040161037392919061074e565b60206040518083038186803b15801561038b57600080fd5b505af415801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c391906106d1565b9050600073__$90f1fa1b3f91137ac60e95891d324fdd69$__63883d07098560060154856040518363ffffffff1660e01b815260040161040492919061074e565b60206040518083038186803b15801561041c57600080fd5b505af4158015610430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045491906106d1565b90506000846003015490506000808314610484578284836104759190610835565b61047f9190610804565b610487565b60005b90508086600501600082825461049d91906107ae565b9250508190555080826104b0919061088f565b86600301819055506104c285426105ee565b8660060181905550505050505b5050565b6000808385600001546104e691906107ae565b90508085600001819055506000856002015490506000866001015490506000818361051191906107ae565b90508084111561058a5760008285610529919061088f565b9050868111156105715760166040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016105689190610718565b60405180910390fd5b818561057d919061088f565b9550808960020181905550505b505050509392505050565b808260030160008282546105a991906107ae565b925050819055505050565b808260030160008282546105c8919061088f565b92505081905550808260040160008282546105e391906107ae565b925050819055505050565b60008183106105fd57816105ff565b825b905092915050565b6000813590506106168161099d565b92915050565b60008135905061062b816109b4565b92915050565b600081519050610640816109b4565b92915050565b6000806040838503121561065957600080fd5b600061066785828601610607565b92505060206106788582860161061c565b9150509250929050565b60008060006060848603121561069757600080fd5b60006106a586828701610607565b93505060206106b68682870161061c565b92505060406106c78682870161061c565b9150509250925092565b6000602082840312156106e357600080fd5b60006106f184828501610631565b91505092915050565b610703816108ea565b82525050565b610712816108e0565b82525050565b600060208201905061072d60008301846106fa565b92915050565b60006020820190506107486000830184610709565b92915050565b60006040820190506107636000830185610709565b6107706020830184610709565b9392505050565b600060608201905061078c6000830186610709565b6107996020830185610709565b6107a66040830184610709565b949350505050565b60006107b9826108e0565b91506107c4836108e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107f9576107f86108fc565b5b828201905092915050565b600061080f826108e0565b915061081a836108e0565b92508261082a5761082961092b565b5b828204905092915050565b6000610840826108e0565b915061084b836108e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610884576108836108fc565b5b828202905092915050565b600061089a826108e0565b91506108a5836108e0565b9250828210156108b8576108b76108fc565b5b828203905092915050565b60008190506108d182610989565b919050565b6000819050919050565b6000819050919050565b60006108f5826108c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b601c811061099a5761099961095a565b5b50565b6109a6816108d6565b81146109b157600080fd5b50565b6109bd816108e0565b81146109c857600080fd5b5056fea26469706673582212202d5a154780da3a40ed939a5d330224a623bfd96943689d424e8b2d1688d24aca64736f6c63430008040033",
  "libraries": {
    "TSUtils": "0x9Cb53e5c24Fa1d1cd68c19f5d6f9135E7600bdDb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accrueEarningsToSP(PoolLib.MaturityPool storage,uint256)": {
        "params": {
          "maturityID": "timestamp in which maturity pool matures",
          "pool": "maturity pool that needs to be updated"
        }
      },
      "addFee(PoolLib.MaturityPool storage,uint256)": {
        "params": {
          "fee": "fee to be added to the earnings for                   the pool at maturity",
          "pool": "maturity pool that needs to be updated"
        }
      },
      "addMoney(PoolLib.MaturityPool storage,uint256)": {
        "params": {
          "amount": "amount to be added to the maturity pool",
          "pool": "maturity pool where money will be added"
        }
      },
      "repay(PoolLib.MaturityPool storage,uint256)": {
        "params": {
          "amount": "amount to be added to the maturity pool",
          "pool": "maturity pool where money will be added"
        },
        "returns": {
          "earningsRepay": ": amount to distribute as earnings to the SP - extras (penalties,         not shared with anyone)",
          "fee": ": amount to distribute as earnings to the SP (revenue share with protocol)",
          "smartPoolDebtReduction": ": amount to reduce the SP debt"
        }
      },
      "takeFee(PoolLib.MaturityPool storage,uint256)": {
        "params": {
          "fee": "fee to be added to the earnings for                   the pool at maturity",
          "pool": "maturity pool that needs to be updated"
        }
      },
      "takeMoney(PoolLib.MaturityPool storage,uint256,uint256)": {
        "params": {
          "amount": "amount to be taken out of the pool before it matures",
          "pool": "maturity pool where money needs to be taken out"
        },
        "returns": {
          "newDebtSP": "amount of new debt that needs to be taken out of the SP"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accrueEarningsToSP(PoolLib.MaturityPool storage,uint256)": {
        "notice": "External function to accrue Smart Pool earnings"
      },
      "addFee(PoolLib.MaturityPool storage,uint256)": {
        "notice": "External function to add fee to be collected at maturity"
      },
      "addMoney(PoolLib.MaturityPool storage,uint256)": {
        "notice": "function that registers an operation to add money to         maturity pool"
      },
      "repay(PoolLib.MaturityPool storage,uint256)": {
        "notice": "function that registers an operation to repay to         maturity pool. Reduces the amount of supplied amount by         MP depositors, after that reduces SP debt, and finally         returns the amount of earnings to pay to SP"
      },
      "takeFee(PoolLib.MaturityPool storage,uint256)": {
        "notice": "External function to take a fee out of earnings at maturity"
      },
      "takeMoney(PoolLib.MaturityPool storage,uint256,uint256)": {
        "notice": "function that registers an operation to take money out of the         maturity pool that returns if there's new debt to be taken out         of the smart pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}