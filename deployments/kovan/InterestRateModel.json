{
  "address": "0x4461920fD5EEa020c05580e35863e84558C072d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_curveParameterA",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_curveParameterB",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_maxUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveParameterA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveParameterB",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedMP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "suppliedMP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "smartPoolLiquidityShare",
          "type": "uint256"
        }
      ],
      "name": "getRateToBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "suppliedSP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unassignedEarnings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mpDepositsWeighter",
          "type": "uint256"
        }
      ],
      "name": "getYieldForDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earningsShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxUtilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_curveParameterA",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_curveParameterB",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_maxUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyRate",
          "type": "uint256"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99d64089cffddc98bf95b3b99dcb6ce72dc18a4b1240417abd8e8d6a37f3fc0a",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x4461920fD5EEa020c05580e35863e84558C072d3",
    "transactionIndex": 4,
    "gasUsed": "1502399",
    "logsBloom": "0x
    "blockHash": "0xa2a63bf73e8be64fcf50ad3f2bf55596a8c33c05521e3a01e86f3481a1296db2",
    "transactionHash": "0x99d64089cffddc98bf95b3b99dcb6ce72dc18a4b1240417abd8e8d6a37f3fc0a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 30309717,
        "transactionHash": "0x99d64089cffddc98bf95b3b99dcb6ce72dc18a4b1240417abd8e8d6a37f3fc0a",
        "address": "0x4461920fD5EEa020c05580e35863e84558C072d3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa2a63bf73e8be64fcf50ad3f2bf55596a8c33c05521e3a01e86f3481a1296db2"
      }
    ],
    "blockNumber": 30309717,
    "cumulativeGasUsed": "1919672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "49500000000000000",
    "-25000000000000000",
    "1100000000000000000",
    "231481481481"
  ],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curveParameterA\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_curveParameterB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveParameterA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveParameterB\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedMP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliedMP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smartPoolLiquidityShare\",\"type\":\"uint256\"}],\"name\":\"getRateToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"suppliedSP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unassignedEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mpDepositsWeighter\",\"type\":\"uint256\"}],\"name\":\"getYieldForDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earningsShare\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curveParameterA\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_curveParameterB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyRate\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getParameters()\":{\"returns\":{\"_0\":\"parameters (curveA, curveB, maxUtilizationRate, penaltyRate)\"}},\"getRateToBorrow(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"liquidity limits aren't checked, that's the responsibility of pool.takeMoney.\",\"params\":{\"borrowedMP\":\"total borrowed from this maturity\",\"currentDate\":\"the curent block timestamp. Recieved from caller for easier testing\",\"maturityDate\":\"maturity date for calculating days left to maturity\",\"smartPoolLiquidityShare\":\"'fair' share of the smart pool that this maturity can borrow\",\"suppliedMP\":\"total supplied to this maturity\"},\"returns\":{\"_0\":\"rate to be applied to the amount to calculate the fee that the borrower will         have to pay\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getYieldForDeposit(uint256,uint256,uint256,uint256)\":{\"details\":\"Calculate the amount of revenue sharing between the smart pool and the new MP depositor.\",\"params\":{\"amount\":\"amount being provided by the MP depositor\",\"suppliedSP\":\"amount of money currently being supplied in the maturity pool\",\"unassignedEarnings\":\"earnings not yet accrued to the SP that should be shared with the        current depositor\"},\"returns\":{\"earningsShare\":\": yield to be given to the MP depositor\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setParameters(uint256,int256,uint256,uint256)\":{\"details\":\"Function to update this model's parameters (DEFAULT_ADMIN_ROLE)\",\"params\":{\"_curveParameterA\":\"curve parameter\",\"_curveParameterB\":\"curve parameter\",\"_maxUtilizationRate\":\"% of MP supp\",\"_penaltyRate\":\"by-second rate charged on late repays, with 18 decimals\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getParameters()\":{\"notice\":\"gets this model's parameters\"},\"getRateToBorrow(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Get current rate for borrow a certain amount in a certain maturity      with supply/demand values in the maturity pool and supply demand values      in the smart pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateModel.sol\":\"InterestRateModel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/PoolLib.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\ncontract InterestRateModel is IInterestRateModel, AccessControl {\\n    using PoolLib for PoolLib.MaturityPool;\\n    using DecimalMath for uint256;\\n    uint256 private constant YEAR = 365 days;\\n\\n    // Parameters to the system, expressed with 1e18 decimals\\n    uint256 public curveParameterA;\\n    int256 public curveParameterB;\\n    uint256 public maxUtilizationRate;\\n    uint256 public override penaltyRate;\\n\\n    constructor(\\n        uint256 _curveParameterA,\\n        int256 _curveParameterB,\\n        uint256 _maxUtilizationRate,\\n        uint256 _penaltyRate\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        setParameters(\\n            _curveParameterA,\\n            _curveParameterB,\\n            _maxUtilizationRate,\\n            _penaltyRate\\n        );\\n    }\\n\\n    /// @notice gets this model's parameters\\n    /// @return parameters (curveA, curveB, maxUtilizationRate, penaltyRate)\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            int256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            curveParameterA,\\n            curveParameterB,\\n            maxUtilizationRate,\\n            penaltyRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculate the amount of revenue sharing between the smart pool and the new MP depositor.\\n     * @param suppliedSP amount of money currently being supplied in the maturity pool\\n     * @param unassignedEarnings earnings not yet accrued to the SP that should be shared with the\\n     *        current depositor\\n     * @param amount amount being provided by the MP depositor\\n     * @return earningsShare : yield to be given to the MP depositor\\n     */\\n    function getYieldForDeposit(\\n        uint256 suppliedSP,\\n        uint256 unassignedEarnings,\\n        uint256 amount,\\n        uint256 mpDepositsWeighter\\n    ) external pure override returns (uint256 earningsShare) {\\n        amount = amount.mul_(mpDepositsWeighter);\\n        uint256 supply = suppliedSP + amount;\\n        earningsShare = (amount * unassignedEarnings) / supply;\\n    }\\n\\n    /**\\n     * @dev Function to update this model's parameters (DEFAULT_ADMIN_ROLE)\\n     * @param _curveParameterA curve parameter\\n     * @param _curveParameterB curve parameter\\n     * @param _maxUtilizationRate % of MP supp\\n     * @param _penaltyRate by-second rate charged on late repays, with 18 decimals\\n     */\\n    function setParameters(\\n        uint256 _curveParameterA,\\n        int256 _curveParameterB,\\n        uint256 _maxUtilizationRate,\\n        uint256 _penaltyRate\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        curveParameterA = _curveParameterA;\\n        curveParameterB = _curveParameterB;\\n        maxUtilizationRate = _maxUtilizationRate;\\n        penaltyRate = _penaltyRate;\\n        // we call the getRateToBorrow function with an utilization rate of\\n        // zero to force it to revert in the tx that sets it, and not be able\\n        // to set an invalid curve (such as one yielding a negative interest\\n        // rate). Doing it works because it's a monotonously increasing function.\\n        getRateToBorrow(block.timestamp + 1, block.timestamp, 0, 100, 100);\\n    }\\n\\n    /**\\n     * @notice Get current rate for borrow a certain amount in a certain maturity\\n     *      with supply/demand values in the maturity pool and supply demand values\\n     *      in the smart pool\\n     * @dev liquidity limits aren't checked, that's the responsibility of pool.takeMoney.\\n     * @param maturityDate maturity date for calculating days left to maturity\\n     * @param currentDate the curent block timestamp. Recieved from caller for easier testing\\n     * @param borrowedMP total borrowed from this maturity\\n     * @param suppliedMP total supplied to this maturity\\n     * @param smartPoolLiquidityShare 'fair' share of the smart pool that this maturity can borrow\\n     * @return rate to be applied to the amount to calculate the fee that the borrower will\\n     *         have to pay\\n     */\\n    function getRateToBorrow(\\n        uint256 maturityDate,\\n        uint256 currentDate,\\n        uint256 borrowedMP,\\n        uint256 suppliedMP,\\n        uint256 smartPoolLiquidityShare\\n    ) public view override returns (uint256) {\\n        if (currentDate >= maturityDate) {\\n            revert GenericError(ErrorCode.INVALID_TIME_DIFFERENCE);\\n        }\\n        uint256 supplied = smartPoolLiquidityShare + suppliedMP;\\n        if (supplied == 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n        uint256 utilizationRate = borrowedMP.div_(supplied);\\n        if (utilizationRate >= maxUtilizationRate) {\\n            revert GenericError(ErrorCode.EXCEEDED_MAX_UTILIZATION_RATE);\\n        }\\n        int256 rate = int256(\\n            curveParameterA.div_(maxUtilizationRate - utilizationRate)\\n        ) + curveParameterB;\\n        // this curve _could_ go below zero if the parameters are set wrong.\\n        assert(rate >= 0);\\n        return (uint256(rate) * (maturityDate - currentDate)) / YEAR;\\n    }\\n}\\n\",\"keccak256\":\"0x213671f2972df710fcbdf928a5d61112dd8a1f49c741e5c0ff00c8552210bcbf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IInterestRateModel {\\n    function getRateToBorrow(\\n        uint256 maturityDate,\\n        uint256 currentDate,\\n        uint256 borrowedMP,\\n        uint256 suppliedMP,\\n        uint256 smartPoolLiquidityShare\\n    ) external view returns (uint256);\\n\\n    function penaltyRate() external view returns (uint256);\\n\\n    function getYieldForDeposit(\\n        uint256 suppliedSP,\\n        uint256 unassignedEarnings,\\n        uint256 amount,\\n        uint256 mpDepositDistributionWeighter\\n    ) external pure returns (uint256 earningsShare);\\n}\\n\",\"keccak256\":\"0xcc618fcafbde0babd3c00d0c22c161975ccdc4994dc4b778ebb9574ea8cf64d9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TSUtils.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PoolLib {\\n    /**\\n     * @notice struct that helps manage the maturity pools and also keep\\n     * @param borrowed total amount borrowed at the MP\\n     * @param supplied total amount supplied to the MP\\n     * @param suppliedSP total amount borrowed over time from the SP.\\n     *        It's worth noticing that it only increases, and it's the last\\n     *        debt to be repaid at maturity\\n     * @param earnings total amount of earnings to be collected at maturity.\\n     *        This earnings haven't accrued yet (see: lastAccrue). Each interaction\\n     *        with the MP, some of these earnings are accrued to earningsSP. This is\\n     *        done by doing:\\n     *             EARNINGSSP += DAYS(NOW - LAST_ACCRUE) * EARNINGS /\\n     *                              DAYS(MATURITY_DATE - LAST_ACCRUE)\\n     *        If there's a new deposit to the MP, the commission for that deposit comes\\n     *        out of the future earnings:\\n     *              NEWCOMMISSION = DEPOSIT * EARNINGS / (SUPPLIEDSP + DEPOSIT);\\n     *              EARNINGS -= NEWCOMMISSION;\\n     * @param earningsSP total amount of earnings that already belong to the SP\\n     * @param lastAccrue timestamp for the last time that some of the earnings\\n     *        have been transferred to earningsSP (SP gained some earnings for having\\n     *        supported the loans)\\n     */\\n    struct MaturityPool {\\n        uint256 borrowed;\\n        uint256 supplied;\\n        uint256 suppliedSP;\\n        uint256 unassignedEarnings;\\n        uint256 earningsMP;\\n        uint256 earningsSP;\\n        uint256 lastAccrue;\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to add money to\\n     *         maturity pool\\n     * @param pool maturity pool where money will be added\\n     * @param amount amount to be added to the maturity pool\\n     */\\n    function addMoney(MaturityPool storage pool, uint256 amount) external {\\n        pool.supplied += amount;\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to take money out of the\\n     *         maturity pool that returns if there's new debt to be taken out\\n     *         of the smart pool\\n     * @param pool maturity pool where money needs to be taken out\\n     * @param amount amount to be taken out of the pool before it matures\\n     * @return newDebtSP amount of new debt that needs to be taken out of the SP\\n     */\\n    function takeMoney(\\n        MaturityPool storage pool,\\n        uint256 amount,\\n        uint256 maxDebt\\n    ) external returns (uint256 newDebtSP) {\\n        uint256 newBorrowed = pool.borrowed + amount;\\n        pool.borrowed = newBorrowed;\\n\\n        uint256 suppliedSP = pool.suppliedSP;\\n        uint256 suppliedMP = pool.supplied;\\n        uint256 supplied = suppliedSP + suppliedMP;\\n\\n        if (newBorrowed > supplied) {\\n            uint256 newSupplySP = newBorrowed - suppliedMP;\\n\\n            if (newSupplySP > maxDebt) {\\n                revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n            }\\n\\n            // We take money out from the Smart Pool\\n            // because there's not enough in the MP\\n            newDebtSP = newBorrowed - supplied;\\n            pool.suppliedSP = newSupplySP;\\n        }\\n    }\\n\\n    /**\\n     * @notice function that registers an operation to repay to\\n     *         maturity pool. Reduces the amount of supplied amount by\\n     *         MP depositors, after that reduces SP debt, and finally\\n     *         returns the amount of earnings to pay to SP\\n     * @param pool maturity pool where money will be added\\n     * @param amount amount to be added to the maturity pool\\n     * @return smartPoolDebtReduction : amount to reduce the SP debt\\n     * @return fee : amount to distribute as earnings to the SP (revenue share with protocol)\\n     * @return earningsRepay : amount to distribute as earnings to the SP - extras (penalties,\\n     *         not shared with anyone)\\n     */\\n    function repay(MaturityPool storage pool, uint256 amount)\\n        external\\n        returns (\\n            uint256 smartPoolDebtReduction,\\n            uint256 fee,\\n            uint256 earningsRepay\\n        )\\n    {\\n        uint256 borrowMP = pool.borrowed;\\n        uint256 supplySP = pool.suppliedSP;\\n        uint256 earningsSP = pool.earningsSP;\\n\\n        // You can't have repayments bigger than the borrowed amount\\n        // but amount might contain the fees or penalties\\n        pool.borrowed = borrowMP - Math.min(borrowMP, amount);\\n\\n        // This is the amount that is being lent out by the protocol\\n        // that belongs to the MP depositors\\n        uint256 depositsBorrowed = borrowMP - Math.min(borrowMP, supplySP);\\n        if (amount > depositsBorrowed) {\\n            // if its more than the amount being repaid, then it should\\n            // take a little part of the SP debt\\n            uint256 extra = amount - depositsBorrowed;\\n\\n            uint256 earningsDebtMP = Math.min(pool.earningsMP, extra);\\n            pool.earningsMP -= earningsDebtMP;\\n            extra -= earningsDebtMP;\\n            if (extra <= supplySP) {\\n                // Covered part of the supply SP\\n                pool.suppliedSP -= extra;\\n                smartPoolDebtReduction = extra;\\n                // unchanged values:\\n                //   fee = 0\\n                //   earningsRepay = 0\\n            } else if (extra < supplySP + earningsSP) {\\n                // Covered the supply SP and part of the earningsSP\\n                pool.suppliedSP = 0;\\n                extra -= supplySP;\\n                pool.earningsSP -= extra;\\n\\n                smartPoolDebtReduction = supplySP;\\n                fee = extra;\\n                // unchanged values:\\n                //   earningsRepay = 0\\n            } else {\\n                // Covered the supply SP and the earnings SP and extras SP\\n                smartPoolDebtReduction = supplySP;\\n                fee = pool.earningsSP;\\n                earningsRepay = extra - supplySP - fee;\\n\\n                pool.suppliedSP = 0;\\n                pool.earningsSP = 0;\\n            }\\n        }\\n\\n        // No smart pool debt reduction\\n        // No revenue for smart pool and protocol\\n        // No extras for smart pool\\n        //   smartPoolDebtReduction = 0\\n        //   fee = 0\\n        //   earningsRepay = 0\\n    }\\n\\n    /**\\n     * @notice External function to add fee to be collected at maturity\\n     * @param pool maturity pool that needs to be updated\\n     * @param fee fee to be added to the earnings for\\n     *                   the pool at maturity\\n     */\\n    function addFee(MaturityPool storage pool, uint256 fee) external {\\n        pool.unassignedEarnings += fee;\\n    }\\n\\n    /**\\n     * @notice External function to take a fee out of earnings at maturity\\n     * @param pool maturity pool that needs to be updated\\n     * @param fee fee to be added to the earnings for\\n     *                   the pool at maturity\\n     */\\n    function takeFee(MaturityPool storage pool, uint256 fee) external {\\n        pool.unassignedEarnings -= fee;\\n        pool.earningsMP += fee;\\n    }\\n\\n    /**\\n     * @notice External function to accrue Smart Pool earnings\\n     * @param pool maturity pool that needs to be updated\\n     * @param maturityID timestamp in which maturity pool matures\\n     */\\n    function accrueEarningsToSP(MaturityPool storage pool, uint256 maturityID)\\n        external\\n    {\\n        if (pool.lastAccrue == maturityID) {\\n            return;\\n        }\\n\\n        // seconds from last accrual to the closest:\\n        // maturity date or the current timestamp\\n        uint256 secondsSinceLastAccrue = TSUtils.secondsPre(\\n            pool.lastAccrue,\\n            Math.min(maturityID, block.timestamp)\\n        );\\n        // seconds from last accrual to the maturity date\\n        uint256 secondsTotalToMaturity = TSUtils.secondsPre(\\n            pool.lastAccrue,\\n            maturityID\\n        );\\n        uint256 unassignedEarnings = pool.unassignedEarnings;\\n\\n        // assign some of the earnings to be collected at maturity\\n        uint256 earningsToAccrue = secondsTotalToMaturity == 0\\n            ? 0\\n            : (unassignedEarnings * secondsSinceLastAccrue) /\\n                secondsTotalToMaturity;\\n        pool.earningsSP += earningsToAccrue;\\n        pool.unassignedEarnings = unassignedEarnings - earningsToAccrue;\\n        pool.lastAccrue = Math.min(maturityID, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x32ea0b713922907de28b66d2ba168788b3210d981dcd38df89aa2f296b7ac152\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        NONE,\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    error UnmatchedPoolState(uint8 state, uint8 requiredState);\\n    error UnmatchedPoolStateMultiple(\\n        uint8 state,\\n        uint8 requiredState,\\n        uint8 alternativeState\\n    );\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many seconds are left to a certain date\\n     * @param timestampFrom to calculate the difference in seconds from a date\\n     * @param timestampTo to calculate the difference in seconds to a date\\n     */\\n    function secondsPre(uint256 timestampFrom, uint256 timestampTo)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     * @param alternativeState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function validateRequiredPoolState(\\n        uint8 maxFuturePools,\\n        uint256 maturityDate,\\n        State requiredState,\\n        State alternativeState\\n    ) internal view {\\n        State poolState = getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n\\n        if (poolState != requiredState && poolState != alternativeState) {\\n            if (alternativeState == State.NONE) {\\n                revert UnmatchedPoolState(\\n                    uint8(poolState),\\n                    uint8(requiredState)\\n                );\\n            }\\n            revert UnmatchedPoolStateMultiple(\\n                uint8(poolState),\\n                uint8(requiredState),\\n                uint8(alternativeState)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     */\\n    function futurePools(uint8 maxFuturePools)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxFuturePools);\\n        uint256 timestamp = block.timestamp - (block.timestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxFuturePools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b88ac2787f2cd0a2d0b23d2ad94c49361127b3636ead1c7227aea5a03dc0b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620025b1380380620025b183398181016040528101906200003791906200083e565b6200004c6000801b336200006a60201b60201c565b62000060848484846200008060201b60201c565b5050505062000e49565b6200007c8282620000ee60201b60201c565b5050565b6000801b620000a58162000099620001df60201b60201c565b620001e760201b60201c565b84600181905550836002819055508260038190555081600481905550620000e6600142620000d4919062000b12565b426000606480620002ab60201b60201c565b505050505050565b6200010082826200046a60201b60201c565b620001db57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000180620001df60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b620001f982826200046a60201b60201c565b620002a7576200022c8173ffffffffffffffffffffffffffffffffffffffff166014620004d460201b620007601760201c565b620002478360001c6020620004d460201b620007601760201c565b6040516020016200025a929190620009a8565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029e919062000a07565b60405180910390fd5b5050565b6000858510620002f557601b6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401620002ec9190620009ea565b60405180910390fd5b6000838362000305919062000b12565b90506000811415620003515760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401620003489190620009ea565b60405180910390fd5b60006200036d8287620007e360201b62000a5a1790919060201c565b90506003548110620003b95760176040517fede8a599000000000000000000000000000000000000000000000000000000008152600401620003b09190620009ea565b60405180910390fd5b6000600254620003e983600354620003d2919062000c08565b600154620007e360201b62000a5a1790919060201c565b620003f5919062000a74565b9050600081121562000430577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6301e13380888a62000443919062000c08565b8262000450919062000ba7565b6200045c919062000b6f565b935050505095945050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060006002836002620004e9919062000ba7565b620004f5919062000b12565b67ffffffffffffffff81111562000535577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620005685781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110620005c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811062000652577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600262000694919062000ba7565b620006a0919062000b12565b90505b600181111562000792577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106200070a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811062000748577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806200078a9062000cb6565b9050620006a3565b5060008414620007d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007d09062000a2b565b60405180910390fd5b8091505092915050565b600081670de0b6b3a764000084620007fc919062000ba7565b62000808919062000b6f565b905092915050565b600081519050620008218162000e15565b92915050565b600081519050620008388162000e2f565b92915050565b600080600080608085870312156200085557600080fd5b6000620008658782880162000827565b9450506020620008788782880162000810565b93505060406200088b8782880162000827565b92505060606200089e8782880162000827565b91505092959194509250565b620008b58162000c6c565b82525050565b6000620008c88262000a4d565b620008d4818562000a58565b9350620008e681856020860162000c80565b620008f18162000d72565b840191505092915050565b6000620009098262000a4d565b62000915818562000a69565b93506200092781856020860162000c80565b80840191505092915050565b60006200094260208362000a58565b91506200094f8262000d83565b602082019050919050565b60006200096960178362000a69565b9150620009768262000dac565b601782019050919050565b60006200099060118362000a69565b91506200099d8262000dd5565b601182019050919050565b6000620009b5826200095a565b9150620009c38285620008fc565b9150620009d08262000981565b9150620009de8284620008fc565b91508190509392505050565b600060208201905062000a016000830184620008aa565b92915050565b6000602082019050818103600083015262000a238184620008bb565b905092915050565b6000602082019050818103600083015262000a468162000933565b9050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600062000a818262000c58565b915062000a8e8362000c58565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161562000acc5762000acb62000ce5565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161562000b075762000b0662000ce5565b5b828201905092915050565b600062000b1f8262000c62565b915062000b2c8362000c62565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000b645762000b6362000ce5565b5b828201905092915050565b600062000b7c8262000c62565b915062000b898362000c62565b92508262000b9c5762000b9b62000d14565b5b828204905092915050565b600062000bb48262000c62565b915062000bc18362000c62565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000bfd5762000bfc62000ce5565b5b828202905092915050565b600062000c158262000c62565b915062000c228362000c62565b92508282101562000c385762000c3762000ce5565b5b828203905092915050565b600081905062000c538262000dfe565b919050565b6000819050919050565b6000819050919050565b600062000c798262000c43565b9050919050565b60005b8381101562000ca057808201518184015260208101905062000c83565b8381111562000cb0576000848401525b50505050565b600062000cc38262000c62565b9150600082141562000cda5762000cd962000ce5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b601c811062000e125762000e1162000d43565b5b50565b62000e208162000c58565b811462000e2c57600080fd5b50565b62000e3a8162000c62565b811462000e4657600080fd5b50565b6117588062000e596000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806391d1485411610097578063d547741f11610066578063d547741f1461029b578063d6b7494f146102b7578063dfcb48bd146102d5578063f72578a3146102f3576100f5565b806391d14854146101fc578063a217fddf1461022c578063a4cf7ac51461024a578063a5ea11da1461027a576100f5565b80632f2ff15d116100d35780632f2ff15d1461018a57806336568abe146101a657806374e86c97146101c25780638f2652f7146101e0576100f5565b806301ffc9a7146100fa5780630ddc56311461012a578063248a9ca31461015a575b600080fd5b610114600480360381019061010f9190610e4a565b610311565b604051610121919061112b565b60405180910390f35b610144600480360381019061013f9190610f39565b61038b565b60405161015191906111f9565b60405180910390f35b610174600480360381019061016f9190610de5565b610526565b6040516101819190611146565b60405180910390f35b6101a4600480360381019061019f9190610e0e565b610545565b005b6101c060048036038101906101bb9190610e0e565b61056e565b005b6101ca6105f1565b6040516101d7919061117c565b60405180910390f35b6101fa60048036038101906101f59190610e73565b6105f7565b005b61021660048036038101906102119190610e0e565b61064b565b604051610223919061112b565b60405180910390f35b6102346106b5565b6040516102419190611146565b60405180910390f35b610264600480360381019061025f9190610ed6565b6106bc565b60405161027191906111f9565b60405180910390f35b610282610705565b6040516102929493929190611214565b60405180910390f35b6102b560048036038101906102b09190610e0e565b610725565b005b6102bf61074e565b6040516102cc91906111f9565b60405180910390f35b6102dd610754565b6040516102ea91906111f9565b60405180910390f35b6102fb61075a565b60405161030891906111f9565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610384575061038382610a83565b5b9050919050565b60008585106103d257601b6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016103c99190611161565b60405180910390fd5b600083836103e09190611314565b905060008114156104295760166040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016104209190611161565b60405180910390fd5b600061043e8287610a5a90919063ffffffff16565b905060035481106104875760176040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161047e9190611161565b60405180910390fd5b60006002546104ae8360035461049d91906113f5565b600154610a5a90919063ffffffff16565b6104b89190611280565b905060008112156104f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6301e13380888a61050391906113f5565b8261050e919061139b565b610518919061136a565b935050505095945050505050565b6000806000838152602001908152602001600020600101549050919050565b61054e82610526565b61055f8161055a610aed565b610af5565b6105698383610b92565b505050565b610576610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da906111d9565b60405180910390fd5b6105ed8282610c72565b5050565b60025481565b6000801b61060c81610607610aed565b610af5565b846001819055508360028190555082600381905550816004819055506106436001426106389190611314565b42600060648061038b565b505050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006106d18284610d5390919063ffffffff16565b9250600083866106e19190611314565b90508085856106f0919061139b565b6106fa919061136a565b915050949350505050565b600080600080600154600254600354600454935093509350935090919293565b61072e82610526565b61073f8161073a610aed565b610af5565b6107498383610c72565b505050565b60045481565b60035481565b60015481565b606060006002836002610773919061139b565b61077d9190611314565b67ffffffffffffffff8111156107bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107ee5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061084c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106108d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610916919061139b565b6109209190611314565b90505b6001811115610a0c577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610988577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106109c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610a0590611509565b9050610923565b5060008414610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a47906111b9565b60405180910390fd5b8091505092915050565b600081670de0b6b3a764000084610a71919061139b565b610a7b919061136a565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610aff828261064b565b610b8e57610b248173ffffffffffffffffffffffffffffffffffffffff166014610760565b610b328360001c6020610760565b604051602001610b439291906110f1565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b859190611197565b60405180910390fd5b5050565b610b9c828261064b565b610c6e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c13610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610c7c828261064b565b15610d4f57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610cf4610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a76400008284610d6a919061139b565b610d74919061136a565b905092915050565b600081359050610d8b816116af565b92915050565b600081359050610da0816116c6565b92915050565b600081359050610db5816116dd565b92915050565b600081359050610dca816116f4565b92915050565b600081359050610ddf8161170b565b92915050565b600060208284031215610df757600080fd5b6000610e0584828501610d91565b91505092915050565b60008060408385031215610e2157600080fd5b6000610e2f85828601610d91565b9250506020610e4085828601610d7c565b9150509250929050565b600060208284031215610e5c57600080fd5b6000610e6a84828501610da6565b91505092915050565b60008060008060808587031215610e8957600080fd5b6000610e9787828801610dd0565b9450506020610ea887828801610dbb565b9350506040610eb987828801610dd0565b9250506060610eca87828801610dd0565b91505092959194509250565b60008060008060808587031215610eec57600080fd5b6000610efa87828801610dd0565b9450506020610f0b87828801610dd0565b9350506040610f1c87828801610dd0565b9250506060610f2d87828801610dd0565b91505092959194509250565b600080600080600060a08688031215610f5157600080fd5b6000610f5f88828901610dd0565b9550506020610f7088828901610dd0565b9450506040610f8188828901610dd0565b9350506060610f9288828901610dd0565b9250506080610fa388828901610dd0565b9150509295509295909350565b610fb98161143b565b82525050565b610fc881611447565b82525050565b610fd7816114c4565b82525050565b610fe681611490565b82525050565b6000610ff782611259565b6110018185611264565b93506110118185602086016114d6565b61101a816115c0565b840191505092915050565b600061103082611259565b61103a8185611275565b935061104a8185602086016114d6565b80840191505092915050565b6000611063602083611264565b915061106e826115d1565b602082019050919050565b6000611086601783611275565b9150611091826115fa565b601782019050919050565b60006110a9601183611275565b91506110b482611623565b601182019050919050565b60006110cc602f83611264565b91506110d78261164c565b604082019050919050565b6110eb816114ba565b82525050565b60006110fc82611079565b91506111088285611025565b91506111138261109c565b915061111f8284611025565b91508190509392505050565b60006020820190506111406000830184610fb0565b92915050565b600060208201905061115b6000830184610fbf565b92915050565b60006020820190506111766000830184610fce565b92915050565b60006020820190506111916000830184610fdd565b92915050565b600060208201905081810360008301526111b18184610fec565b905092915050565b600060208201905081810360008301526111d281611056565b9050919050565b600060208201905081810360008301526111f2816110bf565b9050919050565b600060208201905061120e60008301846110e2565b92915050565b600060808201905061122960008301876110e2565b6112366020830186610fdd565b61124360408301856110e2565b61125060608301846110e2565b95945050505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061128b82611490565b915061129683611490565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156112d1576112d0611533565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561130957611308611533565b5b828201905092915050565b600061131f826114ba565b915061132a836114ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561135f5761135e611533565b5b828201905092915050565b6000611375826114ba565b9150611380836114ba565b9250826113905761138f611562565b5b828204905092915050565b60006113a6826114ba565b91506113b1836114ba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113ea576113e9611533565b5b828202905092915050565b6000611400826114ba565b915061140b836114ba565b92508282101561141e5761141d611533565b5b828203905092915050565b60006114348261149a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061148b8261169b565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114cf8261147d565b9050919050565b60005b838110156114f45780820151818401526020810190506114d9565b83811115611503576000848401525b50505050565b6000611514826114ba565b9150600082141561152857611527611533565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c81106116ac576116ab611591565b5b50565b6116b881611429565b81146116c357600080fd5b50565b6116cf81611447565b81146116da57600080fd5b50565b6116e681611451565b81146116f157600080fd5b50565b6116fd81611490565b811461170857600080fd5b50565b611714816114ba565b811461171f57600080fd5b5056fea264697066735822122075b2e5fe68bb165a363c52e30110ebdb2065810bffe8e93c4bcaeb812d10152164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806391d1485411610097578063d547741f11610066578063d547741f1461029b578063d6b7494f146102b7578063dfcb48bd146102d5578063f72578a3146102f3576100f5565b806391d14854146101fc578063a217fddf1461022c578063a4cf7ac51461024a578063a5ea11da1461027a576100f5565b80632f2ff15d116100d35780632f2ff15d1461018a57806336568abe146101a657806374e86c97146101c25780638f2652f7146101e0576100f5565b806301ffc9a7146100fa5780630ddc56311461012a578063248a9ca31461015a575b600080fd5b610114600480360381019061010f9190610e4a565b610311565b604051610121919061112b565b60405180910390f35b610144600480360381019061013f9190610f39565b61038b565b60405161015191906111f9565b60405180910390f35b610174600480360381019061016f9190610de5565b610526565b6040516101819190611146565b60405180910390f35b6101a4600480360381019061019f9190610e0e565b610545565b005b6101c060048036038101906101bb9190610e0e565b61056e565b005b6101ca6105f1565b6040516101d7919061117c565b60405180910390f35b6101fa60048036038101906101f59190610e73565b6105f7565b005b61021660048036038101906102119190610e0e565b61064b565b604051610223919061112b565b60405180910390f35b6102346106b5565b6040516102419190611146565b60405180910390f35b610264600480360381019061025f9190610ed6565b6106bc565b60405161027191906111f9565b60405180910390f35b610282610705565b6040516102929493929190611214565b60405180910390f35b6102b560048036038101906102b09190610e0e565b610725565b005b6102bf61074e565b6040516102cc91906111f9565b60405180910390f35b6102dd610754565b6040516102ea91906111f9565b60405180910390f35b6102fb61075a565b60405161030891906111f9565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610384575061038382610a83565b5b9050919050565b60008585106103d257601b6040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016103c99190611161565b60405180910390fd5b600083836103e09190611314565b905060008114156104295760166040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016104209190611161565b60405180910390fd5b600061043e8287610a5a90919063ffffffff16565b905060035481106104875760176040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161047e9190611161565b60405180910390fd5b60006002546104ae8360035461049d91906113f5565b600154610a5a90919063ffffffff16565b6104b89190611280565b905060008112156104f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6301e13380888a61050391906113f5565b8261050e919061139b565b610518919061136a565b935050505095945050505050565b6000806000838152602001908152602001600020600101549050919050565b61054e82610526565b61055f8161055a610aed565b610af5565b6105698383610b92565b505050565b610576610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da906111d9565b60405180910390fd5b6105ed8282610c72565b5050565b60025481565b6000801b61060c81610607610aed565b610af5565b846001819055508360028190555082600381905550816004819055506106436001426106389190611314565b42600060648061038b565b505050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006106d18284610d5390919063ffffffff16565b9250600083866106e19190611314565b90508085856106f0919061139b565b6106fa919061136a565b915050949350505050565b600080600080600154600254600354600454935093509350935090919293565b61072e82610526565b61073f8161073a610aed565b610af5565b6107498383610c72565b505050565b60045481565b60035481565b60015481565b606060006002836002610773919061139b565b61077d9190611314565b67ffffffffffffffff8111156107bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107ee5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061084c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106108d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610916919061139b565b6109209190611314565b90505b6001811115610a0c577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610988577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106109c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610a0590611509565b9050610923565b5060008414610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a47906111b9565b60405180910390fd5b8091505092915050565b600081670de0b6b3a764000084610a71919061139b565b610a7b919061136a565b905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b610aff828261064b565b610b8e57610b248173ffffffffffffffffffffffffffffffffffffffff166014610760565b610b328360001c6020610760565b604051602001610b439291906110f1565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b859190611197565b60405180910390fd5b5050565b610b9c828261064b565b610c6e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610c13610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b610c7c828261064b565b15610d4f57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610cf4610aed565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a76400008284610d6a919061139b565b610d74919061136a565b905092915050565b600081359050610d8b816116af565b92915050565b600081359050610da0816116c6565b92915050565b600081359050610db5816116dd565b92915050565b600081359050610dca816116f4565b92915050565b600081359050610ddf8161170b565b92915050565b600060208284031215610df757600080fd5b6000610e0584828501610d91565b91505092915050565b60008060408385031215610e2157600080fd5b6000610e2f85828601610d91565b9250506020610e4085828601610d7c565b9150509250929050565b600060208284031215610e5c57600080fd5b6000610e6a84828501610da6565b91505092915050565b60008060008060808587031215610e8957600080fd5b6000610e9787828801610dd0565b9450506020610ea887828801610dbb565b9350506040610eb987828801610dd0565b9250506060610eca87828801610dd0565b91505092959194509250565b60008060008060808587031215610eec57600080fd5b6000610efa87828801610dd0565b9450506020610f0b87828801610dd0565b9350506040610f1c87828801610dd0565b9250506060610f2d87828801610dd0565b91505092959194509250565b600080600080600060a08688031215610f5157600080fd5b6000610f5f88828901610dd0565b9550506020610f7088828901610dd0565b9450506040610f8188828901610dd0565b9350506060610f9288828901610dd0565b9250506080610fa388828901610dd0565b9150509295509295909350565b610fb98161143b565b82525050565b610fc881611447565b82525050565b610fd7816114c4565b82525050565b610fe681611490565b82525050565b6000610ff782611259565b6110018185611264565b93506110118185602086016114d6565b61101a816115c0565b840191505092915050565b600061103082611259565b61103a8185611275565b935061104a8185602086016114d6565b80840191505092915050565b6000611063602083611264565b915061106e826115d1565b602082019050919050565b6000611086601783611275565b9150611091826115fa565b601782019050919050565b60006110a9601183611275565b91506110b482611623565b601182019050919050565b60006110cc602f83611264565b91506110d78261164c565b604082019050919050565b6110eb816114ba565b82525050565b60006110fc82611079565b91506111088285611025565b91506111138261109c565b915061111f8284611025565b91508190509392505050565b60006020820190506111406000830184610fb0565b92915050565b600060208201905061115b6000830184610fbf565b92915050565b60006020820190506111766000830184610fce565b92915050565b60006020820190506111916000830184610fdd565b92915050565b600060208201905081810360008301526111b18184610fec565b905092915050565b600060208201905081810360008301526111d281611056565b9050919050565b600060208201905081810360008301526111f2816110bf565b9050919050565b600060208201905061120e60008301846110e2565b92915050565b600060808201905061122960008301876110e2565b6112366020830186610fdd565b61124360408301856110e2565b61125060608301846110e2565b95945050505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061128b82611490565b915061129683611490565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156112d1576112d0611533565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561130957611308611533565b5b828201905092915050565b600061131f826114ba565b915061132a836114ba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561135f5761135e611533565b5b828201905092915050565b6000611375826114ba565b9150611380836114ba565b9250826113905761138f611562565b5b828204905092915050565b60006113a6826114ba565b91506113b1836114ba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113ea576113e9611533565b5b828202905092915050565b6000611400826114ba565b915061140b836114ba565b92508282101561141e5761141d611533565b5b828203905092915050565b60006114348261149a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061148b8261169b565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114cf8261147d565b9050919050565b60005b838110156114f45780820151818401526020810190506114d9565b83811115611503576000848401525b50505050565b6000611514826114ba565b9150600082141561152857611527611533565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c81106116ac576116ab611591565b5b50565b6116b881611429565b81146116c357600080fd5b50565b6116cf81611447565b81146116da57600080fd5b50565b6116e681611451565b81146116f157600080fd5b50565b6116fd81611490565b811461170857600080fd5b50565b611714816114ba565b811461171f57600080fd5b5056fea264697066735822122075b2e5fe68bb165a363c52e30110ebdb2065810bffe8e93c4bcaeb812d10152164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getParameters()": {
        "returns": {
          "_0": "parameters (curveA, curveB, maxUtilizationRate, penaltyRate)"
        }
      },
      "getRateToBorrow(uint256,uint256,uint256,uint256,uint256)": {
        "details": "liquidity limits aren't checked, that's the responsibility of pool.takeMoney.",
        "params": {
          "borrowedMP": "total borrowed from this maturity",
          "currentDate": "the curent block timestamp. Recieved from caller for easier testing",
          "maturityDate": "maturity date for calculating days left to maturity",
          "smartPoolLiquidityShare": "'fair' share of the smart pool that this maturity can borrow",
          "suppliedMP": "total supplied to this maturity"
        },
        "returns": {
          "_0": "rate to be applied to the amount to calculate the fee that the borrower will         have to pay"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getYieldForDeposit(uint256,uint256,uint256,uint256)": {
        "details": "Calculate the amount of revenue sharing between the smart pool and the new MP depositor.",
        "params": {
          "amount": "amount being provided by the MP depositor",
          "suppliedSP": "amount of money currently being supplied in the maturity pool",
          "unassignedEarnings": "earnings not yet accrued to the SP that should be shared with the        current depositor"
        },
        "returns": {
          "earningsShare": ": yield to be given to the MP depositor"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setParameters(uint256,int256,uint256,uint256)": {
        "details": "Function to update this model's parameters (DEFAULT_ADMIN_ROLE)",
        "params": {
          "_curveParameterA": "curve parameter",
          "_curveParameterB": "curve parameter",
          "_maxUtilizationRate": "% of MP supp",
          "_penaltyRate": "by-second rate charged on late repays, with 18 decimals"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getParameters()": {
        "notice": "gets this model's parameters"
      },
      "getRateToBorrow(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Get current rate for borrow a certain amount in a certain maturity      with supply/demand values in the maturity pool and supply demand values      in the smart pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6650,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "curveParameterA",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6652,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "curveParameterB",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 6654,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "maxUtilizationRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6657,
        "contract": "contracts/InterestRateModel.sol:InterestRateModel",
        "label": "penaltyRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/InterestRateModel.sol:InterestRateModel",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}