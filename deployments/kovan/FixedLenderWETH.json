{
  "address": "0xAEDeB1b9d9Fa2BE5b016d85E23cFe7474F8b5D69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_underlyingTokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_eTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_auditorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateModelAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "alternativeState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolStateMultiple",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "AddReserves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "BorrowFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "DepositToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToSmartPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCovered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "RepayToMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAmount",
          "type": "uint256"
        }
      ],
      "name": "SeizeAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromMaturityPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromSmartPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FUTURE_POOLS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountAllowed",
          "type": "uint256"
        }
      ],
      "name": "borrowFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountAllowed",
          "type": "uint256"
        }
      ],
      "name": "borrowFromMaturityPoolEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountRequired",
          "type": "uint256"
        }
      ],
      "name": "depositToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountRequired",
          "type": "uint256"
        }
      ],
      "name": "depositToMaturityPoolEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToSmartPoolEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eToken",
      "outputs": [
        {
          "internalType": "contract IEToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuditor",
      "outputs": [
        {
          "internalType": "contract IAuditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFuturePools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartPoolDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getTotalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IFixedLender",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpDepositDistributionWeighter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccounting",
      "outputs": [
        {
          "internalType": "contract IPoolAccounting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSpreadFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayToMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "repayToMaturityPoolEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeAmount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mpDepositDistributionWeighter",
          "type": "uint256"
        }
      ],
      "name": "setMpDepositDistributionWeighter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolSpreadFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolSpreadFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMpBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedUnderlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingTokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMaturityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMaturityPoolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSmartPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSmartPoolEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd20098a42cbce5f4669b802789de5aa26723da2b08fdb81f8e387b0363afbd55",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0xAEDeB1b9d9Fa2BE5b016d85E23cFe7474F8b5D69",
    "transactionIndex": 6,
    "gasUsed": "5024073",
    "logsBloom": "0x
    "blockHash": "0xbd54e35962e7b57926891ca866831fd4b34e4dde42b4166e8de753f90864614a",
    "transactionHash": "0xd20098a42cbce5f4669b802789de5aa26723da2b08fdb81f8e387b0363afbd55",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 30310073,
        "transactionHash": "0xd20098a42cbce5f4669b802789de5aa26723da2b08fdb81f8e387b0363afbd55",
        "address": "0xAEDeB1b9d9Fa2BE5b016d85E23cFe7474F8b5D69",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xbd54e35962e7b57926891ca866831fd4b34e4dde42b4166e8de753f90864614a"
      }
    ],
    "blockNumber": 30310073,
    "cumulativeGasUsed": "5257418",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0a1e359811322d97991e03f863a0c30c2cf029c",
    "WETH",
    "0xF52F1358B522c1ca4c03CDf49c9FC9436beC5482",
    "0x6c12C61d9227F5315Bc4436E68121D9073961681",
    "0xEDc7C7E89e7f79Ddc7d6f04c31Fd57208af672C3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_underlyingTokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_eTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auditorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateModelAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alternativeState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolStateMultiple\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"AddReserves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"BorrowFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"DepositToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToSmartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"RepayToMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAmount\",\"type\":\"uint256\"}],\"name\":\"SeizeAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromMaturityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromSmartPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUTURE_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"borrowFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"borrowFromMaturityPoolEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountRequired\",\"type\":\"uint256\"}],\"name\":\"depositToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountRequired\",\"type\":\"uint256\"}],\"name\":\"depositToMaturityPoolEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToSmartPoolEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eToken\",\"outputs\":[{\"internalType\":\"contract IEToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuditor\",\"outputs\":[{\"internalType\":\"contract IAuditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFuturePools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartPoolDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getTotalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IFixedLender\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpDepositDistributionWeighter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccounting\",\"outputs\":[{\"internalType\":\"contract IPoolAccounting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSpreadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayToMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"repayToMaturityPoolEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeAmount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mpDepositDistributionWeighter\",\"type\":\"uint256\"}],\"name\":\"setMpDepositDistributionWeighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolSpreadFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolSpreadFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMpBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedUnderlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMaturityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMaturityPoolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSmartPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSmartPoolEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrowFromMaturityPool(uint256,uint256,uint256)\":{\"details\":\"Lends to a wallet for a certain maturity date/pool\",\"params\":{\"amount\":\"amount to send to the msg.sender\",\"maturityDate\":\"maturity date for repayment\",\"maxAmountAllowed\":\"maximum amount of debt that        the user is willing to accept for the transaction        to go through\"}},\"depositToMaturityPool(uint256,uint256,uint256)\":{\"details\":\"Deposits a certain amount to the protocol for      a certain maturity date/pool\",\"params\":{\"amount\":\"amount to receive from the msg.sender\",\"maturityDate\":\"maturity date / pool ID\",\"minAmountRequired\":\"minimum amount of capital required        by the depositor for the transaction to be accepted\"}},\"depositToSmartPool(uint256)\":{\"details\":\"Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC\",\"params\":{\"amount\":\"The amount to be deposited\"}},\"getAccountSnapshot(address,uint256)\":{\"details\":\"Gets current snapshot for a wallet in certain maturity\",\"params\":{\"maturityDate\":\"maturityDate - Send the value 0 in order to get the snapshot for all maturities where the user borrowed\",\"who\":\"wallet to return status snapshot in the specified maturity date\"},\"returns\":{\"_0\":\"the amount the user deposited to the smart pool and the total money he owes from maturities\"}},\"getAuditor()\":{\"details\":\"Gets the auditor contract interface being used to validate positions\"},\"getFuturePools()\":{\"details\":\"Function to retrieve valid future pools\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSmartPoolDeposits()\":{\"details\":\"Gets the market size of the smart pool, usefull for dApps to show current status\"},\"getTotalMpBorrows(uint256)\":{\"details\":\"Gets the total amount of borrowed money for a maturityDate\",\"params\":{\"maturityDate\":\"maturity date\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidate(address,uint256,address,uint256)\":{\"details\":\"Msg.sender liquidates a borrower's position and repays a certain amount of debt      for a maturity date, seizing a part of borrower's collateral\",\"params\":{\"borrower\":\"wallet that has an outstanding debt for a certain maturity date\",\"fixedLenderCollateral\":\"address of fixedLender from which the collateral will be seized to give the liquidator\",\"maturityDate\":\"maturity date for which the position will be liquidated\",\"repayAmount\":\"amount to be repaid by liquidator(msg.sender)\"}},\"pause()\":{\"details\":\"Sets the _pause state to true in case of emergency, triggered by an authorized account\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to repay to should be matured\",\"params\":{\"borrower\":\"The address of the account that has the debt\",\"maturityDate\":\"The matured date where the debt is located\",\"repayAmount\":\"amount to be paid for the borrower's debt\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seize(address,address,uint256)\":{\"details\":\"Public function for liquidator to seize borrowers tokens in the smart pool.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)\",\"params\":{\"borrower\":\"address from which the tokens will be seized\",\"liquidator\":\"address which will receive the seized tokens\",\"seizeAmount\":\"amount to be removed from borrower's posession\"}},\"setMpDepositDistributionWeighter(uint256)\":{\"details\":\"Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order      to share out more or less unassigned earnings to that deposit\",\"params\":{\"_mpDepositDistributionWeighter\":\"percentage amount represented with 1e18 decimals that will multiply the amount to deposit\"}},\"setProtocolLiquidationFee(uint256)\":{\"details\":\"Sets the protocol's collateral liquidation fee used on liquidations\",\"params\":{\"_protocolLiquidationFee\":\"percentage amount represented with 1e18 decimals\"}},\"setProtocolSpreadFee(uint256)\":{\"details\":\"Sets the protocol's spread fee used on loan repayment\",\"params\":{\"_protocolSpreadFee\":\"percentage amount represented with 1e18 decimals\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Sets the _pause state to false when threat is gone, triggered by an authorized account\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"details\":\"The pool that the user is trying to retrieve the money should be matured\",\"params\":{\"maturityDate\":\"The matured date for which we're trying to retrieve the funds\",\"redeemAmount\":\"The number of underlying tokens to receive\",\"redeemer\":\"The address of the account which is redeeming the tokens\"}},\"withdrawFromSmartPool(uint256)\":{\"details\":\"Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\",\"params\":{\"amount\":\"The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance\"}},\"withdrawFromTreasury(address,uint256)\":{\"params\":{\"amount\":\"amount to be transferred\",\"who\":\"address which will receive the funds\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AddReserves(address,uint256)\":{\"notice\":\"Event emitted reserves have been added to the protocol\"},\"BorrowFromMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user borrows amount of an asset from a         certain maturity date\"},\"DepositToMaturityPool(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a fee at the end of the         period\"},\"DepositToSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"},\"LiquidateBorrow(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user's position had a liquidation\"},\"RepayToMaturityPool(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a user repays its borrows after maturity\"},\"SeizeAsset(address,address,uint256)\":{\"notice\":\"Event emitted when a user's collateral has been seized\"},\"WithdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user collects its deposits after maturity\"},\"WithdrawFromSmartPool(address,uint256)\":{\"notice\":\"Event emitted when a user contributed to the smart pool\"}},\"kind\":\"user\",\"methods\":{\"liquidate(address,uint256,address,uint256)\":{\"notice\":\"Function to liquidate an uncollaterized position\"},\"repayToMaturityPool(address,uint256,uint256)\":{\"notice\":\"Sender repays an amount of borrower's debt for a maturity date\"},\"seize(address,address,uint256)\":{\"notice\":\"Public function to seize a certain amount of tokens\"},\"withdrawFromMaturityPool(address,uint256,uint256)\":{\"notice\":\"User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date\"},\"withdrawFromTreasury(address,uint256)\":{\"notice\":\"public function to transfer funds from protocol earnings to a specified wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETHFixedLender.sol\":\"ETHFixedLender\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/ETHFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./FixedLender.sol\\\";\\nimport \\\"./external/WETH9.sol\\\";\\n\\ncontract ETHFixedLender is FixedLender {\\n    bool private wrapOnOurSide;\\n    WETH9 private weth;\\n\\n    modifier usingETH() {\\n        wrapOnOurSide = true;\\n        _;\\n        wrapOnOurSide = false;\\n    }\\n\\n    constructor(\\n        address payable _tokenAddress,\\n        string memory _underlyingTokenName,\\n        address _eTokenAddress,\\n        address _auditorAddress,\\n        address _interestRateModelAddress\\n    )\\n        FixedLender(\\n            _tokenAddress,\\n            _underlyingTokenName,\\n            _eTokenAddress,\\n            _auditorAddress,\\n            _interestRateModelAddress\\n        )\\n    {\\n        // just to be explicit uwu I know it is zero/falsy by default\\n        wrapOnOurSide = false;\\n        weth = WETH9(_tokenAddress);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function borrowFromMaturityPoolEth(\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) external payable usingETH {\\n        borrowFromMaturityPool(msg.value, maturityDate, maxAmountAllowed);\\n    }\\n\\n    function depositToMaturityPoolEth(\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) external payable usingETH {\\n        depositToMaturityPool(msg.value, maturityDate, minAmountRequired);\\n    }\\n\\n    function depositToSmartPoolEth() external payable usingETH {\\n        depositToSmartPool(msg.value);\\n    }\\n\\n    function withdrawFromSmartPoolEth(uint256 amount) external usingETH {\\n        withdrawFromSmartPool(amount);\\n    }\\n\\n    function withdrawFromMaturityPoolEth(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external usingETH {\\n        withdrawFromMaturityPool(redeemer, redeemAmount, maturityDate);\\n    }\\n\\n    function repayToMaturityPoolEth(address borrower, uint256 maturityDate)\\n        external\\n        payable\\n        usingETH\\n    {\\n        repayToMaturityPool(borrower, maturityDate, msg.value);\\n    }\\n\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        if (wrapOnOurSide) {\\n            // giving it some tought, we kind of can trust WETH9 to mint\\n            // exactly the requested amount. But I'll leave this here for now\\n            uint256 balanceBefore = trustedUnderlying.balanceOf(address(this));\\n            weth.deposit{value: msg.value}();\\n            uint256 balanceAfter = trustedUnderlying.balanceOf(address(this));\\n\\n            return balanceAfter - balanceBefore;\\n        } else {\\n            return super.doTransferIn(from, amount);\\n        }\\n    }\\n\\n    function doTransferOut(address to, uint256 amount) internal override {\\n        if (wrapOnOurSide) {\\n            weth.withdraw(amount);\\n            payable(to).transfer(amount);\\n        } else {\\n            super.doTransferOut(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd29cf15cc8abc2df05975774e48722d45cb7c5f6b088afae7061419befc92a5f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/EToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\n\\ncontract EToken is IEToken, AccessControl {\\n    using DecimalMath for uint256;\\n\\n    // totalSupply = smart pool's balance\\n    uint256 public override totalSupply;\\n    // index = totalSupply / totalScaledBalance\\n    uint256 private totalScaledBalance;\\n    // userBalance = userScaledBalance * index\\n    mapping(address => uint256) private userScaledBalance;\\n    mapping(address => uint256) private lastBalanceIncrease;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    string public override name;\\n    string public override symbol;\\n    uint8 public override decimals;\\n\\n    IFixedLender public fixedLender;\\n    IAuditor public auditor;\\n\\n    modifier onlyFixedLender() {\\n        if (msg.sender != address(fixedLender)) {\\n            revert GenericError(ErrorCode.CALLER_MUST_BE_FIXED_LENDER);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        uint256 scaledBalance = amount;\\n        if (totalSupply != 0) {\\n            scaledBalance = (scaledBalance * totalScaledBalance) / totalSupply;\\n        }\\n\\n        userScaledBalance[user] += scaledBalance;\\n        totalScaledBalance += scaledBalance;\\n        totalSupply += amount;\\n        lastBalanceIncrease[user] = block.number;\\n\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external override onlyFixedLender {\\n        totalSupply += amount;\\n        emit EarningsAccrued(amount);\\n    }\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount)\\n        external\\n        override\\n        onlyFixedLender\\n    {\\n        require(user != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        if (lastBalanceIncrease[user] >= block.number) {\\n            revert GenericError(ErrorCode.SMART_POOL_FUNDS_LOCKED);\\n        }\\n\\n        require(\\n            balanceOf(user) >= amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n\\n        uint256 scaledWithdrawAmount = (amount * totalScaledBalance) /\\n            totalSupply;\\n\\n        totalScaledBalance -= scaledWithdrawAmount;\\n        userScaledBalance[user] -= scaledWithdrawAmount;\\n        totalSupply -= amount;\\n\\n        emit Transfer(user, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Initializes the eToken setting the FixedLender and Auditor addresses\\n     * - Only able to initialize once\\n     * @param fixedLenderAddress The address of the FixedLender that uses this eToken\\n     * @param auditorAddress The address of the Auditor\\n     */\\n    function initialize(address fixedLenderAddress, address auditorAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (\\n            address(fixedLender) != address(0) && address(auditor) != address(0)\\n        ) {\\n            revert GenericError(ErrorCode.CONTRACT_ALREADY_INITIALIZED);\\n        }\\n        fixedLender = IFixedLender(fixedLenderAddress);\\n        auditor = IAuditor(auditorAddress);\\n\\n        emit Initialized(fixedLenderAddress, auditorAddress);\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of tokens from msg.sender to recipient\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\\n     * @param sender The owner of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     * @return `true` if the transfer succeeds, reverts otherwise\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows `spender` to spend the tokens owned by msg.sender\\n     * @param spender The user allowed to spend msg.sender tokens\\n     * @param amount The amount of tokens spender is allowed to spend\\n     * @return `true` if the reverts succeeds, reverts otherwise\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true` if the increase allowance succeeds, reverts otherwise\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance of spender to spend msg.sender tokens\\n     * @param spender The user allowed to spend on behalf of msg.sender\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true` if the decrease allowance succeeds, reverts otherwise\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param account The user whose balance is calculated\\n     * @return The balance of the user\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (userScaledBalance[account] == 0) {\\n            return 0;\\n        }\\n\\n        return (userScaledBalance[account] * totalSupply) / totalScaledBalance;\\n    }\\n\\n    /**\\n     * @dev Returns the allowance of spender on the tokens owned by owner\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend the owner's tokens\\n     * @return The amount of owner's tokens spender is allowed to spend\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     * @param sender The sender of the tokens\\n     * @param recipient The recipient of the tokens\\n     * @param amount The amount of tokens being transferred\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        // reverts on failure\\n        auditor.validateAccountShortfall(address(fixedLender), sender, amount);\\n\\n        uint256 senderRemainingBalance = senderBalance - amount;\\n        userScaledBalance[sender] =\\n            (senderRemainingBalance * totalScaledBalance) /\\n            totalSupply;\\n        userScaledBalance[recipient] =\\n            ((balanceOf(recipient) + amount) * totalScaledBalance) /\\n            totalSupply;\\n        lastBalanceIncrease[recipient] = block.number;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     * @param owner The owner of the tokens\\n     * @param spender The user allowed to spend owner tokens\\n     * @param amount The amount of owner's tokens spender is allowed to spend\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb2154e4fd7f6978fc44995eab630cc4a7c107c30605a24cdedf414f706c87707\",\"license\":\"GPL-3.0-or-later\"},\"contracts/FixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./EToken.sol\\\";\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IEToken.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IPoolAccounting.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\ncontract FixedLender is IFixedLender, ReentrancyGuard, AccessControl, Pausable {\\n    using DecimalMath for uint256;\\n\\n    uint256 public protocolSpreadFee = 2.8e16; // 2.8%\\n    uint256 public protocolLiquidationFee = 2.8e16; // 2.8%\\n    uint256 public override mpDepositDistributionWeighter = 1e18; // 100%\\n    uint8 public constant MAX_FUTURE_POOLS = 12; // if every 14 days, then 6 months\\n    uint256 public treasury;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    IERC20 public override trustedUnderlying;\\n    IEToken public override eToken;\\n    string public override underlyingTokenName;\\n    IPoolAccounting public poolAccounting;\\n\\n    IAuditor public auditor;\\n\\n    // Total borrows in all maturities\\n    uint256 public override totalMpBorrows;\\n\\n    /**\\n     * @notice Event emitted when a user borrows amount of an asset from a\\n     *         certain maturity date\\n     * @param to address which borrowed the asset\\n     * @param amount of the asset that it was borrowed\\n     * @param fee amount extra that it will need to be paid at maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will have\\n     *                     to repay the loan\\n     */\\n    event BorrowFromMaturityPool(\\n        address indexed to,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user deposits an amount of an asset to a\\n     *         certain maturity date collecting a fee at the end of the\\n     *         period\\n     * @param from address which deposited the asset\\n     * @param amount of the asset that it was deposited\\n     * @param fee is the extra amount that it will be collected at maturity\\n     * @param maturityDate dateID/poolID/maturity in which the user will be able\\n     *                     to collect his deposit + his fee\\n     */\\n    event DepositToMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user collects its deposits after maturity\\n     * @param from address which will be collecting the asset\\n     * @param amount of the asset that it was deposited\\n     * @param maturityDate poolID where the user collected its deposits\\n     */\\n    event WithdrawFromMaturityPool(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user repays its borrows after maturity\\n     * @param payer address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param repayAmount amount that was repaid\\n     * @param debtCovered amount of the debt that was covered in this repayment (penalties could have been repaid)\\n     * @param maturityDate poolID where the user repaid its borrowed amounts\\n     */\\n    event RepayToMaturityPool(\\n        address indexed payer,\\n        address indexed borrower,\\n        uint256 repayAmount,\\n        uint256 debtCovered,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's position had a liquidation\\n     * @param liquidator address which repaid the previously borrowed amount\\n     * @param borrower address which had the original debt\\n     * @param repayAmount amount of the asset that it was repaid\\n     * @param fixedLenderCollateral address of the asset that it was seized\\n     *                              by the liquidator\\n     * @param seizedAmount amount seized of the collateral\\n     * @param maturityDate poolID where the borrower had an uncollaterized position\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        address fixedLenderCollateral,\\n        uint256 seizedAmount,\\n        uint256 maturityDate\\n    );\\n\\n    /**\\n     * @notice Event emitted when a user's collateral has been seized\\n     * @param liquidator address which seized this collateral\\n     * @param borrower address which had the original debt\\n     * @param seizedAmount amount seized of the collateral\\n     */\\n    event SeizeAsset(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizedAmount\\n    );\\n\\n    /**\\n     * @notice Event emitted reserves have been added to the protocol\\n     * @param benefactor address added a certain amount to its reserves\\n     * @param addAmount amount added as reserves as part of the liquidation event\\n     */\\n    event AddReserves(address benefactor, uint256 addAmount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that added a certain amount to the smart pool\\n     * @param amount amount added to the smart pool\\n     */\\n    event DepositToSmartPool(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when a user contributed to the smart pool\\n     * @param user address that withdrew a certain amount from the smart pool\\n     * @param amount amount withdrawn to the smart pool\\n     */\\n    event WithdrawFromSmartPool(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _tokenAddress,\\n        string memory _underlyingTokenName,\\n        address _eTokenAddress,\\n        address _auditorAddress,\\n        address _poolAccounting\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        trustedUnderlying = IERC20(_tokenAddress);\\n        underlyingTokenName = _underlyingTokenName;\\n\\n        auditor = IAuditor(_auditorAddress);\\n        eToken = IEToken(_eTokenAddress);\\n        poolAccounting = IPoolAccounting(_poolAccounting);\\n    }\\n\\n    /**\\n     * @dev Sets the protocol's spread fee used on loan repayment\\n     * @param _protocolSpreadFee percentage amount represented with 1e18 decimals\\n     */\\n    function setProtocolSpreadFee(uint256 _protocolSpreadFee)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        protocolSpreadFee = _protocolSpreadFee;\\n    }\\n\\n    /**\\n     * @dev Sets the protocol's collateral liquidation fee used on liquidations\\n     * @param _protocolLiquidationFee percentage amount represented with 1e18 decimals\\n     */\\n    function setProtocolLiquidationFee(uint256 _protocolLiquidationFee)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        protocolLiquidationFee = _protocolLiquidationFee;\\n    }\\n\\n    /**\\n     * @dev Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order\\n     *      to share out more or less unassigned earnings to that deposit\\n     * @param _mpDepositDistributionWeighter percentage amount represented with 1e18 decimals that will multiply the amount to deposit\\n     */\\n    function setMpDepositDistributionWeighter(\\n        uint256 _mpDepositDistributionWeighter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mpDepositDistributionWeighter = _mpDepositDistributionWeighter;\\n    }\\n\\n    /**\\n     * @dev Sets the _pause state to true in case of emergency, triggered by an authorized account\\n     */\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Sets the _pause state to false when threat is gone, triggered by an authorized account\\n     */\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /** @notice Function to liquidate an uncollaterized position\\n     * @dev Msg.sender liquidates a borrower's position and repays a certain amount of debt\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external override nonReentrant whenNotPaused returns (uint256) {\\n        return\\n            _liquidate(\\n                msg.sender,\\n                borrower,\\n                repayAmount,\\n                fixedLenderCollateral,\\n                maturityDate\\n            );\\n    }\\n\\n    /**\\n     * @notice Public function to seize a certain amount of tokens\\n     * @dev Public function for liquidator to seize borrowers tokens in the smart pool.\\n     *      This function will only be called from another FixedLender, on `liquidation` calls.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     */\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _seize(msg.sender, liquidator, borrower, seizeAmount);\\n    }\\n\\n    /**\\n     * @dev Function to retrieve valid future pools\\n     */\\n    function getFuturePools() external view returns (uint256[] memory) {\\n        return TSUtils.futurePools(MAX_FUTURE_POOLS);\\n    }\\n\\n    /**\\n     * @notice User collects a certain amount of underlying asset after having\\n     *         supplied tokens until a certain maturity date\\n     * @dev The pool that the user is trying to retrieve the money should be matured\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemAmount The number of underlying tokens to receive\\n     * @param maturityDate The matured date for which we're trying to retrieve the funds\\n     */\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) public override nonReentrant {\\n        if (redeemAmount == 0) {\\n            revert GenericError(ErrorCode.REDEEM_CANT_BE_ZERO);\\n        }\\n\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.MATURED,\\n            TSUtils.State.NONE\\n        );\\n\\n        poolAccounting.withdrawMP(\\n            maturityDate,\\n            redeemer,\\n            redeemAmount,\\n            eToken.totalSupply() / MAX_FUTURE_POOLS\\n        );\\n\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        emit WithdrawFromMaturityPool(redeemer, redeemAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @notice public function to transfer funds from protocol earnings to a specified wallet\\n     * @param who address which will receive the funds\\n     * @param amount amount to be transferred\\n     */\\n    function withdrawFromTreasury(address who, uint256 amount)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        treasury -= amount;\\n        SafeERC20.safeTransfer(trustedUnderlying, who, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned\\n     * - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC\\n     * @param amount The underlying amount to be withdrawn\\n     * - Send the value type(uint256).max in order to withdraw the whole eToken balance\\n     */\\n    function withdrawFromSmartPool(uint256 amount) public override {\\n        // reverts on failure\\n        auditor.validateAccountShortfall(address(this), msg.sender, amount);\\n\\n        uint256 userBalance = eToken.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n\\n        // We check if the underlying liquidity that the user wants to withdraw is borrowed\\n        if (\\n            eToken.totalSupply() - amountToWithdraw <\\n            poolAccounting.smartPoolBorrowed()\\n        ) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n\\n        eToken.burn(msg.sender, amountToWithdraw);\\n        doTransferOut(msg.sender, amountToWithdraw);\\n\\n        emit WithdrawFromSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Lends to a wallet for a certain maturity date/pool\\n     * @param amount amount to send to the msg.sender\\n     * @param maturityDate maturity date for repayment\\n     * @param maxAmountAllowed maximum amount of debt that\\n     *        the user is willing to accept for the transaction\\n     *        to go through\\n     */\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.NONE\\n        );\\n\\n        uint256 totalOwed = poolAccounting.borrowMP(\\n            maturityDate,\\n            msg.sender,\\n            amount,\\n            maxAmountAllowed,\\n            eToken.totalSupply(),\\n            MAX_FUTURE_POOLS\\n        );\\n        totalMpBorrows += totalOwed;\\n\\n        auditor.validateBorrowMP(address(this), msg.sender);\\n\\n        doTransferOut(msg.sender, amount);\\n\\n        emit BorrowFromMaturityPool(\\n            msg.sender,\\n            amount,\\n            totalOwed - amount, // fee\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposits a certain amount to the protocol for\\n     *      a certain maturity date/pool\\n     * @param amount amount to receive from the msg.sender\\n     * @param maturityDate maturity date / pool ID\\n     * @param minAmountRequired minimum amount of capital required\\n     *        by the depositor for the transaction to be accepted\\n     */\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.NONE\\n        );\\n\\n        amount = doTransferIn(msg.sender, amount);\\n\\n        uint256 currentTotalDeposit = poolAccounting.depositMP(\\n            maturityDate,\\n            msg.sender,\\n            amount,\\n            minAmountRequired\\n        );\\n\\n        emit DepositToMaturityPool(\\n            msg.sender,\\n            amount,\\n            currentTotalDeposit - amount,\\n            maturityDate\\n        );\\n    }\\n\\n    /**\\n     * @notice Sender repays an amount of borrower's debt for a maturity date\\n     * @dev The pool that the user is trying to repay to should be matured\\n     * @param borrower The address of the account that has the debt\\n     * @param maturityDate The matured date where the debt is located\\n     * @param repayAmount amount to be paid for the borrower's debt\\n     */\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) public override nonReentrant whenNotPaused {\\n        // reverts on failure\\n        TSUtils.validateRequiredPoolState(\\n            MAX_FUTURE_POOLS,\\n            maturityDate,\\n            TSUtils.State.VALID,\\n            TSUtils.State.MATURED\\n        );\\n\\n        _repay(msg.sender, borrower, repayAmount, maturityDate);\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 eUSDC\\n     * @param amount The amount to be deposited\\n     */\\n    function depositToSmartPool(uint256 amount) public override whenNotPaused {\\n        amount = doTransferIn(msg.sender, amount);\\n        eToken.mint(msg.sender, amount);\\n        emit DepositToSmartPool(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Gets the market size of the smart pool, usefull for dApps to show current status\\n     */\\n    function getSmartPoolDeposits() public view returns (uint256) {\\n        return eToken.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Gets the auditor contract interface being used to validate positions\\n     */\\n    function getAuditor() public view override returns (IAuditor) {\\n        return IAuditor(auditor);\\n    }\\n\\n    /**\\n     * @dev Gets current snapshot for a wallet in certain maturity\\n     * @param who wallet to return status snapshot in the specified maturity date\\n     * @param maturityDate maturityDate\\n     * - Send the value 0 in order to get the snapshot for all maturities where the user borrowed\\n     * @return the amount the user deposited to the smart pool and the total money he owes from maturities\\n     */\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            eToken.balanceOf(who),\\n            poolAccounting.getAccountBorrows(who, maturityDate)\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of borrowed money for a maturityDate\\n     * @param maturityDate maturity date\\n     */\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return poolAccounting.getTotalMpBorrows(maturityDate);\\n    }\\n\\n    /**\\n     * @notice This function allows to (partially) repay a position\\n     * @dev Internal repay function, it allows to partially pay debt and it\\n     *      should be called after `beforeRepayMP` or `liquidateAllowed`\\n     *      on the auditor\\n     * @param payer the address of the account that will pay the debt\\n     * @param borrower the address of the account that has the debt\\n     * @param repayAmount the amount of debt of the pool that should be paid\\n     * @param maturityDate the maturityDate to access the pool\\n     * @return the actual amount that it was transferred into the protocol\\n     */\\n    function _repay(\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        if (repayAmount == 0) {\\n            revert GenericError(ErrorCode.REPAY_ZERO);\\n        }\\n\\n        repayAmount = doTransferIn(payer, repayAmount);\\n\\n        (\\n            uint256 spareRepayAmount,\\n            uint256 debtCovered,\\n            uint256 fee,\\n            uint256 earningsRepay\\n        ) = poolAccounting.repayMP(maturityDate, borrower, repayAmount);\\n\\n        if (spareRepayAmount > 0) {\\n            doTransferOut(payer, spareRepayAmount);\\n        }\\n\\n        // We take a share of the spread of the protocol\\n        uint256 protocolShare = fee.mul_(protocolSpreadFee);\\n        treasury += protocolShare;\\n        eToken.accrueEarnings(fee - protocolShare + earningsRepay);\\n\\n        totalMpBorrows -= debtCovered;\\n\\n        emit RepayToMaturityPool(\\n            payer,\\n            borrower,\\n            repayAmount,\\n            debtCovered,\\n            maturityDate\\n        );\\n\\n        return repayAmount - spareRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Internal Function to liquidate an uncollaterized position\\n     * @dev Liquidator liquidates a borrower's position and repays a certain amount of collateral\\n     *      for a maturity date, seizing a part of borrower's collateral\\n     * @param borrower wallet that has an outstanding debt for a certain maturity date\\n     * @param repayAmount amount to be repaid by liquidator(msg.sender)\\n     * @param fixedLenderCollateral address of fixedLender from which the collateral will be seized to give the liquidator\\n     * @param maturityDate maturity date for which the position will be liquidated\\n     */\\n    function _liquidate(\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) internal returns (uint256) {\\n        // reverts on failure\\n        auditor.liquidateAllowed(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n\\n        repayAmount = _repay(liquidator, borrower, repayAmount, maturityDate);\\n\\n        // reverts on failure\\n        uint256 seizeTokens = auditor.liquidateCalculateSeizeAmount(\\n            address(this),\\n            address(fixedLenderCollateral),\\n            repayAmount\\n        );\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        (uint256 balance, ) = fixedLenderCollateral.getAccountSnapshot(\\n            borrower,\\n            maturityDate\\n        );\\n        if (balance < seizeTokens) {\\n            revert GenericError(ErrorCode.TOKENS_MORE_THAN_BALANCE);\\n        }\\n\\n        // If this is also the collateral\\n        // run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        // both revert on failure\\n        if (address(fixedLenderCollateral) == address(this)) {\\n            _seize(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            fixedLenderCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(\\n            liquidator,\\n            borrower,\\n            repayAmount,\\n            address(fixedLenderCollateral),\\n            seizeTokens,\\n            maturityDate\\n        );\\n\\n        return repayAmount;\\n    }\\n\\n    /**\\n     * @notice Private function to seize a certain amount of tokens\\n     * @dev Private function for liquidator to seize borrowers tokens in the smart pool.\\n     *      This function will only be called from this FixedLender, on `liquidation` or through `seize` calls from another FixedLender.\\n     *      That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n     * @param seizerFixedLender address which is calling the seize function (see `seize` public function)\\n     * @param liquidator address which will receive the seized tokens\\n     * @param borrower address from which the tokens will be seized\\n     * @param seizeAmount amount to be removed from borrower's posession\\n     */\\n    function _seize(\\n        address seizerFixedLender,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeAmount\\n    ) internal {\\n        // reverts on failure\\n        auditor.seizeAllowed(\\n            address(this),\\n            seizerFixedLender,\\n            liquidator,\\n            borrower\\n        );\\n\\n        uint256 protocolAmount = seizeAmount.mul_(protocolLiquidationFee);\\n        uint256 amountToTransfer = seizeAmount - protocolAmount;\\n        treasury += protocolAmount;\\n\\n        // We check if the underlying liquidity that the user wants to seize is borrowed\\n        if (\\n            eToken.totalSupply() - amountToTransfer <\\n            poolAccounting.smartPoolBorrowed()\\n        ) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_PROTOCOL_LIQUIDITY);\\n        }\\n\\n        // That seize amount diminishes liquidity in the pool\\n        eToken.burn(borrower, seizeAmount);\\n        doTransferOut(liquidator, amountToTransfer);\\n\\n        emit SeizeAsset(liquidator, borrower, seizeAmount);\\n        emit AddReserves(address(this), protocolAmount);\\n    }\\n\\n    /**\\n     * @notice Private function to safely transfer funds into this contract\\n     * @dev Some underlying token implementations can alter the transfer function to\\n     *      transfer less of the initial amount (ie: take a fee out).\\n     *      This function takes into account this scenario\\n     * @param from address which will transfer funds in (approve needed on underlying token)\\n     * @param amount amount to be transferred\\n     * @return amount actually transferred by the protocol\\n     */\\n    function doTransferIn(address from, uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 balanceBefore = trustedUnderlying.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(\\n            trustedUnderlying,\\n            from,\\n            address(this),\\n            amount\\n        );\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = trustedUnderlying.balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function doTransferOut(address to, uint256 amount) internal virtual {\\n        SafeERC20.safeTransfer(trustedUnderlying, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x35b1c57e02d240080f12ea3923e10fabe633ad604f13330c60102b831b4e805d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/external/WETH9.sol\":{\"content\":\"// solhint-disable\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract WETH9 is IERC20 {\\n    string public name = \\\"Wrapped Ether\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    event  Deposit(address indexed dst, uint wad);\\n    event  Withdrawal(address indexed src, uint wad);\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    function deposit() public payable {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 wad) public {\\n        require(balanceOf[msg.sender] >= wad);\\n        balanceOf[msg.sender] -= wad;\\n        payable(msg.sender).transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public override returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public override returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public override returns (bool) {\\n        require(balanceOf[src] >= wad);\\n\\n        if (\\n            src != msg.sender && allowance[src][msg.sender] != type(uint256).max\\n        ) {\\n            require(allowance[src][msg.sender] >= wad);\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdc8e44c7ba5b86f724b8f57a3a806e357b54c97aea55bcf63cf213d33e913421\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IAuditor {\\n    // this one validates post liquidity check\\n    function validateBorrowMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function validateAccountShortfall(\\n        address fixedLenderAddress,\\n        address account,\\n        uint256 amount\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xfeeaef06e0c471ebf447c7fa20fd3e5243cf792cdb15e1eeb52992fbef334539\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` and `auditor` are set\\n     * - The FixedLender is where the eToken is used\\n     * - The Auditor is called in every transfer\\n     */\\n    event Initialized(address indexed fixedLender, address indexed auditor);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x71ce614408fff79ac5f133fb257a0ac1df686f65c0cfdf8efb8d0682838da5b0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) external;\\n\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function withdrawFromTreasury(address who, uint256 amount) external;\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function mpDepositDistributionWeighter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x27005f060493f78101145dca8c6c56ffbe5f04684e7e1657cbcd1e18b6cd4749\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IInterestRateModel {\\n    function getRateToBorrow(\\n        uint256 maturityDate,\\n        uint256 currentDate,\\n        uint256 borrowedMP,\\n        uint256 suppliedMP,\\n        uint256 smartPoolLiquidityShare\\n    ) external view returns (uint256);\\n\\n    function penaltyRate() external view returns (uint256);\\n\\n    function getYieldForDeposit(\\n        uint256 suppliedSP,\\n        uint256 unassignedEarnings,\\n        uint256 amount,\\n        uint256 mpDepositDistributionWeighter\\n    ) external pure returns (uint256 earningsShare);\\n}\\n\",\"keccak256\":\"0xcc618fcafbde0babd3c00d0c22c161975ccdc4994dc4b778ebb9574ea8cf64d9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IPoolAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IPoolAccounting {\\n    function borrowMP(\\n        uint256 maturityDate,\\n        address borrower,\\n        uint256 amount,\\n        uint256 maxAmountAllowed,\\n        uint256 eTokenTotalSupply,\\n        uint8 maxFuturePools\\n    ) external returns (uint256);\\n\\n    function depositMP(\\n        uint256 maturityDate,\\n        address supplier,\\n        uint256 amount,\\n        uint256 minAmountRequired\\n    ) external returns (uint256);\\n\\n    function withdrawMP(\\n        uint256 maturityDate,\\n        address redeemer,\\n        uint256 amount,\\n        uint256 maxSPDebt\\n    ) external;\\n\\n    function repayMP(\\n        uint256 maturityDate,\\n        address borrower,\\n        uint256 repayAmount\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAccountBorrows(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function smartPoolBorrowed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2ef4cbb67edd2cdfaf431ae715ca8ade2aba7a4a5cf02c25f38d961505963b35\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        NONE,\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    error UnmatchedPoolState(uint8 state, uint8 requiredState);\\n    error UnmatchedPoolStateMultiple(\\n        uint8 state,\\n        uint8 requiredState,\\n        uint8 alternativeState\\n    );\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many seconds are left to a certain date\\n     * @param timestampFrom to calculate the difference in seconds from a date\\n     * @param timestampTo to calculate the difference in seconds to a date\\n     */\\n    function secondsPre(uint256 timestampFrom, uint256 timestampTo)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     * @param alternativeState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function validateRequiredPoolState(\\n        uint8 maxFuturePools,\\n        uint256 maturityDate,\\n        State requiredState,\\n        State alternativeState\\n    ) internal view {\\n        State poolState = getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n\\n        if (poolState != requiredState && poolState != alternativeState) {\\n            if (alternativeState == State.NONE) {\\n                revert UnmatchedPoolState(\\n                    uint8(poolState),\\n                    uint8(requiredState)\\n                );\\n            }\\n            revert UnmatchedPoolStateMultiple(\\n                uint8(poolState),\\n                uint8(requiredState),\\n                uint8(alternativeState)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     */\\n    function futurePools(uint8 maxFuturePools)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxFuturePools);\\n        uint256 timestamp = block.timestamp - (block.timestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxFuturePools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b88ac2787f2cd0a2d0b23d2ad94c49361127b3636ead1c7227aea5a03dc0b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c806368effd5c1161014f578063b2a02ff1116100c1578063da7524751161007a578063da75247514610908578063df67d01114610931578063e63ab1e91461094d578063eafecffa14610978578063ef94f7c5146109a3578063f60916b3146109cc5761027d565b8063b2a02ff11461080e578063b72ddee914610837578063b7f394c014610862578063bce100d31461088b578063c0107f81146108b4578063d547741f146108df5761027d565b8063891bb9a011610113578063891bb9a01461070957806391d148541461071357806391f3e472146107505780639457be231461077b578063953d9cf1146107b8578063a217fddf146107e35761027d565b806368effd5c1461063857806375b9f4181461066157806375d4b96f1461068c57806375e1d781146106b55780638456cb59146106f25761027d565b80633384c3bc116101e85780634bf2ee39116101ac5780634bf2ee391461052557806355a1ac2e146105505780635c975abb1461058e5780636135600f146105b957806361d027b3146105e257806362dd9f231461060d5761027d565b80633384c3bc1461046657806336568abe1461048f5780633ec045a6146104b85780633f4ba83a146104e3578063433b3596146104fa5761027d565b806315344f961161023a57806315344f96146103655780631ea8946d14610381578063248a9ca3146103ac57806325c346b6146103e957806327f1a884146104145780632f2ff15d1461043d5761027d565b806301ffc9a7146102825780630663af08146102bf57806307219b09146102e8578063086c9f1c146103135780630bda514e1461033c5761027d565b3661027d57005b600080fd5b34801561028e57600080fd5b506102a960048036038101906102a4919061422e565b6109e8565b6040516102b69190614906565b60405180910390f35b3480156102cb57600080fd5b506102e660048036038101906102e191906140b2565b610a62565b005b3480156102f457600080fd5b506102fd610ac2565b60405161030a91906148e4565b60405180910390f35b34801561031f57600080fd5b5061033a60048036038101906103359190614321565b610ad3565b005b34801561034857600080fd5b50610363600480360381019061035e9190614151565b610ca6565b005b61037f600480360381019061037a91906140b2565b610d65565b005b34801561038d57600080fd5b50610396610daa565b6040516103a39190614ae5565b60405180910390f35b3480156103b857600080fd5b506103d360048036038101906103ce91906141c9565b610db0565b6040516103e09190614921565b60405180910390f35b3480156103f557600080fd5b506103fe610dd0565b60405161040b9190614c82565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190614014565b610dd5565b005b34801561044957600080fd5b50610464600480360381019061045f91906141f2565b611021565b005b34801561047257600080fd5b5061048d60048036038101906104889190614257565b61104a565b005b34801561049b57600080fd5b506104b660048036038101906104b191906141f2565b61106a565b005b3480156104c457600080fd5b506104cd6110ed565b6040516104da919061493c565b60405180910390f35b3480156104ef57600080fd5b506104f8611113565b005b34801561050657600080fd5b5061050f611150565b60405161051c919061498d565b60405180910390f35b34801561053157600080fd5b5061053a611176565b6040516105479190614957565b60405180910390f35b34801561055c57600080fd5b50610577600480360381019061057291906140b2565b61119c565b604051610585929190614c22565b60405180910390f35b34801561059a57600080fd5b506105a3611302565b6040516105b09190614906565b60405180910390f35b3480156105c557600080fd5b506105e060048036038101906105db9190614257565b611319565b005b3480156105ee57600080fd5b506105f761144d565b6040516106049190614ae5565b60405180910390f35b34801561061957600080fd5b50610622611453565b60405161062f9190614ae5565b60405180910390f35b34801561064457600080fd5b5061065f600480360381019061065a9190614321565b611459565b005b34801561066d57600080fd5b50610676611776565b6040516106839190614ae5565b60405180910390f35b34801561069857600080fd5b506106b360048036038101906106ae9190614257565b61181d565b005b3480156106c157600080fd5b506106dc60048036038101906106d79190614257565b61183d565b6040516106e99190614ae5565b60405180910390f35b3480156106fe57600080fd5b506107076118f1565b005b61071161192e565b005b34801561071f57600080fd5b5061073a600480360381019061073591906141f2565b61196f565b6040516107479190614906565b60405180910390f35b34801561075c57600080fd5b506107656119da565b60405161077291906149c3565b60405180910390f35b34801561078757600080fd5b506107a2600480360381019061079d91906140ee565b611a68565b6040516107af9190614ae5565b60405180910390f35b3480156107c457600080fd5b506107cd611b1f565b6040516107da9190614972565b60405180910390f35b3480156107ef57600080fd5b506107f8611b45565b6040516108059190614921565b60405180910390f35b34801561081a57600080fd5b5061083560048036038101906108309190614063565b611b4c565b005b34801561084357600080fd5b5061084c611bfb565b604051610859919061493c565b60405180910390f35b34801561086e57600080fd5b5061088960048036038101906108849190614257565b611c25565b005b34801561089757600080fd5b506108b260048036038101906108ad9190614257565b61200f565b005b3480156108c057600080fd5b506108c961202f565b6040516108d69190614ae5565b60405180910390f35b3480156108eb57600080fd5b50610906600480360381019061090191906141f2565b612035565b005b34801561091457600080fd5b5061092f600480360381019061092a9190614014565b61205e565b005b61094b600480360381019061094691906142a9565b6120a4565b005b34801561095957600080fd5b506109626120e9565b60405161096f9190614921565b60405180910390f35b34801561098457600080fd5b5061098d61210d565b60405161099a9190614ae5565b60405180910390f35b3480156109af57600080fd5b506109ca60048036038101906109c59190614257565b612113565b005b6109e660048036038101906109e191906142a9565b612155565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a5b5750610a5a8261219a565b5b9050919050565b6000801b610a7781610a72612204565b61220c565b8160066000828254610a899190614e92565b92505081905550610abd600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846122a9565b505050565b6060610ace600c61232f565b905090565b60026000541415610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1090614aa5565b60405180910390fd5b6002600081905550610b29611302565b15610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6090614a45565b60405180910390fd5b610b78600c8360036000612454565b610b823384612770565b92506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd9c2ecb843387866040518563ffffffff1660e01b8152600401610be79493929190614b7c565b602060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190614280565b90503373ffffffffffffffffffffffffffffffffffffffff167fe983baebb65a77750c6277cf1d19a6a07b25a472b789a59005944cb59b91425a858684610c809190614e92565b86604051610c9093929190614c4b565b60405180910390a2506001600081905550505050565b60026000541415610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390614aa5565b60405180910390fd5b6002600081905550610cfc611302565b15610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3390614a45565b60405180910390fd5b610d4b600c8360036002612454565b610d5733848385612990565b506001600081905550505050565b6001600d60006101000a81548160ff021916908315150217905550610d8b828234610ca6565b6000600d60006101000a81548160ff0219169083151502179055505050565b60055481565b600060016000838152602001908152602001600020600101549050919050565b600c81565b60026000541415610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1290614aa5565b60405180910390fd5b60026000819055506000821415610e6a5760126040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610e6191906149a8565b60405180910390fd5b610e79600c8260026000612454565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632ee436a1828585600c60ff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2757600080fd5b505afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190614280565b610f699190614dc9565b6040518563ffffffff1660e01b8152600401610f889493929190614b00565b600060405180830381600087803b158015610fa257600080fd5b505af1158015610fb6573d6000803e3d6000fd5b50505050610fc48383612c29565b8273ffffffffffffffffffffffffffffffffffffffff167fac44b7cd8d864cbf99c4acc9c9787f54f5a4ac089349fecf3de4ce2ddff7b7bb838360405161100c929190614c22565b60405180910390a26001600081905550505050565b61102a82610db0565b61103b81611036612204565b61220c565b6110458383612d26565b505050565b6000801b61105f8161105a612204565b61220c565b816003819055505050565b611072612204565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d690614ac5565b60405180910390fd5b6110e98282612e06565b5050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61114581611140612204565b61220c565b61114d612ee8565b50565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016111fa9190614747565b60206040518083038186803b15801561121257600080fd5b505afa158015611226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124a9190614280565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b0a67fe86866040518363ffffffff1660e01b81526004016112a79291906148bb565b60206040518083038186803b1580156112bf57600080fd5b505afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f79190614280565b915091509250929050565b6000600260009054906101000a900460ff16905090565b611321611302565b15611361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135890614a45565b60405180910390fd5b61136b3382612770565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016113ca9291906148bb565b600060405180830381600087803b1580156113e457600080fd5b505af11580156113f8573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fd5656bd5348ef71585f018f0e1310274a6c223cc991afb5c5c2ee9f42313ad44826040516114429190614ae5565b60405180910390a250565b60065481565b60035481565b6002600054141561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690614aa5565b60405180910390fd5b60026000819055506114af611302565b156114ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e690614a45565b60405180910390fd5b6114fe600c8360036000612454565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb0b8a5584338786600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e29190614280565b600c6040518763ffffffff1660e01b815260040161160596959493929190614bc1565b602060405180830381600087803b15801561161f57600080fd5b505af1158015611633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116579190614280565b905080600c600082825461166b9190614d73565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663144348d530336040518363ffffffff1660e01b81526004016116cf929190614762565b600060405180830381600087803b1580156116e957600080fd5b505af11580156116fd573d6000803e3d6000fd5b5050505061170b3385612c29565b3373ffffffffffffffffffffffffffffffffffffffff167fee72e8c8b6eca9a0d0d7e3769f539ba283595748fe87a842d8d64d5d825173a88586846117509190614e92565b8660405161176093929190614c4b565b60405180910390a2506001600081905550505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e057600080fd5b505afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190614280565b905090565b6000801b6118328161182d612204565b61220c565b816005819055505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375e1d781836040518263ffffffff1660e01b815260040161189a9190614ae5565b60206040518083038186803b1580156118b257600080fd5b505afa1580156118c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ea9190614280565b9050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6119238161191e612204565b61220c565b61192b612f8a565b50565b6001600d60006101000a81548160ff02191690831515021790555061195234611319565b6000600d60006101000a81548160ff021916908315150217905550565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600980546119e7906150cd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a13906150cd565b8015611a605780601f10611a3557610100808354040283529160200191611a60565b820191906000526020600020905b815481529060010190602001808311611a4357829003601f168201915b505050505081565b600060026000541415611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790614aa5565b60405180910390fd5b6002600081905550611ac0611302565b15611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af790614a45565b60405180910390fd5b611b0d338686868661302d565b90506001600081905550949350505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b81565b60026000541415611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8990614aa5565b60405180910390fd5b6002600081905550611ba2611302565b15611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd990614a45565b60405180910390fd5b611bee3384848461335c565b6001600081905550505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbda20e3033846040518463ffffffff1660e01b8152600401611c8493929190614823565b60006040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611d119190614747565b60206040518083038186803b158015611d2957600080fd5b505afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d619190614280565b905060008290507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415611d94578190505b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b158015611dfc57600080fd5b505afa158015611e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e349190614280565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9d57600080fd5b505afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190614280565b611edf9190614e92565b1015611f235760166040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611f1a91906149a8565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b8152600401611f809291906148bb565b600060405180830381600087803b158015611f9a57600080fd5b505af1158015611fae573d6000803e3d6000fd5b50505050611fbc3382612c29565b3373ffffffffffffffffffffffffffffffffffffffff167f2326675290def598d0fd820ee11f06c58c01b80230ab369044cf0b17dbfdc57f846040516120029190614ae5565b60405180910390a2505050565b6000801b6120248161201f612204565b61220c565b816004819055505050565b600c5481565b61203e82610db0565b61204f8161204a612204565b61220c565b6120598383612e06565b505050565b6001600d60006101000a81548160ff021916908315150217905550612084838383610dd5565b6000600d60006101000a81548160ff021916908315150217905550505050565b6001600d60006101000a81548160ff0219169083151502179055506120ca348383611459565b6000600d60006101000a81548160ff0219169083151502179055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60045481565b6001600d60006101000a81548160ff02191690831515021790555061213781611c25565b6000600d60006101000a81548160ff02191690831515021790555050565b6001600d60006101000a81548160ff02191690831515021790555061217b348383610ad3565b6000600d60006101000a81548160ff0219169083151502179055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b612216828261196f565b6122a55761223b8173ffffffffffffffffffffffffffffffffffffffff1660146136d3565b6122498360001c60206136d3565b60405160200161225a92919061470d565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229c91906149c3565b60405180910390fd5b5050565b61232a8363a9059cbb60e01b84846040516024016122c89291906148bb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506139cd565b505050565b606060008260ff1667ffffffffffffffff811115612376577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156123a45781602001602082028036833780820191505090505b509050600062093a8063ffffffff16426123be9190615148565b426123c99190614e92565b905060005b8460ff168110156124495762093a8063ffffffff16826123ee9190614d73565b91508183828151811061242a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080612441906150ff565b9150506123ce565b508192505050919050565b6000612461428587613a94565b905082600481111561249c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156124d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141580156125535750816004811115612517577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612550577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14155b156127695760006004811115612592577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260048111156125cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156126805780600481111561260a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b836004811115612643577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f34e2603a000000000000000000000000000000000000000000000000000000008152600401612677929190614c9d565b60405180910390fd5b8060048111156126b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8360048111156126f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b83600481111561272b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040517f537c4e5100000000000000000000000000000000000000000000000000000000815260040161276093929190614cc6565b60405180910390fd5b5050505050565b6000600d60009054906101000a900460ff161561297d576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016127e49190614747565b60206040518083038186803b1580156127fc57600080fd5b505afa158015612810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128349190614280565b9050600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128a057600080fd5b505af11580156128b4573d6000803e3d6000fd5b50505050506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129169190614747565b60206040518083038186803b15801561292e57600080fd5b505afa158015612942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129669190614280565b905081816129749190614e92565b9250505061298a565b6129878383613b30565b90505b92915050565b6000808314156129d85760096040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016129cf91906149a8565b60405180910390fd5b6129e28584612770565b9250600080600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372cd230b878a8a6040518463ffffffff1660e01b8152600401612a4993929190614b45565b608060405180830381600087803b158015612a6357600080fd5b505af1158015612a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9b9190614370565b93509350935093506000841115612ab757612ab68985612c29565b5b6000612ace60035484613cd390919063ffffffff16565b90508060066000828254612ae29190614d73565b92505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638fa467c4838386612b349190614e92565b612b3e9190614d73565b6040518263ffffffff1660e01b8152600401612b5a9190614ae5565b600060405180830381600087803b158015612b7457600080fd5b505af1158015612b88573d6000803e3d6000fd5b5050505083600c6000828254612b9e9190614e92565b925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f29c098a0b2f51718bfec23f9b7f06f8d3a257d44b55f33fb0ccf606e7104820c8a878b604051612c0693929190614c4b565b60405180910390a38488612c1a9190614e92565b95505050505050949350505050565b600d60009054906101000a900460ff1615612d1757600d60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401612c999190614ae5565b600060405180830381600087803b158015612cb357600080fd5b505af1158015612cc7573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612d11573d6000803e3d6000fd5b50612d22565b612d218282613cfc565b5b5050565b612d30828261196f565b612e0257600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612da7612204565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612e10828261196f565b15612ee45760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e89612204565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b612ef0611302565b612f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2690614a05565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f73612204565b604051612f809190614747565b60405180910390a1565b612f92611302565b15612fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fc990614a45565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613016612204565b6040516130239190614747565b60405180910390a1565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d0aef8d30858989896040518663ffffffff1660e01b81526004016130929594939291906147d0565b60006040518083038186803b1580156130aa57600080fd5b505afa1580156130be573d6000803e3d6000fd5b505050506130ce86868685612990565b93506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635efadbd13086886040518463ffffffff1660e01b815260040161313193929190614823565b60206040518083038186803b15801561314957600080fd5b505afa15801561315d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131819190614280565b905060008473ffffffffffffffffffffffffffffffffffffffff166355a1ac2e88866040518363ffffffff1660e01b81526004016131c09291906148bb565b604080518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f91906142e5565b5090508181101561325857600a6040517fede8a59900000000000000000000000000000000000000000000000000000000815260040161324f91906149a8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561329d576132983089898561335c565b61330d565b8473ffffffffffffffffffffffffffffffffffffffff1663b2a02ff18989856040518463ffffffff1660e01b81526004016132da93929190614823565b600060405180830381600087803b1580156132f457600080fd5b505af1158015613308573d6000803e3d6000fd5b505050505b7f9e76a01ba2e51393f58ccc22c0afc9520815e0cc3f301f7b5d7442fcaee9fdc18888888886896040516133469695949392919061485a565b60405180910390a1859250505095945050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eafe967b308686866040518563ffffffff1660e01b81526004016133bd949392919061478b565b60006040518083038186803b1580156133d557600080fd5b505afa1580156133e9573d6000803e3d6000fd5b50505050600061340460045483613cd390919063ffffffff16565b9050600081836134149190614e92565b905081600660008282546134289190614d73565b92505081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd8ecd176040518163ffffffff1660e01b815260040160206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190614280565b81600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561353857600080fd5b505afa15801561354c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135709190614280565b61357a9190614e92565b10156135be5760166040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016135b591906149a8565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac85856040518363ffffffff1660e01b815260040161361b9291906148bb565b600060405180830381600087803b15801561363557600080fd5b505af1158015613649573d6000803e3d6000fd5b505050506136578582612c29565b7f47cadff479ffebc80dd9d2330c72e274eaf0e620bb4e9d617356df321e82976185858560405161368a93929190614823565b60405180910390a17f77c97459a115e74ba5adced182b076766b1b9825e785d85b5f0f06d444bef21130836040516136c39291906148bb565b60405180910390a1505050505050565b6060600060028360026136e69190614dfa565b6136f09190614d73565b67ffffffffffffffff81111561372f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137615781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106137bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613849577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026138899190614dfa565b6138939190614d73565b90505b600181111561397f577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106138fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110613938577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613978906150a3565b9050613896565b50600084146139c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ba906149e5565b60405180910390fd5b8091505092915050565b6000613a2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d2d9092919063ffffffff16565b9050600081511115613a8f5780806020019051810190613a4f91906141a0565b613a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a8590614a85565b60405180910390fd5b5b505050565b60008062093a8063ffffffff1684613aac9190615148565b14613aba5760019050613b29565b83831015613acb5760029050613b29565b60008260ff1662093a80613adf9190614e54565b63ffffffff1690508062093a8063ffffffff1686613afd9190615148565b86613b089190614e92565b613b129190614d73565b841115613b23576004915050613b29565b60039150505b9392505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613b8e9190614747565b60206040518083038186803b158015613ba657600080fd5b505afa158015613bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bde9190614280565b9050613c0e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16853086613d45565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401613c6b9190614747565b60206040518083038186803b158015613c8357600080fd5b505afa158015613c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbb9190614280565b90508181613cc99190614e92565b9250505092915050565b6000670de0b6b3a76400008284613cea9190614dfa565b613cf49190614dc9565b905092915050565b613d29600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836122a9565b5050565b6060613d3c8484600085613dce565b90509392505050565b613dc8846323b872dd60e01b858585604051602401613d6693929190614823565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506139cd565b50505050565b606082471015613e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e0a90614a25565b60405180910390fd5b613e1c85613ee2565b613e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e5290614a65565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e8491906146f6565b60006040518083038185875af1925050503d8060008114613ec1576040519150601f19603f3d011682016040523d82523d6000602084013e613ec6565b606091505b5091509150613ed6828286613f05565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613f1557829050613f65565b600083511115613f285782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f5c91906149c3565b60405180910390fd5b9392505050565b600081359050613f7b81615466565b92915050565b600081359050613f908161547d565b92915050565b600081519050613fa581615494565b92915050565b600081359050613fba816154ab565b92915050565b600081359050613fcf816154c2565b92915050565b600081359050613fe4816154d9565b92915050565b600081359050613ff9816154f0565b92915050565b60008151905061400e816154f0565b92915050565b60008060006060848603121561402957600080fd5b600061403786828701613f81565b935050602061404886828701613fea565b925050604061405986828701613fea565b9150509250925092565b60008060006060848603121561407857600080fd5b600061408686828701613f6c565b935050602061409786828701613f6c565b92505060406140a886828701613fea565b9150509250925092565b600080604083850312156140c557600080fd5b60006140d385828601613f6c565b92505060206140e485828601613fea565b9150509250929050565b6000806000806080858703121561410457600080fd5b600061411287828801613f6c565b945050602061412387828801613fea565b935050604061413487828801613fd5565b925050606061414587828801613fea565b91505092959194509250565b60008060006060848603121561416657600080fd5b600061417486828701613f6c565b935050602061418586828701613fea565b925050604061419686828701613fea565b9150509250925092565b6000602082840312156141b257600080fd5b60006141c084828501613f96565b91505092915050565b6000602082840312156141db57600080fd5b60006141e984828501613fab565b91505092915050565b6000806040838503121561420557600080fd5b600061421385828601613fab565b925050602061422485828601613f6c565b9150509250929050565b60006020828403121561424057600080fd5b600061424e84828501613fc0565b91505092915050565b60006020828403121561426957600080fd5b600061427784828501613fea565b91505092915050565b60006020828403121561429257600080fd5b60006142a084828501613fff565b91505092915050565b600080604083850312156142bc57600080fd5b60006142ca85828601613fea565b92505060206142db85828601613fea565b9150509250929050565b600080604083850312156142f857600080fd5b600061430685828601613fff565b925050602061431785828601613fff565b9150509250929050565b60008060006060848603121561433657600080fd5b600061434486828701613fea565b935050602061435586828701613fea565b925050604061436686828701613fea565b9150509250925092565b6000806000806080858703121561438657600080fd5b600061439487828801613fff565b94505060206143a587828801613fff565b93505060406143b687828801613fff565b92505060606143c787828801613fff565b91505092959194509250565b60006143df83836146c9565b60208301905092915050565b6143f481614f98565b82525050565b61440381614ec6565b82525050565b600061441482614d0d565b61441e8185614d3b565b935061442983614cfd565b8060005b8381101561445a57815161444188826143d3565b975061444c83614d2e565b92505060018101905061442d565b5085935050505092915050565b61447081614eea565b82525050565b61447f81614ef6565b82525050565b600061449082614d18565b61449a8185614d4c565b93506144aa818560208601615070565b80840191505092915050565b6144bf81614faa565b82525050565b6144ce81614fce565b82525050565b6144dd81614ff2565b82525050565b6144ec81615016565b82525050565b6144fb8161503a565b82525050565b600061450c82614d23565b6145168185614d57565b9350614526818560208601615070565b61452f81615235565b840191505092915050565b600061454582614d23565b61454f8185614d68565b935061455f818560208601615070565b80840191505092915050565b6000614578602083614d57565b915061458382615246565b602082019050919050565b600061459b601483614d57565b91506145a68261526f565b602082019050919050565b60006145be602683614d57565b91506145c982615298565b604082019050919050565b60006145e1601083614d57565b91506145ec826152e7565b602082019050919050565b6000614604601d83614d57565b915061460f82615310565b602082019050919050565b6000614627601783614d68565b915061463282615339565b601782019050919050565b600061464a602a83614d57565b915061465582615362565b604082019050919050565b600061466d601f83614d57565b9150614678826153b1565b602082019050919050565b6000614690601183614d68565b915061469b826153da565b601182019050919050565b60006146b3602f83614d57565b91506146be82615403565b604082019050919050565b6146d281614f71565b82525050565b6146e181614f71565b82525050565b6146f081614f8b565b82525050565b60006147028284614485565b915081905092915050565b60006147188261461a565b9150614724828561453a565b915061472f82614683565b915061473b828461453a565b91508190509392505050565b600060208201905061475c60008301846143fa565b92915050565b600060408201905061477760008301856143fa565b61478460208301846143fa565b9392505050565b60006080820190506147a060008301876143fa565b6147ad60208301866143fa565b6147ba60408301856143fa565b6147c760608301846143fa565b95945050505050565b600060a0820190506147e560008301886143fa565b6147f260208301876143fa565b6147ff60408301866143fa565b61480c60608301856143fa565b61481960808301846146d8565b9695505050505050565b600060608201905061483860008301866143fa565b61484560208301856143fa565b61485260408301846146d8565b949350505050565b600060c08201905061486f60008301896143fa565b61487c60208301886143fa565b61488960408301876146d8565b61489660608301866143fa565b6148a360808301856146d8565b6148b060a08301846146d8565b979650505050505050565b60006040820190506148d060008301856143fa565b6148dd60208301846146d8565b9392505050565b600060208201905081810360008301526148fe8184614409565b905092915050565b600060208201905061491b6000830184614467565b92915050565b60006020820190506149366000830184614476565b92915050565b600060208201905061495160008301846144b6565b92915050565b600060208201905061496c60008301846144c5565b92915050565b600060208201905061498760008301846144d4565b92915050565b60006020820190506149a260008301846144e3565b92915050565b60006020820190506149bd60008301846144f2565b92915050565b600060208201905081810360008301526149dd8184614501565b905092915050565b600060208201905081810360008301526149fe8161456b565b9050919050565b60006020820190508181036000830152614a1e8161458e565b9050919050565b60006020820190508181036000830152614a3e816145b1565b9050919050565b60006020820190508181036000830152614a5e816145d4565b9050919050565b60006020820190508181036000830152614a7e816145f7565b9050919050565b60006020820190508181036000830152614a9e8161463d565b9050919050565b60006020820190508181036000830152614abe81614660565b9050919050565b60006020820190508181036000830152614ade816146a6565b9050919050565b6000602082019050614afa60008301846146d8565b92915050565b6000608082019050614b1560008301876146d8565b614b2260208301866143eb565b614b2f60408301856146d8565b614b3c60608301846146d8565b95945050505050565b6000606082019050614b5a60008301866146d8565b614b6760208301856143fa565b614b7460408301846146d8565b949350505050565b6000608082019050614b9160008301876146d8565b614b9e60208301866143fa565b614bab60408301856146d8565b614bb860608301846146d8565b95945050505050565b600060c082019050614bd660008301896146d8565b614be360208301886143fa565b614bf060408301876146d8565b614bfd60608301866146d8565b614c0a60808301856146d8565b614c1760a08301846146e7565b979650505050505050565b6000604082019050614c3760008301856146d8565b614c4460208301846146d8565b9392505050565b6000606082019050614c6060008301866146d8565b614c6d60208301856146d8565b614c7a60408301846146d8565b949350505050565b6000602082019050614c9760008301846146e7565b92915050565b6000604082019050614cb260008301856146e7565b614cbf60208301846146e7565b9392505050565b6000606082019050614cdb60008301866146e7565b614ce860208301856146e7565b614cf560408301846146e7565b949350505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614d7e82614f71565b9150614d8983614f71565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614dbe57614dbd615179565b5b828201905092915050565b6000614dd482614f71565b9150614ddf83614f71565b925082614def57614dee6151a8565b5b828204905092915050565b6000614e0582614f71565b9150614e1083614f71565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614e4957614e48615179565b5b828202905092915050565b6000614e5f82614f7b565b9150614e6a83614f7b565b92508163ffffffff0483118215151615614e8757614e86615179565b5b828202905092915050565b6000614e9d82614f71565b9150614ea883614f71565b925082821015614ebb57614eba615179565b5b828203905092915050565b6000614ed182614f51565b9050919050565b6000614ee382614f51565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000614f3782614ec6565b9050919050565b6000819050614f4c82615452565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000614fa38261504c565b9050919050565b6000614fb582614fbc565b9050919050565b6000614fc782614f51565b9050919050565b6000614fd982614fe0565b9050919050565b6000614feb82614f51565b9050919050565b6000614ffd82615004565b9050919050565b600061500f82614f51565b9050919050565b600061502182615028565b9050919050565b600061503382614f51565b9050919050565b600061504582614f3e565b9050919050565b60006150578261505e565b9050919050565b600061506982614f51565b9050919050565b60005b8381101561508e578082015181840152602081019050615073565b8381111561509d576000848401525b50505050565b60006150ae82614f71565b915060008214156150c2576150c1615179565b5b600182039050919050565b600060028204905060018216806150e557607f821691505b602082108114156150f9576150f8615206565b5b50919050565b600061510a82614f71565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561513d5761513c615179565b5b600182019050919050565b600061515382614f71565b915061515e83614f71565b92508261516e5761516d6151a8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c8110615463576154626151d7565b5b50565b61546f81614ec6565b811461547a57600080fd5b50565b61548681614ed8565b811461549157600080fd5b50565b61549d81614eea565b81146154a857600080fd5b50565b6154b481614ef6565b81146154bf57600080fd5b50565b6154cb81614f00565b81146154d657600080fd5b50565b6154e281614f2c565b81146154ed57600080fd5b50565b6154f981614f71565b811461550457600080fd5b5056fea2646970667358221220130c29b4c7b6f21b25c28387dbfa2ad9eabbd7a28218fa639ce60cb6d538f03064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrowFromMaturityPool(uint256,uint256,uint256)": {
        "details": "Lends to a wallet for a certain maturity date/pool",
        "params": {
          "amount": "amount to send to the msg.sender",
          "maturityDate": "maturity date for repayment",
          "maxAmountAllowed": "maximum amount of debt that        the user is willing to accept for the transaction        to go through"
        }
      },
      "depositToMaturityPool(uint256,uint256,uint256)": {
        "details": "Deposits a certain amount to the protocol for      a certain maturity date/pool",
        "params": {
          "amount": "amount to receive from the msg.sender",
          "maturityDate": "maturity date / pool ID",
          "minAmountRequired": "minimum amount of capital required        by the depositor for the transaction to be accepted"
        }
      },
      "depositToSmartPool(uint256)": {
        "details": "Deposits an `amount` of underlying asset into the smart pool, receiving in return overlying eTokens. - E.g. User deposits 100 USDC and gets in return 100 eUSDC",
        "params": {
          "amount": "The amount to be deposited"
        }
      },
      "getAccountSnapshot(address,uint256)": {
        "details": "Gets current snapshot for a wallet in certain maturity",
        "params": {
          "maturityDate": "maturityDate - Send the value 0 in order to get the snapshot for all maturities where the user borrowed",
          "who": "wallet to return status snapshot in the specified maturity date"
        },
        "returns": {
          "_0": "the amount the user deposited to the smart pool and the total money he owes from maturities"
        }
      },
      "getAuditor()": {
        "details": "Gets the auditor contract interface being used to validate positions"
      },
      "getFuturePools()": {
        "details": "Function to retrieve valid future pools"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSmartPoolDeposits()": {
        "details": "Gets the market size of the smart pool, usefull for dApps to show current status"
      },
      "getTotalMpBorrows(uint256)": {
        "details": "Gets the total amount of borrowed money for a maturityDate",
        "params": {
          "maturityDate": "maturity date"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidate(address,uint256,address,uint256)": {
        "details": "Msg.sender liquidates a borrower's position and repays a certain amount of debt      for a maturity date, seizing a part of borrower's collateral",
        "params": {
          "borrower": "wallet that has an outstanding debt for a certain maturity date",
          "fixedLenderCollateral": "address of fixedLender from which the collateral will be seized to give the liquidator",
          "maturityDate": "maturity date for which the position will be liquidated",
          "repayAmount": "amount to be repaid by liquidator(msg.sender)"
        }
      },
      "pause()": {
        "details": "Sets the _pause state to true in case of emergency, triggered by an authorized account"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to repay to should be matured",
        "params": {
          "borrower": "The address of the account that has the debt",
          "maturityDate": "The matured date where the debt is located",
          "repayAmount": "amount to be paid for the borrower's debt"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seize(address,address,uint256)": {
        "details": "Public function for liquidator to seize borrowers tokens in the smart pool.      This function will only be called from another FixedLender, on `liquidation` calls.      That's why msg.sender needs to be passed to the private function (to be validated as a market)",
        "params": {
          "borrower": "address from which the tokens will be seized",
          "liquidator": "address which will receive the seized tokens",
          "seizeAmount": "amount to be removed from borrower's posession"
        }
      },
      "setMpDepositDistributionWeighter(uint256)": {
        "details": "Sets the maturity pool deposits' weighter used to increase or decrease the deposit amount in order      to share out more or less unassigned earnings to that deposit",
        "params": {
          "_mpDepositDistributionWeighter": "percentage amount represented with 1e18 decimals that will multiply the amount to deposit"
        }
      },
      "setProtocolLiquidationFee(uint256)": {
        "details": "Sets the protocol's collateral liquidation fee used on liquidations",
        "params": {
          "_protocolLiquidationFee": "percentage amount represented with 1e18 decimals"
        }
      },
      "setProtocolSpreadFee(uint256)": {
        "details": "Sets the protocol's spread fee used on loan repayment",
        "params": {
          "_protocolSpreadFee": "percentage amount represented with 1e18 decimals"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Sets the _pause state to false when threat is gone, triggered by an authorized account"
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "details": "The pool that the user is trying to retrieve the money should be matured",
        "params": {
          "maturityDate": "The matured date for which we're trying to retrieve the funds",
          "redeemAmount": "The number of underlying tokens to receive",
          "redeemer": "The address of the account which is redeeming the tokens"
        }
      },
      "withdrawFromSmartPool(uint256)": {
        "details": "Withdraws an `amount` of underlying asset from the smart pool, burning the equivalent eTokens owned - E.g. User has 100 eUSDC, calls withdraw() and receives 100 USDC, burning the 100 eUSDC",
        "params": {
          "amount": "The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole eToken balance"
        }
      },
      "withdrawFromTreasury(address,uint256)": {
        "params": {
          "amount": "amount to be transferred",
          "who": "address which will receive the funds"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddReserves(address,uint256)": {
        "notice": "Event emitted reserves have been added to the protocol"
      },
      "BorrowFromMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user borrows amount of an asset from a         certain maturity date"
      },
      "DepositToMaturityPool(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user deposits an amount of an asset to a         certain maturity date collecting a fee at the end of the         period"
      },
      "DepositToSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256,uint256)": {
        "notice": "Event emitted when a user's position had a liquidation"
      },
      "RepayToMaturityPool(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a user repays its borrows after maturity"
      },
      "SeizeAsset(address,address,uint256)": {
        "notice": "Event emitted when a user's collateral has been seized"
      },
      "WithdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "Event emitted when a user collects its deposits after maturity"
      },
      "WithdrawFromSmartPool(address,uint256)": {
        "notice": "Event emitted when a user contributed to the smart pool"
      }
    },
    "kind": "user",
    "methods": {
      "liquidate(address,uint256,address,uint256)": {
        "notice": "Function to liquidate an uncollaterized position"
      },
      "repayToMaturityPool(address,uint256,uint256)": {
        "notice": "Sender repays an amount of borrower's debt for a maturity date"
      },
      "seize(address,address,uint256)": {
        "notice": "Public function to seize a certain amount of tokens"
      },
      "withdrawFromMaturityPool(address,uint256,uint256)": {
        "notice": "User collects a certain amount of underlying asset after having         supplied tokens until a certain maturity date"
      },
      "withdrawFromTreasury(address,uint256)": {
        "notice": "public function to transfer funds from protocol earnings to a specified wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1263,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1178,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5526,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "protocolSpreadFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5529,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5533,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "mpDepositDistributionWeighter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5538,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5547,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "trustedUnderlying",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1958"
      },
      {
        "astId": 5551,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "eToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IEToken)8897"
      },
      {
        "astId": 5554,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "underlyingTokenName",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 5557,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "poolAccounting",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IPoolAccounting)9163"
      },
      {
        "astId": 5560,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "auditor",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IAuditor)8832"
      },
      {
        "astId": 5563,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "totalMpBorrows",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4387,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "wrapOnOurSide",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 4390,
        "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
        "label": "weth",
        "offset": 1,
        "slot": "13",
        "type": "t_contract(WETH9)8763"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAuditor)8832": {
        "encoding": "inplace",
        "label": "contract IAuditor",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1958": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEToken)8897": {
        "encoding": "inplace",
        "label": "contract IEToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAccounting)9163": {
        "encoding": "inplace",
        "label": "contract IPoolAccounting",
        "numberOfBytes": "20"
      },
      "t_contract(WETH9)8763": {
        "encoding": "inplace",
        "label": "contract WETH9",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ETHFixedLender.sol:ETHFixedLender",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}