{
  "address": "0x6c12C61d9227F5315Bc4436E68121D9073961681",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum ErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "GenericError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactor",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "enableMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fixedLenders",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fixedLenderBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "name": "setCollateralFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationIncentive",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "fixedLenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "validateAccountShortfall",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fixedLenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "validateBorrowMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fd466ba69b640f0943c104552cb001eee77244dc1adbda6bc569a3588c99d21",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x6c12C61d9227F5315Bc4436E68121D9073961681",
    "transactionIndex": 12,
    "gasUsed": "3372063",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000100000000000000000000000020000000000000001000000000000000000000000000000000000000000000000000000000000100000800000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb88eddac17199c2500a28afcab9f71156f5a161937a065210ddf8103c3d317f4",
    "transactionHash": "0x1fd466ba69b640f0943c104552cb001eee77244dc1adbda6bc569a3588c99d21",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 30309715,
        "transactionHash": "0x1fd466ba69b640f0943c104552cb001eee77244dc1adbda6bc569a3588c99d21",
        "address": "0x6c12C61d9227F5315Bc4436E68121D9073961681",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0xb88eddac17199c2500a28afcab9f71156f5a161937a065210ddf8103c3d317f4"
      }
    ],
    "blockNumber": 30309715,
    "cumulativeGasUsed": "13430792",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x76724199e6b1fd1E6E2C9B744Ee69D294f87D1a2"
  ],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum ErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"GenericError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactor\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"enableMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fixedLenders\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fixedLenderBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"seizeAllowed\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"name\":\"setCollateralFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationIncentive\",\"type\":\"uint256\"}],\"name\":\"setLiquidationIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"fixedLenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validateAccountShortfall\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fixedLenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"validateBorrowMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MarketEntered(address,address)\":{\"params\":{\"account\":\"address of the user that just entered a market\",\"fixedLender\":\"address of the market that the user entered\"}},\"MarketExited(address,address)\":{\"params\":{\"account\":\"address of the user that just left a market\",\"fixedLender\":\"address of the market that the user just left\"}},\"MarketListed(address)\":{\"params\":{\"fixedLender\":\"address of the fixedLender market that it was listed\"}},\"NewBorrowCap(address,uint256)\":{\"params\":{\"fixedLender\":\"address of the lender that has a new borrow cap\",\"newBorrowCap\":\"new borrow cap expressed with 1e18 precision for the given market.                     0 = means no cap\"}},\"NewCollateralFactor(address,uint256)\":{\"params\":{\"fixedLender\":\"address of the market that has a new collateral factor.\",\"newCollateralFactor\":\"collateral factor for the underlying asset.\"}},\"OracleChanged(address)\":{\"params\":{\"newOracle\":\"address of the new oracle that is used to calculate liquidity\"}}},\"kind\":\"dev\",\"methods\":{\"enableMarket(address,uint256,string,string,uint8)\":{\"details\":\"Function to enable a certain FixedLender market\",\"params\":{\"collateralFactor\":\"fixedLender's collateral factor for the underlying asset\",\"decimals\":\"decimals of the market's underlying asset\",\"fixedLender\":\"address to add to the protocol\",\"name\":\"name of the market's underlying asset\",\"symbol\":\"symbol of the market's underlying asset\"}},\"enterMarkets(address[])\":{\"details\":\"Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money could be used as collateral\",\"params\":{\"fixedLenders\":\"contracts addresses to enable for `msg.sender`\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,      or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"fixedLenderAddress\":\"The address of the asset to be removed\"}},\"getAccountLiquidity(address)\":{\"details\":\"Function to get account's liquidity\",\"params\":{\"account\":\"wallet to retrieve liquidity\"}},\"getMarketAddresses()\":{\"details\":\"Function to retrieve all markets\"},\"getMarketData(address)\":{\"details\":\"Given a fixedLender address, it returns the corresponding market data\",\"params\":{\"fixedLenderAddress\":\"Address of the contract where we are getting the data\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidateAllowed(address,address,address,address,uint256)\":{\"details\":\"Function to allow/reject liquidation of assets. This function can be called      externally, but only will have effect when called from a fixedLender.\",\"params\":{\"borrower\":\"address which the assets are being liquidated\",\"fixedLenderBorrowed\":\"market from where the debt is pending\",\"fixedLenderCollateral\":\"market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\",\"liquidator\":\"address that is liquidating the assets\",\"repayAmount\":\"amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\"}},\"liquidateCalculateSeizeAmount(address,address,uint256)\":{\"details\":\"Function to calculate the amount of assets to be seized      - when a position is undercollaterized it should be repaid and this functions calculates the        amount of collateral to be seized\",\"params\":{\"actualRepayAmount\":\"repay amount in the borrowed asset\",\"fixedLenderBorrowed\":\"market from where the debt is pending\",\"fixedLenderCollateral\":\"market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seizeAllowed(address,address,address,address)\":{\"details\":\"Function to allow/reject seizing of assets. This function can be called      externally, but only will have effect when called from a fixedLender.\",\"params\":{\"borrower\":\"address to validate where the assets will be removed\",\"fixedLenderBorrowed\":\"market from where the debt will be paid\",\"fixedLenderCollateral\":\"market where the assets will be seized (should be msg.sender on FixedLender.sol)\",\"liquidator\":\"address to validate where the seized assets will be received\"}},\"setCollateralFactor(address,uint256)\":{\"params\":{\"collateralFactor\":\"collateral factor for the underlying asset.\",\"fixedLender\":\"address of the market to change collateral factor for.\"}},\"setLiquidationIncentive(uint256)\":{\"params\":{\"_liquidationIncentive\":\"new liquidation incentive. It's a factor, so 15% would be 1.15e18\"}},\"setMarketBorrowCaps(address[],uint256[])\":{\"params\":{\"fixedLenders\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"setOracle(address)\":{\"details\":\"Function to set Oracle's to be used\",\"params\":{\"_priceOracleAddress\":\"address of the new oracle\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"validateAccountShortfall(address,address,uint256)\":{\"details\":\"Function to be called before someone wants to interact with its smart pool position.      This function checks if the user has no outstanding debts.      This function is called indirectly from fixedLender contracts(withdraw), eToken transfers and directly from      this contract when the user wants to exit a market.\",\"params\":{\"account\":\"address of the user to check for possible shortfall\",\"amount\":\"amount that the user wants to withdraw or transfer\",\"fixedLenderAddress\":\"address of the fixedLender where the smart pool belongs\"}},\"validateBorrowMP(address,address)\":{\"details\":\"Hook function to be called after calling the poolAccounting borrowMP function. Validates      that the current state of the position and system are valid (liquidity)\",\"params\":{\"borrower\":\"address of the user that will borrow money from a maturity date\",\"fixedLenderAddress\":\"address of the fixedLender that will lend money in a maturity\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MarketEntered(address,address)\":{\"notice\":\"Event emitted when a user enters a market to use his deposit as collateral         for a loan\"},\"MarketExited(address,address)\":{\"notice\":\"Event emitted when a user leaves a market. This means that he would stop using         his deposit as collateral and it won't ask for any loans in this market\"},\"MarketListed(address)\":{\"notice\":\"Event emitted when a new market is listed for borrow/lending\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Event emitted when a new borrow cap has been set for a certain fixedLender         If newBorrowCap is 0, that means that there's no cap\"},\"NewCollateralFactor(address,uint256)\":{\"notice\":\"emitted when a collateral factor is changed by admin.\"},\"OracleChanged(address)\":{\"notice\":\"Event emitted when a new Oracle has been set\"}},\"kind\":\"user\",\"methods\":{\"exitMarket(address)\":{\"notice\":\"Removes fixedLender from sender's account liquidity calculation\"},\"setCollateralFactor(address,uint256)\":{\"notice\":\"sets the collateral factor for a certain fixedLender.\"},\"setLiquidationIncentive(uint256)\":{\"notice\":\"Set liquidation incentive for the whole ecosystem\"},\"setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auditor.sol\":\"Auditor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Auditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./interfaces/IFixedLender.sol\\\";\\nimport \\\"./interfaces/IAuditor.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./utils/MarketsLib.sol\\\";\\n\\ncontract Auditor is IAuditor, AccessControl {\\n    using DecimalMath for uint256;\\n    using SafeCast for uint256;\\n    using MarketsLib for MarketsLib.Book;\\n\\n    // Protocol Management\\n    MarketsLib.Book private book;\\n\\n    uint256 public closeFactor = 5e17;\\n    uint256 public liquidationIncentive = 1e18 + 1e17;\\n    address[] public marketsAddresses;\\n\\n    IOracle public oracle;\\n\\n    /**\\n     * @notice Event emitted when a new market is listed for borrow/lending\\n     * @param fixedLender address of the fixedLender market that it was listed\\n     */\\n    event MarketListed(address fixedLender);\\n\\n    /**\\n     * @notice Event emitted when a user enters a market to use his deposit as collateral\\n     *         for a loan\\n     * @param fixedLender address of the market that the user entered\\n     * @param account address of the user that just entered a market\\n     */\\n    event MarketEntered(address fixedLender, address account);\\n\\n    /**\\n     * @notice Event emitted when a user leaves a market. This means that he would stop using\\n     *         his deposit as collateral and it won't ask for any loans in this market\\n     * @param fixedLender address of the market that the user just left\\n     * @param account address of the user that just left a market\\n     */\\n    event MarketExited(address fixedLender, address account);\\n\\n    /**\\n     * @notice Event emitted when a new Oracle has been set\\n     * @param newOracle address of the new oracle that is used to calculate liquidity\\n     */\\n    event OracleChanged(address newOracle);\\n\\n    /**\\n     * @notice Event emitted when a new borrow cap has been set for a certain fixedLender\\n     *         If newBorrowCap is 0, that means that there's no cap\\n     * @param fixedLender address of the lender that has a new borrow cap\\n     * @param newBorrowCap new borrow cap expressed with 1e18 precision for the given market.\\n     *                     0 = means no cap\\n     */\\n    event NewBorrowCap(address indexed fixedLender, uint256 newBorrowCap);\\n\\n    /// @notice emitted when a collateral factor is changed by admin.\\n    /// @param fixedLender address of the market that has a new collateral factor.\\n    /// @param newCollateralFactor collateral factor for the underlying asset.\\n    event NewCollateralFactor(\\n        address indexed fixedLender,\\n        uint256 newCollateralFactor\\n    );\\n\\n    constructor(address _priceOracleAddress) {\\n        oracle = IOracle(_priceOracleAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money could be used as collateral\\n     * @param fixedLenders contracts addresses to enable for `msg.sender`\\n     */\\n    function enterMarkets(address[] calldata fixedLenders) external {\\n        uint256 len = fixedLenders.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            validateMarketListed(fixedLenders[i]);\\n            book.addToMarket(fixedLenders[i], msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes fixedLender from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *      or be providing necessary collateral for an outstanding borrow.\\n     * @param fixedLenderAddress The address of the asset to be removed\\n     */\\n    function exitMarket(address fixedLenderAddress) external {\\n        validateMarketListed(fixedLenderAddress);\\n\\n        IFixedLender fixedLender = IFixedLender(fixedLenderAddress);\\n        (uint256 amountHeld, uint256 borrowBalance) = fixedLender\\n            .getAccountSnapshot(msg.sender, MarketsLib.ALL_MATURITIES);\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (borrowBalance != 0) {\\n            revert GenericError(ErrorCode.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        validateAccountShortfall(fixedLenderAddress, msg.sender, amountHeld);\\n\\n        book.exitMarket(fixedLenderAddress, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Function to set Oracle's to be used\\n     * @param _priceOracleAddress address of the new oracle\\n     */\\n    function setOracle(address _priceOracleAddress)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        oracle = IOracle(_priceOracleAddress);\\n        emit OracleChanged(_priceOracleAddress);\\n    }\\n\\n    /**\\n     * @notice Set liquidation incentive for the whole ecosystem\\n     * @param _liquidationIncentive new liquidation incentive. It's a factor, so 15% would be 1.15e18\\n     */\\n    function setLiquidationIncentive(uint256 _liquidationIncentive)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        liquidationIncentive = _liquidationIncentive;\\n    }\\n\\n    /**\\n     * @dev Function to enable a certain FixedLender market\\n     * @param fixedLender address to add to the protocol\\n     * @param collateralFactor fixedLender's collateral factor for the underlying asset\\n     * @param symbol symbol of the market's underlying asset\\n     * @param name name of the market's underlying asset\\n     * @param decimals decimals of the market's underlying asset\\n     */\\n    function enableMarket(\\n        address fixedLender,\\n        uint256 collateralFactor,\\n        string memory symbol,\\n        string memory name,\\n        uint8 decimals\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        MarketsLib.Market storage market = book.markets[fixedLender];\\n\\n        if (market.isListed) {\\n            revert GenericError(ErrorCode.MARKET_ALREADY_LISTED);\\n        }\\n\\n        if (IFixedLender(fixedLender).getAuditor() != this) {\\n            revert GenericError(ErrorCode.AUDITOR_MISMATCH);\\n        }\\n\\n        market.isListed = true;\\n        market.collateralFactor = collateralFactor;\\n        market.symbol = symbol;\\n        market.name = name;\\n        market.decimals = decimals;\\n\\n        marketsAddresses.push(fixedLender);\\n\\n        emit MarketListed(fixedLender);\\n    }\\n\\n    /// @notice sets the collateral factor for a certain fixedLender.\\n    /// @param fixedLender address of the market to change collateral factor for.\\n    /// @param collateralFactor collateral factor for the underlying asset.\\n    function setCollateralFactor(address fixedLender, uint256 collateralFactor)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        book.markets[fixedLender].collateralFactor = collateralFactor;\\n        emit NewCollateralFactor(fixedLender, collateralFactor);\\n    }\\n\\n    /**\\n     * @notice Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n     * @param fixedLenders The addresses of the markets (tokens) to change the borrow caps for\\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n     */\\n    function setMarketBorrowCaps(\\n        address[] calldata fixedLenders,\\n        uint256[] calldata newBorrowCaps\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 numMarkets = fixedLenders.length;\\n        uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n        if (numMarkets == 0 || numMarkets != numBorrowCaps) {\\n            revert GenericError(ErrorCode.INVALID_SET_BORROW_CAP);\\n        }\\n\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            validateMarketListed(fixedLenders[i]);\\n\\n            book.borrowCaps[fixedLenders[i]] = newBorrowCaps[i];\\n            emit NewBorrowCap(fixedLenders[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook function to be called after calling the poolAccounting borrowMP function. Validates\\n     *      that the current state of the position and system are valid (liquidity)\\n     * @param fixedLenderAddress address of the fixedLender that will lend money in a maturity\\n     * @param borrower address of the user that will borrow money from a maturity date\\n     */\\n    function validateBorrowMP(address fixedLenderAddress, address borrower)\\n        external\\n        override\\n    {\\n        validateMarketListed(fixedLenderAddress);\\n        // we validate borrow state\\n        book.validateBorrow(fixedLenderAddress, borrower);\\n\\n        // We verify that current liquidity is not short\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            borrower,\\n            fixedLenderAddress,\\n            0,\\n            0\\n        );\\n\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to allow/reject liquidation of assets. This function can be called\\n     *      externally, but only will have effect when called from a fixedLender.\\n     * @param fixedLenderBorrowed market from where the debt is pending\\n     * @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\\n     * @param liquidator address that is liquidating the assets\\n     * @param borrower address which the assets are being liquidated\\n     * @param repayAmount amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)\\n     */\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view override {\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // if markets are listed, they have the same auditor\\n        if (\\n            !book.markets[fixedLenderBorrowed].isListed ||\\n            !book.markets[fixedLenderCollateral].isListed\\n        ) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidatable */\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            borrower,\\n            address(0),\\n            0,\\n            0\\n        );\\n\\n        if (shortfall == 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        (, uint256 borrowBalance) = IFixedLender(fixedLenderBorrowed)\\n            .getAccountSnapshot(borrower, MarketsLib.ALL_MATURITIES);\\n        uint256 maxClose = closeFactor.mul_(borrowBalance);\\n        if (repayAmount > maxClose) {\\n            revert GenericError(ErrorCode.TOO_MUCH_REPAY);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to allow/reject seizing of assets. This function can be called\\n     *      externally, but only will have effect when called from a fixedLender.\\n     * @param fixedLenderCollateral market where the assets will be seized (should be msg.sender on FixedLender.sol)\\n     * @param fixedLenderBorrowed market from where the debt will be paid\\n     * @param liquidator address to validate where the seized assets will be received\\n     * @param borrower address to validate where the assets will be removed\\n     */\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view override {\\n        if (borrower == liquidator) {\\n            revert GenericError(ErrorCode.LIQUIDATOR_NOT_BORROWER);\\n        }\\n\\n        // If markets are listed, they have also the same Auditor\\n        if (\\n            !book.markets[fixedLenderCollateral].isListed ||\\n            !book.markets[fixedLenderBorrowed].isListed\\n        ) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n    }\\n\\n    /**\\n     * @dev Given a fixedLender address, it returns the corresponding market data\\n     * @param fixedLenderAddress Address of the contract where we are getting the data\\n     */\\n    function getMarketData(address fixedLenderAddress)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            bool,\\n            uint256,\\n            uint8,\\n            address\\n        )\\n    {\\n        validateMarketListed(fixedLenderAddress);\\n\\n        MarketsLib.Market storage marketData = book.markets[fixedLenderAddress];\\n        return (\\n            marketData.symbol,\\n            marketData.name,\\n            marketData.isListed,\\n            marketData.collateralFactor,\\n            marketData.decimals,\\n            fixedLenderAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to get account's liquidity\\n     * @param account wallet to retrieve liquidity\\n     */\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return book.accountLiquidity(oracle, account, address(0), 0, 0);\\n    }\\n\\n    /**\\n     * @dev Function to calculate the amount of assets to be seized\\n     *      - when a position is undercollaterized it should be repaid and this functions calculates the\\n     *        amount of collateral to be seized\\n     * @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol)\\n     * @param fixedLenderBorrowed market from where the debt is pending\\n     * @param actualRepayAmount repay amount in the borrowed asset\\n     */\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view override returns (uint256) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint256 priceBorrowed = oracle.getAssetPrice(\\n            IFixedLender(fixedLenderBorrowed).underlyingTokenName()\\n        );\\n        uint256 priceCollateral = oracle.getAssetPrice(\\n            IFixedLender(fixedLenderCollateral).underlyingTokenName()\\n        );\\n\\n        uint256 amountInUSD = DecimalMath.getTokenAmountInUSD(\\n            actualRepayAmount,\\n            priceBorrowed,\\n            book.markets[fixedLenderBorrowed].decimals\\n        );\\n        // 10**18: usd amount decimals\\n        uint256 seizeTokens = DecimalMath.getTokenAmountFromUsd(\\n            amountInUSD,\\n            priceCollateral,\\n            book.markets[fixedLenderCollateral].decimals\\n        );\\n\\n        return seizeTokens.mul_(liquidationIncentive);\\n    }\\n\\n    /**\\n     * @dev Function to retrieve all markets\\n     */\\n    function getMarketAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return marketsAddresses;\\n    }\\n\\n    /**\\n     * @dev Function to be called before someone wants to interact with its smart pool position.\\n     *      This function checks if the user has no outstanding debts.\\n     *      This function is called indirectly from fixedLender contracts(withdraw), eToken transfers and directly from\\n     *      this contract when the user wants to exit a market.\\n     * @param fixedLenderAddress address of the fixedLender where the smart pool belongs\\n     * @param account address of the user to check for possible shortfall\\n     * @param amount amount that the user wants to withdraw or transfer\\n     */\\n    function validateAccountShortfall(\\n        address fixedLenderAddress,\\n        address account,\\n        uint256 amount\\n    ) public view override {\\n        /* If the user is not 'in' the market, then we can bypass the liquidity check */\\n        if (!book.markets[fixedLenderAddress].accountMembership[account]) {\\n            return;\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (, uint256 shortfall) = book.accountLiquidity(\\n            oracle,\\n            account,\\n            fixedLenderAddress,\\n            amount,\\n            0\\n        );\\n        if (shortfall > 0) {\\n            revert GenericError(ErrorCode.INSUFFICIENT_LIQUIDITY);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function verifies if market is listed as valid\\n     * @param fixedLenderAddress address of the fixedLender to be validated by the auditor\\n     */\\n    function validateMarketListed(address fixedLenderAddress) internal view {\\n        if (!book.markets[fixedLenderAddress].isListed) {\\n            revert GenericError(ErrorCode.MARKET_NOT_LISTED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60c2210fb111656be7e47ef117697eee4b842163d6fadd4660781f2400d06e82\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAuditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IAuditor {\\n    // this one validates post liquidity check\\n    function validateBorrowMP(address fixedLenderAddress, address borrower)\\n        external;\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function liquidateAllowed(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external view;\\n\\n    function seizeAllowed(\\n        address fixedLenderCollateral,\\n        address fixedLenderBorrowed,\\n        address liquidator,\\n        address borrower\\n    ) external view;\\n\\n    function liquidateCalculateSeizeAmount(\\n        address fixedLenderBorrowed,\\n        address fixedLenderCollateral,\\n        uint256 actualRepayAmount\\n    ) external view returns (uint256);\\n\\n    function getMarketAddresses() external view returns (address[] memory);\\n\\n    function validateAccountShortfall(\\n        address fixedLenderAddress,\\n        address account,\\n        uint256 amount\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xfeeaef06e0c471ebf447c7fa20fd3e5243cf792cdb15e1eeb52992fbef334539\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IEToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IEToken is IERC20, IERC20Metadata {\\n    /**\\n     * @dev Emitted when `fixedLender` and `auditor` are set\\n     * - The FixedLender is where the eToken is used\\n     * - The Auditor is called in every transfer\\n     */\\n    event Initialized(address indexed fixedLender, address indexed auditor);\\n\\n    /**\\n     * @dev Emitted when `amount` is accrued as earnings\\n     */\\n    event EarningsAccrued(uint256 amount);\\n\\n    /**\\n     * @dev Mints `amount` eTokens to `user`\\n     * - Only callable by the FixedLender\\n     * @param user The address receiving the minted tokens\\n     * @param amount The amount of tokens getting minted\\n     */\\n    function mint(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Burns eTokens from `user`\\n     * - Only callable by the FixedLender\\n     * @param user The owner of the eTokens, getting them burned\\n     * @param amount The amount being burned\\n     */\\n    function burn(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev Increases contract earnings\\n     * - Only callable by the FixedLender\\n     * @param amount The amount of underlying tokens deposited\\n     */\\n    function accrueEarnings(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x71ce614408fff79ac5f133fb257a0ac1df686f65c0cfdf8efb8d0682838da5b0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAuditor.sol\\\";\\nimport \\\"./IEToken.sol\\\";\\n\\ninterface IFixedLender {\\n    function borrowFromMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 maxAmountAllowed\\n    ) external;\\n\\n    function depositToMaturityPool(\\n        uint256 amount,\\n        uint256 maturityDate,\\n        uint256 minAmountRequired\\n    ) external;\\n\\n    function depositToSmartPool(uint256 amount) external;\\n\\n    function withdrawFromSmartPool(uint256 amount) external;\\n\\n    function withdrawFromMaturityPool(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repayToMaturityPool(\\n        address borrower,\\n        uint256 maturityDate,\\n        uint256 repayAmount\\n    ) external;\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function liquidate(\\n        address borrower,\\n        uint256 repayAmount,\\n        IFixedLender fixedLenderCollateral,\\n        uint256 maturityDate\\n    ) external returns (uint256);\\n\\n    function withdrawFromTreasury(address who, uint256 amount) external;\\n\\n    function underlyingTokenName() external view returns (string calldata);\\n\\n    function trustedUnderlying() external view returns (IERC20);\\n\\n    function getAccountSnapshot(address who, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalMpBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAuditor() external view returns (IAuditor);\\n\\n    function eToken() external view returns (IEToken);\\n\\n    function totalMpBorrows() external view returns (uint256);\\n\\n    function mpDepositDistributionWeighter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x27005f060493f78101145dca8c6c56ffbe5f04684e7e1657cbcd1e18b6cd4749\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IOracle interface\\n * @notice Interface for the Exactly oracle.\\n */\\ninterface IOracle {\\n    /**\\n     * @dev Returns the asset price\\n     * @param symbol The symbol of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(string memory symbol)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6f4220f4a16226c85164c6dc4481878bb01b33a145ba4d4e4c8cf5fbb3f6cc52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nstruct Double {\\n    uint256 value;\\n}\\n\\nlibrary DecimalMath {\\n    uint256 private constant NUMBER_SCALE = 1e18;\\n    uint256 private constant DOUBLE_SCALE = 1e36;\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return (a * b.value) / DOUBLE_SCALE;\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * NUMBER_SCALE) / b;\\n    }\\n\\n    function add_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value + b.value});\\n    }\\n\\n    function sub_(Double memory a, Double memory b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: a.value - b.value});\\n    }\\n\\n    function fraction(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (Double memory)\\n    {\\n        return Double({value: ((a * DOUBLE_SCALE) / b)});\\n    }\\n\\n    /**\\n     * @notice Converts an amount of a particular token into a normalized USD value\\n     * @dev it abstracts the decimals of the token, it's used to compute liquidity\\n     * @param tokenAmount the amount of the token to convert to USD\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param underlyingDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the amount of USD the asset represents, normalized to 18 decimals precision\\n     */\\n    function getTokenAmountInUSD(\\n        uint256 tokenAmount,\\n        uint256 oraclePrice,\\n        uint8 underlyingDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 tokenScale = 10**underlyingDecimals;\\n        uint256 normalizedTokenAmount = (tokenAmount * NUMBER_SCALE) /\\n            tokenScale;\\n        return (normalizedTokenAmount * oraclePrice) / NUMBER_SCALE;\\n    }\\n\\n    /**\\n     * @notice Converts normalized USD value into an  amount of a particular token\\n     * @dev it abstracts the decimals of the token, it's used to get the seizable amount in a liquidation\\n     * @param usdAmount the amount of usd to convert to the token\\n     * @param oraclePrice the price of the token, as returned from the oracle\\n     * @param tokenDecimals the decimals of the token (eg: 18 instead of 10**18)\\n     * @return the raw amount of the token equivalent to the provided usd amount\\n     */\\n    function getTokenAmountFromUsd(\\n        uint256 usdAmount,\\n        uint256 oraclePrice,\\n        uint8 tokenDecimals\\n    ) internal pure returns (uint256) {\\n        return\\n            (((usdAmount * NUMBER_SCALE) / oraclePrice) * 10**tokenDecimals) /\\n            NUMBER_SCALE;\\n    }\\n}\\n\",\"keccak256\":\"0x5a95fa4807987dd862b1499c260d186b9aadefddeea4345ae6b51751a144717c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nerror GenericError(ErrorCode error);\\n\\nenum ErrorCode {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY,\\n    INSUFFICIENT_SHORTFALL,\\n    AUDITOR_MISMATCH,\\n    TOO_MUCH_REPAY,\\n    REPAY_ZERO,\\n    TOKENS_MORE_THAN_BALANCE,\\n    INVALID_POOL_STATE,\\n    INVALID_POOL_ID,\\n    LIQUIDATOR_NOT_BORROWER,\\n    NOT_A_FIXED_LENDER_SENDER,\\n    INVALID_SET_BORROW_CAP,\\n    MARKET_BORROW_CAP_REACHED,\\n    INCONSISTENT_PARAMS_LENGTH,\\n    REDEEM_CANT_BE_ZERO,\\n    EXIT_MARKET_BALANCE_OWED,\\n    CALLER_MUST_BE_FIXED_LENDER,\\n    CONTRACT_ALREADY_INITIALIZED,\\n    INSUFFICIENT_PROTOCOL_LIQUIDITY,\\n    EXCEEDED_MAX_UTILIZATION_RATE,\\n    TOO_MUCH_SLIPPAGE,\\n    TOO_MUCH_REPAY_TRANSFER,\\n    SMART_POOL_FUNDS_LOCKED,\\n    INVALID_TIME_DIFFERENCE\\n}\\n\",\"keccak256\":\"0xfffeabe2b2586e80b0232599d651e13311e1755b5b7d38a3c0bb249013b54ce8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MarketsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../interfaces/IFixedLender.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../utils/DecimalMath.sol\\\";\\n\\nlibrary MarketsLib {\\n    using DecimalMath for uint256;\\n\\n    // Struct to avoid stack too deep\\n    struct AccountLiquidity {\\n        uint256 balance;\\n        uint256 borrowBalance;\\n        uint256 collateralFactor;\\n        uint256 oraclePrice;\\n        uint256 sumCollateral;\\n        uint256 sumDebt;\\n    }\\n\\n    // Book-keeping\\n    struct Book {\\n        mapping(address => MarketsLib.Market) markets;\\n        mapping(address => uint256) borrowCaps;\\n        mapping(address => IFixedLender[]) accountAssets;\\n    }\\n\\n    // Struct for FixedLender's markets\\n    struct Market {\\n        string symbol;\\n        string name;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        uint8 decimals;\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    uint256 internal constant ALL_MATURITIES = 0;\\n\\n    event MarketEntered(address fixedLender, address account);\\n    event MarketExited(address fixedLender, address account);\\n\\n    /**\\n     * @dev Allows wallet to exit certain markets (fixedLenderDAI, fixedLenderETH, etc)\\n     *      By performing this action, the wallet's money stops being used as collateral\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress market address used to retrieve the market data\\n     * @param who wallet that wants to exit a market/maturity\\n     */\\n    function exitMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who\\n    ) external {\\n        MarketsLib.Market storage marketToExit = book.markets[\\n            fixedLenderAddress\\n        ];\\n\\n        if (marketToExit.accountMembership[who] == false) {\\n            return;\\n        }\\n\\n        delete marketToExit.accountMembership[who];\\n\\n        // load into memory for faster iteration\\n        IFixedLender[] memory userAssetList = book.accountAssets[who];\\n        uint256 len = userAssetList.length;\\n        uint256 assetIndex = len;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (userAssetList[i] == IFixedLender(fixedLenderAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        IFixedLender[] storage storedList = book.accountAssets[who];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(fixedLenderAddress, who);\\n    }\\n\\n    /**\\n     * @dev Function to validate if a borrow should be allowed based on the what the book says.\\n            if the user is not participating in a market, and the caller is a fixedLender, the function\\n            will subscribe the wallet to the market membership\\n     * @param book account book that it will be used to perform validation\\n     * @param fixedLenderAddress address of the market that the borrow will be validated. If this equals msg.sender\\n              then the wallet will be autosubscribed to the market membership,\\n     * @param borrower address which will be borrowing money from this market\\n     */\\n    function validateBorrow(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address borrower\\n    ) external {\\n        if (!book.markets[fixedLenderAddress].accountMembership[borrower]) {\\n            // only fixedLenders may call borrowAllowed if borrower not in market\\n            if (msg.sender != fixedLenderAddress) {\\n                revert GenericError(ErrorCode.NOT_A_FIXED_LENDER_SENDER);\\n            }\\n\\n            // attempt to add borrower to the market // reverts if error\\n            addToMarket(book, fixedLenderAddress, borrower);\\n\\n            // it should be impossible to break the important invariant\\n            // TODO: is this tested?\\n            assert(\\n                book.markets[fixedLenderAddress].accountMembership[borrower]\\n            );\\n        }\\n\\n        uint256 borrowCap = book.borrowCaps[fixedLenderAddress];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = IFixedLender(fixedLenderAddress)\\n                .totalMpBorrows();\\n            if (totalBorrows >= borrowCap) {\\n                revert GenericError(ErrorCode.MARKET_BORROW_CAP_REACHED);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get account's liquidity for a certain market/maturity pool\\n     * @param book account book that it will be used to calculate liquidity\\n     * @param oracle oracle used to perform all liquidity calculations\\n     * @param account wallet which the liquidity will be calculated\\n     * @param fixedLenderToSimulate fixedLender in which we want to simulate withdraw/borrow ops (see next two args)\\n     * @param withdrawAmount amount to simulate withdraw\\n     * @param borrowAmount amount to simulate borrow\\n     */\\n    function accountLiquidity(\\n        Book storage book,\\n        IOracle oracle,\\n        address account,\\n        address fixedLenderToSimulate,\\n        uint256 withdrawAmount,\\n        uint256 borrowAmount\\n    ) external view returns (uint256, uint256) {\\n        AccountLiquidity memory vars; // Holds all our calculation results\\n\\n        // For each asset the account is in\\n        IFixedLender[] memory assets = book.accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IFixedLender asset = assets[i];\\n            MarketsLib.Market storage market = book.markets[address(asset)];\\n\\n            // Read the balances\\n            (vars.balance, vars.borrowBalance) = asset.getAccountSnapshot(\\n                account,\\n                ALL_MATURITIES\\n            );\\n\\n            vars.collateralFactor = book\\n                .markets[address(asset)]\\n                .collateralFactor;\\n\\n            // Get the normalized price of the asset (18 decimals)\\n            vars.oraclePrice = oracle.getAssetPrice(\\n                asset.underlyingTokenName()\\n            );\\n\\n            // We sum all the collateral prices\\n            vars.sumCollateral += DecimalMath\\n                .getTokenAmountInUSD(\\n                    vars.balance,\\n                    vars.oraclePrice,\\n                    market.decimals\\n                )\\n                .mul_(vars.collateralFactor);\\n\\n            // We sum all the debt\\n            vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                vars.borrowBalance,\\n                vars.oraclePrice,\\n                market.decimals\\n            );\\n\\n            // Simulate the effects of borrowing from/lending to a pool\\n            if (asset == IFixedLender(fixedLenderToSimulate)) {\\n                // Calculate the effects of borrowing fixedLenders\\n                if (borrowAmount != 0) {\\n                    vars.sumDebt += DecimalMath.getTokenAmountInUSD(\\n                        borrowAmount,\\n                        vars.oraclePrice,\\n                        market.decimals\\n                    );\\n                }\\n\\n                // Calculate the effects of redeeming fixedLenders\\n                // (having less collateral is the same as having more debt for this calculation)\\n                if (withdrawAmount != 0) {\\n                    vars.sumDebt += DecimalMath\\n                        .getTokenAmountInUSD(\\n                            withdrawAmount,\\n                            vars.oraclePrice,\\n                            market.decimals\\n                        )\\n                        .mul_(vars.collateralFactor);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumDebt) {\\n            return (vars.sumCollateral - vars.sumDebt, 0);\\n        } else {\\n            return (0, vars.sumDebt - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows a user to start participating in a market\\n     * @param book book in which the addMarket function will be applied to\\n     * @param fixedLenderAddress address used to retrieve the market data\\n     * @param who address of the user that it will start participating in a market/maturity\\n     */\\n    function addToMarket(\\n        Book storage book,\\n        address fixedLenderAddress,\\n        address who\\n    ) public {\\n        MarketsLib.Market storage marketToJoin = book.markets[\\n            fixedLenderAddress\\n        ];\\n\\n        if (marketToJoin.accountMembership[who] == true) {\\n            return;\\n        }\\n\\n        marketToJoin.accountMembership[who] = true;\\n\\n        book.accountAssets[who].push(IFixedLender(fixedLenderAddress));\\n        emit MarketEntered(fixedLenderAddress, who);\\n    }\\n}\\n\",\"keccak256\":\"0x7139c096e9b618db1ba3abf88481108c40a5bded5e008ef1e619325bdfbac1c2\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040526706f05b59d3b20000600455670f43fc2c04ee00006005553480156200002957600080fd5b5060405162003d3c38038062003d3c83398181016040528101906200004f91906200023c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000a56000801b33620000ac60201b60201c565b50620002b6565b620000be8282620000c260201b60201c565b5050565b620000d48282620001b360201b60201c565b620001af57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001546200021d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b60008151905062000236816200029c565b92915050565b6000602082840312156200024f57600080fd5b60006200025f8482850162000225565b91505092915050565b600062000275826200027c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002a78162000268565b8114620002b357600080fd5b50565b613a7680620002c66000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638c765e94116100de578063a843108111610097578063c299823811610071578063c299823814610497578063d547741f146104b3578063eafe967b146104cf578063ede4edd0146104eb5761018e565b8063a84310811461042f578063b35dd5dd1461044b578063c04f31ff1461047b5761018e565b80638c765e941461035457806391d148541461037257806397ce0d31146103a25780639cbda20e146103c0578063a217fddf146103dc578063a30c302d146103fa5761018e565b806336568abe1161014b5780635ec88c79116101255780635ec88c79146102b95780635efadbd1146102ea5780637adbf9731461031a5780637dc0d1d0146103365761018e565b806336568abe146102655780635cf232e6146102815780635d0aef8d1461029d5761018e565b806301ffc9a71461019357806305308b9f146101c3578063144348d5146101e1578063186db48f146101fd578063248a9ca3146102195780632f2ff15d14610249575b600080fd5b6101ad60048036038101906101a89190612c55565b610507565b6040516101ba919061303d565b60405180910390f35b6101cb610581565b6040516101d89190613273565b60405180910390f35b6101fb60048036038101906101f691906128ee565b610587565b005b61021760048036038101906102129190612b7b565b610705565b005b610233600480360381019061022e9190612bf0565b6109a6565b6040516102409190613058565b60405180910390f35b610263600480360381019061025e9190612c19565b6109c5565b005b61027f600480360381019061027a9190612c19565b6109ee565b005b61029b60048036038101906102969190612a8f565b610a71565b005b6102b760048036038101906102b2919061298d565b610d27565b005b6102d360048036038101906102ce91906128c5565b611087565b6040516102e192919061328e565b60405180910390f35b61030460048036038101906102ff9190612a04565b61114a565b6040516103119190613273565b60405180910390f35b610334600480360381019061032f91906128c5565b611491565b005b61033e611522565b60405161034b9190613073565b60405180910390f35b61035c611548565b6040516103699190613273565b60405180910390f35b61038c60048036038101906103879190612c19565b61154e565b604051610399919061303d565b60405180910390f35b6103aa6115b8565b6040516103b7919061301b565b60405180910390f35b6103da60048036038101906103d59190612a04565b611646565b005b6103e46117e8565b6040516103f19190613058565b60405180910390f35b610414600480360381019061040f91906128c5565b6117ef565b604051610426969594939291906130cb565b60405180910390f35b61044960048036038101906104449190612ce8565b6119a7565b005b61046560048036038101906104609190612ce8565b6119c7565b6040516104729190612fd7565b60405180910390f35b61049560048036038101906104909190612a53565b611a06565b005b6104b160048036038101906104ac9190612b36565b611ab8565b005b6104cd60048036038101906104c89190612c19565b611bf5565b005b6104e960048036038101906104e4919061292a565b611c1e565b005b610505600480360381019061050091906128c5565b611d88565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057a575061057982611eed565b5b9050919050565b60045481565b61059082611f57565b60017373E77FD64707E19727650491b92Dc89E296880EA63fbb4331e909184846040518463ffffffff1660e01b81526004016105ce9392919061317a565b60006040518083038186803b1580156105e657600080fd5b505af41580156105fa573d6000803e3d6000fd5b50505050600060017373E77FD64707E19727650491b92Dc89E296880EA63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876000806040518763ffffffff1660e01b8152600401610667969594939291906131b1565b604080518083038186803b15801561067e57600080fd5b505af4158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190612d3a565b91505060008111156107005760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016106f7919061308e565b60405180910390fd5b505050565b6000801b61071a81610715611fef565b611ff7565b6000858590509050600084849050905060008214806107395750808214155b1561077c57600f6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610773919061308e565b60405180910390fd5b60005b8281101561099c576107dd8888838181106107c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906107d891906128c5565b611f57565b858582818110610816577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356001800160008a8a8581811061085c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061087191906128c5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508787828181106108e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108fd91906128c5565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f687878481811061096d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516109819190613273565b60405180910390a2808061099490613786565b91505061077f565b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b6109ce826109a6565b6109df816109da611fef565b611ff7565b6109e98383612094565b505050565b6109f6611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a9061315a565b60405180910390fd5b610a6d8282612174565b5050565b6000801b610a8681610a81611fef565b611ff7565b6000600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615610b215760026040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b18919061308e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190612c7e565b73ffffffffffffffffffffffffffffffffffffffff1614610c0f5760076040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c06919061308e565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555085816003018190555084816000019080519060200190610c4d92919061262b565b5083816001019080519060200190610c6692919061262b565b50828160040160006101000a81548160ff021916908360ff1602179055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f87604051610d169190612fd7565b60405180910390a150505050505050565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d9957600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d90919061308e565b60405180910390fd5b600160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580610e485750600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15610e8b5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610e82919061308e565b60405180910390fd5b600060017373E77FD64707E19727650491b92Dc89E296880EA63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660008060006040518763ffffffff1660e01b8152600401610ef5969594939291906131b1565b604080518083038186803b158015610f0c57600080fd5b505af4158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f449190612d3a565b9150506000811415610f8e5760066040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610f85919061308e565b60405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8560006040518363ffffffff1660e01b8152600401610fcc929190612ff2565b604080518083038186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612d3a565b91505060006110358260045461225590919063ffffffff16565b90508084111561107d5760086040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611074919061308e565b60405180910390fd5b5050505050505050565b60008060017373E77FD64707E19727650491b92Dc89E296880EA63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660008060006040518763ffffffff1660e01b81526004016110f2969594939291906131b1565b604080518083038186803b15801561110957600080fd5b505af415801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190612d3a565b91509150915091565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061120e9190612ca7565b6040518263ffffffff1660e01b815260040161122a91906130a9565b60206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190612d11565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b15801561130257600080fd5b505afa158015611316573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061133f9190612ca7565b6040518263ffffffff1660e01b815260040161135b91906130a9565b60206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190612d11565b9050600061140c8584600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661227e565b9050600061146d8284600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166122dd565b90506114846005548261225590919063ffffffff16565b9450505050509392505050565b6000801b6114a6816114a1611fef565b611ff7565b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418826040516115169190612fd7565b60405180910390a15050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561163c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115f2575b5050505050905090565b600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116df576117e3565b600060017373E77FD64707E19727650491b92Dc89E296880EA63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686888760006040518763ffffffff1660e01b815260040161174896959493929190613212565b604080518083038186803b15801561175f57600080fd5b505af4158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190612d3a565b91505060008111156117e15760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016117d8919061308e565b60405180910390fd5b505b505050565b6000801b81565b60608060008060008061180187611f57565b6000600160000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001816001018260020160009054906101000a900460ff1683600301548460040160009054906101000a900460ff168c85805461188590613723565b80601f01602080910402602001604051908101604052809291908181526020018280546118b190613723565b80156118fe5780601f106118d3576101008083540402835291602001916118fe565b820191906000526020600020905b8154815290600101906020018083116118e157829003601f168201915b5050505050955084805461191190613723565b80601f016020809104026020016040519081016040528092919081815260200182805461193d90613723565b801561198a5780601f1061195f5761010080835404028352916020019161198a565b820191906000526020600020905b81548152906001019060200180831161196d57829003601f168201915b505050505094509650965096509650965096505091939550919395565b6000801b6119bc816119b7611fef565b611ff7565b816005819055505050565b600681815481106119d757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b611a1b81611a16611fef565b611ff7565b81600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055508273ffffffffffffffffffffffffffffffffffffffff167f46cab8d494e80b7c57b6490ccc1a5d13b11b7ae06b544fc99d7ee356221510cd83604051611aab9190613273565b60405180910390a2505050565b600082829050905060005b81811015611bef57611b21848483818110611b07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b1c91906128c5565b611f57565b60017373E77FD64707E19727650491b92Dc89E296880EA63a5234b429091868685818110611b78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b8d91906128c5565b336040518463ffffffff1660e01b8152600401611bac9392919061317a565b60006040518083038186803b158015611bc457600080fd5b505af4158015611bd8573d6000803e3d6000fd5b505050508080611be790613786565b915050611ac3565b50505050565b611bfe826109a6565b611c0f81611c0a611fef565b611ff7565b611c198383612174565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9057600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611c87919061308e565b60405180910390fd5b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580611d3f5750600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15611d825760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611d79919061308e565b60405180910390fd5b50505050565b611d9181611f57565b60008190506000808273ffffffffffffffffffffffffffffffffffffffff166355a1ac2e3360006040518363ffffffff1660e01b8152600401611dd5929190612ff2565b604080518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190612d3a565b9150915060008114611e6e5760136040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611e65919061308e565b60405180910390fd5b611e79843384611646565b60017373E77FD64707E19727650491b92Dc89E296880EA63ea5116dd909186336040518463ffffffff1660e01b8152600401611eb79392919061317a565b60006040518083038186803b158015611ecf57600080fd5b505af4158015611ee3573d6000803e3d6000fd5b5050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611fec5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611fe3919061308e565b60405180910390fd5b50565b600033905090565b612001828261154e565b612090576120268173ffffffffffffffffffffffffffffffffffffffff166014612331565b6120348360001c6020612331565b604051602001612045929190612f9d565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208791906130a9565b60405180910390fd5b5050565b61209e828261154e565b61217057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612115611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61217e828261154e565b1561225157600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506121f6611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a7640000828461226c9190613565565b61227691906133c3565b905092915050565b60008082600a61228e9190613447565b9050600081670de0b6b3a7640000876122a79190613565565b6122b191906133c3565b9050670de0b6b3a764000085826122c89190613565565b6122d291906133c3565b925050509392505050565b6000670de0b6b3a764000082600a6122f59190613447565b84670de0b6b3a76400008761230a9190613565565b61231491906133c3565b61231e9190613565565b61232891906133c3565b90509392505050565b6060600060028360026123449190613565565b61234e919061336d565b67ffffffffffffffff81111561238d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123bf5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061241d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026124e79190613565565b6124f1919061336d565b90505b60018111156125dd577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612596577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125d6906136f9565b90506124f4565b5060008414612621576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126189061313a565b60405180910390fd5b8091505092915050565b82805461263790613723565b90600052602060002090601f01602090048101928261265957600085556126a0565b82601f1061267257805160ff19168380011785556126a0565b828001600101855582156126a0579182015b8281111561269f578251825591602001919060010190612684565b5b5090506126ad91906126b1565b5090565b5b808211156126ca5760008160009055506001016126b2565b5090565b60006126e16126dc846132dc565b6132b7565b9050828152602081018484840111156126f957600080fd5b6127048482856136b7565b509392505050565b600061271f61271a846132dc565b6132b7565b90508281526020810184848401111561273757600080fd5b6127428482856136c6565b509392505050565b600081359050612759816139b6565b92915050565b60008083601f84011261277157600080fd5b8235905067ffffffffffffffff81111561278a57600080fd5b6020830191508360208202830111156127a257600080fd5b9250929050565b60008083601f8401126127bb57600080fd5b8235905067ffffffffffffffff8111156127d457600080fd5b6020830191508360208202830111156127ec57600080fd5b9250929050565b600081359050612802816139cd565b92915050565b600081359050612817816139e4565b92915050565b60008151905061282c816139fb565b92915050565b600082601f83011261284357600080fd5b81356128538482602086016126ce565b91505092915050565b600082601f83011261286d57600080fd5b815161287d84826020860161270c565b91505092915050565b60008135905061289581613a12565b92915050565b6000815190506128aa81613a12565b92915050565b6000813590506128bf81613a29565b92915050565b6000602082840312156128d757600080fd5b60006128e58482850161274a565b91505092915050565b6000806040838503121561290157600080fd5b600061290f8582860161274a565b92505060206129208582860161274a565b9150509250929050565b6000806000806080858703121561294057600080fd5b600061294e8782880161274a565b945050602061295f8782880161274a565b93505060406129708782880161274a565b92505060606129818782880161274a565b91505092959194509250565b600080600080600060a086880312156129a557600080fd5b60006129b38882890161274a565b95505060206129c48882890161274a565b94505060406129d58882890161274a565b93505060606129e68882890161274a565b92505060806129f788828901612886565b9150509295509295909350565b600080600060608486031215612a1957600080fd5b6000612a278682870161274a565b9350506020612a388682870161274a565b9250506040612a4986828701612886565b9150509250925092565b60008060408385031215612a6657600080fd5b6000612a748582860161274a565b9250506020612a8585828601612886565b9150509250929050565b600080600080600060a08688031215612aa757600080fd5b6000612ab58882890161274a565b9550506020612ac688828901612886565b945050604086013567ffffffffffffffff811115612ae357600080fd5b612aef88828901612832565b935050606086013567ffffffffffffffff811115612b0c57600080fd5b612b1888828901612832565b9250506080612b29888289016128b0565b9150509295509295909350565b60008060208385031215612b4957600080fd5b600083013567ffffffffffffffff811115612b6357600080fd5b612b6f8582860161275f565b92509250509250929050565b60008060008060408587031215612b9157600080fd5b600085013567ffffffffffffffff811115612bab57600080fd5b612bb78782880161275f565b9450945050602085013567ffffffffffffffff811115612bd657600080fd5b612be2878288016127a9565b925092505092959194509250565b600060208284031215612c0257600080fd5b6000612c10848285016127f3565b91505092915050565b60008060408385031215612c2c57600080fd5b6000612c3a858286016127f3565b9250506020612c4b8582860161274a565b9150509250929050565b600060208284031215612c6757600080fd5b6000612c7584828501612808565b91505092915050565b600060208284031215612c9057600080fd5b6000612c9e8482850161281d565b91505092915050565b600060208284031215612cb957600080fd5b600082015167ffffffffffffffff811115612cd357600080fd5b612cdf8482850161285c565b91505092915050565b600060208284031215612cfa57600080fd5b6000612d0884828501612886565b91505092915050565b600060208284031215612d2357600080fd5b6000612d318482850161289b565b91505092915050565b60008060408385031215612d4d57600080fd5b6000612d5b8582860161289b565b9250506020612d6c8582860161289b565b9150509250929050565b6000612d828383612d8e565b60208301905092915050565b612d97816135bf565b82525050565b612da6816135bf565b82525050565b612db5816135bf565b82525050565b6000612dc68261331d565b612dd08185613340565b9350612ddb8361330d565b8060005b83811015612e0c578151612df38882612d76565b9750612dfe83613333565b925050600181019050612ddf565b5085935050505092915050565b612e22816135d1565b82525050565b612e31816135dd565b82525050565b612e408161366f565b82525050565b612e4f8161366f565b82525050565b612e5e81613693565b82525050565b612e6d816136a5565b82525050565b6000612e7e82613328565b612e888185613351565b9350612e988185602086016136c6565b612ea1816138ba565b840191505092915050565b6000612eb782613328565b612ec18185613362565b9350612ed18185602086016136c6565b80840191505092915050565b6000612eea602083613351565b9150612ef5826138d8565b602082019050919050565b6000612f0d601783613362565b9150612f1882613901565b601782019050919050565b6000612f30601183613362565b9150612f3b8261392a565b601182019050919050565b6000612f53602f83613351565b9150612f5e82613953565b604082019050919050565b8082525050565b612f7981613658565b82525050565b612f8881613658565b82525050565b612f9781613662565b82525050565b6000612fa882612f00565b9150612fb48285612eac565b9150612fbf82612f23565b9150612fcb8284612eac565b91508190509392505050565b6000602082019050612fec6000830184612d9d565b92915050565b60006040820190506130076000830185612d9d565b6130146020830184612f70565b9392505050565b600060208201905081810360008301526130358184612dbb565b905092915050565b60006020820190506130526000830184612e19565b92915050565b600060208201905061306d6000830184612e28565b92915050565b60006020820190506130886000830184612e37565b92915050565b60006020820190506130a36000830184612e55565b92915050565b600060208201905081810360008301526130c38184612e73565b905092915050565b600060c08201905081810360008301526130e58189612e73565b905081810360208301526130f98188612e73565b90506131086040830187612e19565b6131156060830186612f70565b6131226080830185612f8e565b61312f60a0830184612d9d565b979650505050505050565b6000602082019050818103600083015261315381612edd565b9050919050565b6000602082019050818103600083015261317381612f46565b9050919050565b600060608201905061318f6000830186612f69565b61319c6020830185612dac565b6131a96040830184612dac565b949350505050565b600060c0820190506131c66000830189612f69565b6131d36020830188612e46565b6131e06040830187612dac565b6131ed6060830186612dac565b6131fa6080830185612e64565b61320760a0830184612e64565b979650505050505050565b600060c0820190506132276000830189612f69565b6132346020830188612e46565b6132416040830187612dac565b61324e6060830186612dac565b61325b6080830185612f7f565b61326860a0830184612e64565b979650505050505050565b60006020820190506132886000830184612f70565b92915050565b60006040820190506132a36000830185612f70565b6132b06020830184612f70565b9392505050565b60006132c16132d2565b90506132cd8282613755565b919050565b6000604051905090565b600067ffffffffffffffff8211156132f7576132f661388b565b5b613300826138ba565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061337882613658565b915061338383613658565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133b8576133b76137cf565b5b828201905092915050565b60006133ce82613658565b91506133d983613658565b9250826133e9576133e86137fe565b5b828204905092915050565b6000808291508390505b600185111561343e5780860481111561341a576134196137cf565b5b60018516156134295780820291505b8081029050613437856138cb565b94506133fe565b94509492505050565b600061345282613658565b915061345d83613662565b925061348a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613492565b905092915050565b6000826134a2576001905061355e565b816134b0576000905061355e565b81600181146134c657600281146134d0576134ff565b600191505061355e565b60ff8411156134e2576134e16137cf565b5b8360020a9150848211156134f9576134f86137cf565b5b5061355e565b5060208310610133831016604e8410600b84101617156135345782820a90508381111561352f5761352e6137cf565b5b61355e565b61354184848460016133f4565b92509050818404811115613558576135576137cf565b5b81810290505b9392505050565b600061357082613658565b915061357b83613658565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135b4576135b36137cf565b5b828202905092915050565b60006135ca82613638565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061361e826135bf565b9050919050565b6000819050613633826139a2565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061367a82613681565b9050919050565b600061368c82613638565b9050919050565b600061369e82613625565b9050919050565b60006136b082613658565b9050919050565b82818337600083830152505050565b60005b838110156136e45780820151818401526020810190506136c9565b838111156136f3576000848401525b50505050565b600061370482613658565b91506000821415613718576137176137cf565b5b600182039050919050565b6000600282049050600182168061373b57607f821691505b6020821081141561374f5761374e61385c565b5b50919050565b61375e826138ba565b810181811067ffffffffffffffff8211171561377d5761377c61388b565b5b80604052505050565b600061379182613658565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137c4576137c36137cf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c81106139b3576139b261382d565b5b50565b6139bf816135bf565b81146139ca57600080fd5b50565b6139d6816135dd565b81146139e157600080fd5b50565b6139ed816135e7565b81146139f857600080fd5b50565b613a0481613613565b8114613a0f57600080fd5b50565b613a1b81613658565b8114613a2657600080fd5b50565b613a3281613662565b8114613a3d57600080fd5b5056fea264697066735822122056f0b9e324d32cb00fc60ef2e016a4660d338b978ad55bd810f3ceed7155f79c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638c765e94116100de578063a843108111610097578063c299823811610071578063c299823814610497578063d547741f146104b3578063eafe967b146104cf578063ede4edd0146104eb5761018e565b8063a84310811461042f578063b35dd5dd1461044b578063c04f31ff1461047b5761018e565b80638c765e941461035457806391d148541461037257806397ce0d31146103a25780639cbda20e146103c0578063a217fddf146103dc578063a30c302d146103fa5761018e565b806336568abe1161014b5780635ec88c79116101255780635ec88c79146102b95780635efadbd1146102ea5780637adbf9731461031a5780637dc0d1d0146103365761018e565b806336568abe146102655780635cf232e6146102815780635d0aef8d1461029d5761018e565b806301ffc9a71461019357806305308b9f146101c3578063144348d5146101e1578063186db48f146101fd578063248a9ca3146102195780632f2ff15d14610249575b600080fd5b6101ad60048036038101906101a89190612c55565b610507565b6040516101ba919061303d565b60405180910390f35b6101cb610581565b6040516101d89190613273565b60405180910390f35b6101fb60048036038101906101f691906128ee565b610587565b005b61021760048036038101906102129190612b7b565b610705565b005b610233600480360381019061022e9190612bf0565b6109a6565b6040516102409190613058565b60405180910390f35b610263600480360381019061025e9190612c19565b6109c5565b005b61027f600480360381019061027a9190612c19565b6109ee565b005b61029b60048036038101906102969190612a8f565b610a71565b005b6102b760048036038101906102b2919061298d565b610d27565b005b6102d360048036038101906102ce91906128c5565b611087565b6040516102e192919061328e565b60405180910390f35b61030460048036038101906102ff9190612a04565b61114a565b6040516103119190613273565b60405180910390f35b610334600480360381019061032f91906128c5565b611491565b005b61033e611522565b60405161034b9190613073565b60405180910390f35b61035c611548565b6040516103699190613273565b60405180910390f35b61038c60048036038101906103879190612c19565b61154e565b604051610399919061303d565b60405180910390f35b6103aa6115b8565b6040516103b7919061301b565b60405180910390f35b6103da60048036038101906103d59190612a04565b611646565b005b6103e46117e8565b6040516103f19190613058565b60405180910390f35b610414600480360381019061040f91906128c5565b6117ef565b604051610426969594939291906130cb565b60405180910390f35b61044960048036038101906104449190612ce8565b6119a7565b005b61046560048036038101906104609190612ce8565b6119c7565b6040516104729190612fd7565b60405180910390f35b61049560048036038101906104909190612a53565b611a06565b005b6104b160048036038101906104ac9190612b36565b611ab8565b005b6104cd60048036038101906104c89190612c19565b611bf5565b005b6104e960048036038101906104e4919061292a565b611c1e565b005b610505600480360381019061050091906128c5565b611d88565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057a575061057982611eed565b5b9050919050565b60045481565b61059082611f57565b600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63fbb4331e909184846040518463ffffffff1660e01b81526004016105ce9392919061317a565b60006040518083038186803b1580156105e657600080fd5b505af41580156105fa573d6000803e3d6000fd5b505050506000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876000806040518763ffffffff1660e01b8152600401610667969594939291906131b1565b604080518083038186803b15801561067e57600080fd5b505af4158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190612d3a565b91505060008111156107005760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016106f7919061308e565b60405180910390fd5b505050565b6000801b61071a81610715611fef565b611ff7565b6000858590509050600084849050905060008214806107395750808214155b1561077c57600f6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610773919061308e565b60405180910390fd5b60005b8281101561099c576107dd8888838181106107c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906107d891906128c5565b611f57565b858582818110610816577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356001800160008a8a8581811061085c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061087191906128c5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508787828181106108e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108fd91906128c5565b73ffffffffffffffffffffffffffffffffffffffff167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f687878481811061096d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516109819190613273565b60405180910390a2808061099490613786565b91505061077f565b5050505050505050565b6000806000838152602001908152602001600020600101549050919050565b6109ce826109a6565b6109df816109da611fef565b611ff7565b6109e98383612094565b505050565b6109f6611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5a9061315a565b60405180910390fd5b610a6d8282612174565b5050565b6000801b610a8681610a81611fef565b611ff7565b6000600160000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160009054906101000a900460ff1615610b215760026040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610b18919061308e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1663b72ddee96040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7e57600080fd5b505afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190612c7e565b73ffffffffffffffffffffffffffffffffffffffff1614610c0f5760076040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610c06919061308e565b60405180910390fd5b60018160020160006101000a81548160ff02191690831515021790555085816003018190555084816000019080519060200190610c4d92919061262b565b5083816001019080519060200190610c6692919061262b565b50828160040160006101000a81548160ff021916908360ff1602179055506006879080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f87604051610d169190612fd7565b60405180910390a150505050505050565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d9957600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610d90919061308e565b60405180910390fd5b600160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580610e485750600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15610e8b5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610e82919061308e565b60405180910390fd5b6000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660008060006040518763ffffffff1660e01b8152600401610ef5969594939291906131b1565b604080518083038186803b158015610f0c57600080fd5b505af4158015610f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f449190612d3a565b9150506000811415610f8e5760066040517fede8a599000000000000000000000000000000000000000000000000000000008152600401610f85919061308e565b60405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8560006040518363ffffffff1660e01b8152600401610fcc929190612ff2565b604080518083038186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612d3a565b91505060006110358260045461225590919063ffffffff16565b90508084111561107d5760086040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611074919061308e565b60405180910390fd5b5050505050505050565b600080600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660008060006040518763ffffffff1660e01b81526004016110f2969594939291906131b1565b604080518083038186803b15801561110957600080fd5b505af415801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190612d3a565b91509150915091565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b1580156111d157600080fd5b505afa1580156111e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061120e9190612ca7565b6040518263ffffffff1660e01b815260040161122a91906130a9565b60206040518083038186803b15801561124257600080fd5b505afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190612d11565b90506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aedd0eb8673ffffffffffffffffffffffffffffffffffffffff166391f3e4726040518163ffffffff1660e01b815260040160006040518083038186803b15801561130257600080fd5b505afa158015611316573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061133f9190612ca7565b6040518263ffffffff1660e01b815260040161135b91906130a9565b60206040518083038186803b15801561137357600080fd5b505afa158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190612d11565b9050600061140c8584600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661227e565b9050600061146d8284600160000160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff166122dd565b90506114846005548261225590919063ffffffff16565b9450505050509392505050565b6000801b6114a6816114a1611fef565b611ff7565b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418826040516115169190612fd7565b60405180910390a15050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561163c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115f2575b5050505050905090565b600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116df576117e3565b6000600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63c7c4db5c9091600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686888760006040518763ffffffff1660e01b815260040161174896959493929190613212565b604080518083038186803b15801561175f57600080fd5b505af4158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190612d3a565b91505060008111156117e15760056040517fede8a5990000000000000000000000000000000000000000000000000000000081526004016117d8919061308e565b60405180910390fd5b505b505050565b6000801b81565b60608060008060008061180187611f57565b6000600160000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001816001018260020160009054906101000a900460ff1683600301548460040160009054906101000a900460ff168c85805461188590613723565b80601f01602080910402602001604051908101604052809291908181526020018280546118b190613723565b80156118fe5780601f106118d3576101008083540402835291602001916118fe565b820191906000526020600020905b8154815290600101906020018083116118e157829003601f168201915b5050505050955084805461191190613723565b80601f016020809104026020016040519081016040528092919081815260200182805461193d90613723565b801561198a5780601f1061195f5761010080835404028352916020019161198a565b820191906000526020600020905b81548152906001019060200180831161196d57829003601f168201915b505050505094509650965096509650965096505091939550919395565b6000801b6119bc816119b7611fef565b611ff7565b816005819055505050565b600681815481106119d757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b611a1b81611a16611fef565b611ff7565b81600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055508273ffffffffffffffffffffffffffffffffffffffff167f46cab8d494e80b7c57b6490ccc1a5d13b11b7ae06b544fc99d7ee356221510cd83604051611aab9190613273565b60405180910390a2505050565b600082829050905060005b81811015611bef57611b21848483818110611b07577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b1c91906128c5565b611f57565b600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63a5234b429091868685818110611b78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b8d91906128c5565b336040518463ffffffff1660e01b8152600401611bac9392919061317a565b60006040518083038186803b158015611bc457600080fd5b505af4158015611bd8573d6000803e3d6000fd5b505050508080611be790613786565b915050611ac3565b50505050565b611bfe826109a6565b611c0f81611c0a611fef565b611ff7565b611c198383612174565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c9057600d6040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611c87919061308e565b60405180910390fd5b600160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161580611d3f5750600160000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16155b15611d825760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611d79919061308e565b60405180910390fd5b50505050565b611d9181611f57565b60008190506000808273ffffffffffffffffffffffffffffffffffffffff166355a1ac2e3360006040518363ffffffff1660e01b8152600401611dd5929190612ff2565b604080518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190612d3a565b9150915060008114611e6e5760136040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611e65919061308e565b60405180910390fd5b611e79843384611646565b600173__$a5e3e26db51d661f8cd2686e868ae9d1a5$__63ea5116dd909186336040518463ffffffff1660e01b8152600401611eb79392919061317a565b60006040518083038186803b158015611ecf57600080fd5b505af4158015611ee3573d6000803e3d6000fd5b5050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600160000160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16611fec5760016040517fede8a599000000000000000000000000000000000000000000000000000000008152600401611fe3919061308e565b60405180910390fd5b50565b600033905090565b612001828261154e565b612090576120268173ffffffffffffffffffffffffffffffffffffffff166014612331565b6120348360001c6020612331565b604051602001612045929190612f9d565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208791906130a9565b60405180910390fd5b5050565b61209e828261154e565b61217057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612115611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61217e828261154e565b1561225157600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506121f6611fef565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a7640000828461226c9190613565565b61227691906133c3565b905092915050565b60008082600a61228e9190613447565b9050600081670de0b6b3a7640000876122a79190613565565b6122b191906133c3565b9050670de0b6b3a764000085826122c89190613565565b6122d291906133c3565b925050509392505050565b6000670de0b6b3a764000082600a6122f59190613447565b84670de0b6b3a76400008761230a9190613565565b61231491906133c3565b61231e9190613565565b61232891906133c3565b90509392505050565b6060600060028360026123449190613565565b61234e919061336d565b67ffffffffffffffff81111561238d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156123bf5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061241d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026124e79190613565565b6124f1919061336d565b90505b60018111156125dd577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612596577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125d6906136f9565b90506124f4565b5060008414612621576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126189061313a565b60405180910390fd5b8091505092915050565b82805461263790613723565b90600052602060002090601f01602090048101928261265957600085556126a0565b82601f1061267257805160ff19168380011785556126a0565b828001600101855582156126a0579182015b8281111561269f578251825591602001919060010190612684565b5b5090506126ad91906126b1565b5090565b5b808211156126ca5760008160009055506001016126b2565b5090565b60006126e16126dc846132dc565b6132b7565b9050828152602081018484840111156126f957600080fd5b6127048482856136b7565b509392505050565b600061271f61271a846132dc565b6132b7565b90508281526020810184848401111561273757600080fd5b6127428482856136c6565b509392505050565b600081359050612759816139b6565b92915050565b60008083601f84011261277157600080fd5b8235905067ffffffffffffffff81111561278a57600080fd5b6020830191508360208202830111156127a257600080fd5b9250929050565b60008083601f8401126127bb57600080fd5b8235905067ffffffffffffffff8111156127d457600080fd5b6020830191508360208202830111156127ec57600080fd5b9250929050565b600081359050612802816139cd565b92915050565b600081359050612817816139e4565b92915050565b60008151905061282c816139fb565b92915050565b600082601f83011261284357600080fd5b81356128538482602086016126ce565b91505092915050565b600082601f83011261286d57600080fd5b815161287d84826020860161270c565b91505092915050565b60008135905061289581613a12565b92915050565b6000815190506128aa81613a12565b92915050565b6000813590506128bf81613a29565b92915050565b6000602082840312156128d757600080fd5b60006128e58482850161274a565b91505092915050565b6000806040838503121561290157600080fd5b600061290f8582860161274a565b92505060206129208582860161274a565b9150509250929050565b6000806000806080858703121561294057600080fd5b600061294e8782880161274a565b945050602061295f8782880161274a565b93505060406129708782880161274a565b92505060606129818782880161274a565b91505092959194509250565b600080600080600060a086880312156129a557600080fd5b60006129b38882890161274a565b95505060206129c48882890161274a565b94505060406129d58882890161274a565b93505060606129e68882890161274a565b92505060806129f788828901612886565b9150509295509295909350565b600080600060608486031215612a1957600080fd5b6000612a278682870161274a565b9350506020612a388682870161274a565b9250506040612a4986828701612886565b9150509250925092565b60008060408385031215612a6657600080fd5b6000612a748582860161274a565b9250506020612a8585828601612886565b9150509250929050565b600080600080600060a08688031215612aa757600080fd5b6000612ab58882890161274a565b9550506020612ac688828901612886565b945050604086013567ffffffffffffffff811115612ae357600080fd5b612aef88828901612832565b935050606086013567ffffffffffffffff811115612b0c57600080fd5b612b1888828901612832565b9250506080612b29888289016128b0565b9150509295509295909350565b60008060208385031215612b4957600080fd5b600083013567ffffffffffffffff811115612b6357600080fd5b612b6f8582860161275f565b92509250509250929050565b60008060008060408587031215612b9157600080fd5b600085013567ffffffffffffffff811115612bab57600080fd5b612bb78782880161275f565b9450945050602085013567ffffffffffffffff811115612bd657600080fd5b612be2878288016127a9565b925092505092959194509250565b600060208284031215612c0257600080fd5b6000612c10848285016127f3565b91505092915050565b60008060408385031215612c2c57600080fd5b6000612c3a858286016127f3565b9250506020612c4b8582860161274a565b9150509250929050565b600060208284031215612c6757600080fd5b6000612c7584828501612808565b91505092915050565b600060208284031215612c9057600080fd5b6000612c9e8482850161281d565b91505092915050565b600060208284031215612cb957600080fd5b600082015167ffffffffffffffff811115612cd357600080fd5b612cdf8482850161285c565b91505092915050565b600060208284031215612cfa57600080fd5b6000612d0884828501612886565b91505092915050565b600060208284031215612d2357600080fd5b6000612d318482850161289b565b91505092915050565b60008060408385031215612d4d57600080fd5b6000612d5b8582860161289b565b9250506020612d6c8582860161289b565b9150509250929050565b6000612d828383612d8e565b60208301905092915050565b612d97816135bf565b82525050565b612da6816135bf565b82525050565b612db5816135bf565b82525050565b6000612dc68261331d565b612dd08185613340565b9350612ddb8361330d565b8060005b83811015612e0c578151612df38882612d76565b9750612dfe83613333565b925050600181019050612ddf565b5085935050505092915050565b612e22816135d1565b82525050565b612e31816135dd565b82525050565b612e408161366f565b82525050565b612e4f8161366f565b82525050565b612e5e81613693565b82525050565b612e6d816136a5565b82525050565b6000612e7e82613328565b612e888185613351565b9350612e988185602086016136c6565b612ea1816138ba565b840191505092915050565b6000612eb782613328565b612ec18185613362565b9350612ed18185602086016136c6565b80840191505092915050565b6000612eea602083613351565b9150612ef5826138d8565b602082019050919050565b6000612f0d601783613362565b9150612f1882613901565b601782019050919050565b6000612f30601183613362565b9150612f3b8261392a565b601182019050919050565b6000612f53602f83613351565b9150612f5e82613953565b604082019050919050565b8082525050565b612f7981613658565b82525050565b612f8881613658565b82525050565b612f9781613662565b82525050565b6000612fa882612f00565b9150612fb48285612eac565b9150612fbf82612f23565b9150612fcb8284612eac565b91508190509392505050565b6000602082019050612fec6000830184612d9d565b92915050565b60006040820190506130076000830185612d9d565b6130146020830184612f70565b9392505050565b600060208201905081810360008301526130358184612dbb565b905092915050565b60006020820190506130526000830184612e19565b92915050565b600060208201905061306d6000830184612e28565b92915050565b60006020820190506130886000830184612e37565b92915050565b60006020820190506130a36000830184612e55565b92915050565b600060208201905081810360008301526130c38184612e73565b905092915050565b600060c08201905081810360008301526130e58189612e73565b905081810360208301526130f98188612e73565b90506131086040830187612e19565b6131156060830186612f70565b6131226080830185612f8e565b61312f60a0830184612d9d565b979650505050505050565b6000602082019050818103600083015261315381612edd565b9050919050565b6000602082019050818103600083015261317381612f46565b9050919050565b600060608201905061318f6000830186612f69565b61319c6020830185612dac565b6131a96040830184612dac565b949350505050565b600060c0820190506131c66000830189612f69565b6131d36020830188612e46565b6131e06040830187612dac565b6131ed6060830186612dac565b6131fa6080830185612e64565b61320760a0830184612e64565b979650505050505050565b600060c0820190506132276000830189612f69565b6132346020830188612e46565b6132416040830187612dac565b61324e6060830186612dac565b61325b6080830185612f7f565b61326860a0830184612e64565b979650505050505050565b60006020820190506132886000830184612f70565b92915050565b60006040820190506132a36000830185612f70565b6132b06020830184612f70565b9392505050565b60006132c16132d2565b90506132cd8282613755565b919050565b6000604051905090565b600067ffffffffffffffff8211156132f7576132f661388b565b5b613300826138ba565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061337882613658565b915061338383613658565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133b8576133b76137cf565b5b828201905092915050565b60006133ce82613658565b91506133d983613658565b9250826133e9576133e86137fe565b5b828204905092915050565b6000808291508390505b600185111561343e5780860481111561341a576134196137cf565b5b60018516156134295780820291505b8081029050613437856138cb565b94506133fe565b94509492505050565b600061345282613658565b915061345d83613662565b925061348a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613492565b905092915050565b6000826134a2576001905061355e565b816134b0576000905061355e565b81600181146134c657600281146134d0576134ff565b600191505061355e565b60ff8411156134e2576134e16137cf565b5b8360020a9150848211156134f9576134f86137cf565b5b5061355e565b5060208310610133831016604e8410600b84101617156135345782820a90508381111561352f5761352e6137cf565b5b61355e565b61354184848460016133f4565b92509050818404811115613558576135576137cf565b5b81810290505b9392505050565b600061357082613658565b915061357b83613658565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135b4576135b36137cf565b5b828202905092915050565b60006135ca82613638565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061361e826135bf565b9050919050565b6000819050613633826139a2565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061367a82613681565b9050919050565b600061368c82613638565b9050919050565b600061369e82613625565b9050919050565b60006136b082613658565b9050919050565b82818337600083830152505050565b60005b838110156136e45780820151818401526020810190506136c9565b838111156136f3576000848401525b50505050565b600061370482613658565b91506000821415613718576137176137cf565b5b600182039050919050565b6000600282049050600182168061373b57607f821691505b6020821081141561374f5761374e61385c565b5b50919050565b61375e826138ba565b810181811067ffffffffffffffff8211171561377d5761377c61388b565b5b80604052505050565b600061379182613658565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137c4576137c36137cf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b601c81106139b3576139b261382d565b5b50565b6139bf816135bf565b81146139ca57600080fd5b50565b6139d6816135dd565b81146139e157600080fd5b50565b6139ed816135e7565b81146139f857600080fd5b50565b613a0481613613565b8114613a0f57600080fd5b50565b613a1b81613658565b8114613a2657600080fd5b50565b613a3281613662565b8114613a3d57600080fd5b5056fea264697066735822122056f0b9e324d32cb00fc60ef2e016a4660d338b978ad55bd810f3ceed7155f79c64736f6c63430008040033",
  "libraries": {
    "MarketsLib": "0x73E77FD64707E19727650491b92Dc89E296880EA",
    "DecimalMath": "0xC2ca02660Fe270aA11Ee1649AE024F9825f08C17"
  },
  "devdoc": {
    "events": {
      "MarketEntered(address,address)": {
        "params": {
          "account": "address of the user that just entered a market",
          "fixedLender": "address of the market that the user entered"
        }
      },
      "MarketExited(address,address)": {
        "params": {
          "account": "address of the user that just left a market",
          "fixedLender": "address of the market that the user just left"
        }
      },
      "MarketListed(address)": {
        "params": {
          "fixedLender": "address of the fixedLender market that it was listed"
        }
      },
      "NewBorrowCap(address,uint256)": {
        "params": {
          "fixedLender": "address of the lender that has a new borrow cap",
          "newBorrowCap": "new borrow cap expressed with 1e18 precision for the given market.                     0 = means no cap"
        }
      },
      "NewCollateralFactor(address,uint256)": {
        "params": {
          "fixedLender": "address of the market that has a new collateral factor.",
          "newCollateralFactor": "collateral factor for the underlying asset."
        }
      },
      "OracleChanged(address)": {
        "params": {
          "newOracle": "address of the new oracle that is used to calculate liquidity"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "enableMarket(address,uint256,string,string,uint8)": {
        "details": "Function to enable a certain FixedLender market",
        "params": {
          "collateralFactor": "fixedLender's collateral factor for the underlying asset",
          "decimals": "decimals of the market's underlying asset",
          "fixedLender": "address to add to the protocol",
          "name": "name of the market's underlying asset",
          "symbol": "symbol of the market's underlying asset"
        }
      },
      "enterMarkets(address[])": {
        "details": "Allows wallet to enter certain markets (fixedLenderDAI, fixedLenderETH, etc)      By performing this action, the wallet's money could be used as collateral",
        "params": {
          "fixedLenders": "contracts addresses to enable for `msg.sender`"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,      or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "fixedLenderAddress": "The address of the asset to be removed"
        }
      },
      "getAccountLiquidity(address)": {
        "details": "Function to get account's liquidity",
        "params": {
          "account": "wallet to retrieve liquidity"
        }
      },
      "getMarketAddresses()": {
        "details": "Function to retrieve all markets"
      },
      "getMarketData(address)": {
        "details": "Given a fixedLender address, it returns the corresponding market data",
        "params": {
          "fixedLenderAddress": "Address of the contract where we are getting the data"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidateAllowed(address,address,address,address,uint256)": {
        "details": "Function to allow/reject liquidation of assets. This function can be called      externally, but only will have effect when called from a fixedLender.",
        "params": {
          "borrower": "address which the assets are being liquidated",
          "fixedLenderBorrowed": "market from where the debt is pending",
          "fixedLenderCollateral": "market where the assets will be liquidated (should be msg.sender on FixedLender.sol)",
          "liquidator": "address that is liquidating the assets",
          "repayAmount": "amount to be repaid from the debt (outstanding debt * close factor should be bigger than this value)"
        }
      },
      "liquidateCalculateSeizeAmount(address,address,uint256)": {
        "details": "Function to calculate the amount of assets to be seized      - when a position is undercollaterized it should be repaid and this functions calculates the        amount of collateral to be seized",
        "params": {
          "actualRepayAmount": "repay amount in the borrowed asset",
          "fixedLenderBorrowed": "market from where the debt is pending",
          "fixedLenderCollateral": "market where the assets will be liquidated (should be msg.sender on FixedLender.sol)"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seizeAllowed(address,address,address,address)": {
        "details": "Function to allow/reject seizing of assets. This function can be called      externally, but only will have effect when called from a fixedLender.",
        "params": {
          "borrower": "address to validate where the assets will be removed",
          "fixedLenderBorrowed": "market from where the debt will be paid",
          "fixedLenderCollateral": "market where the assets will be seized (should be msg.sender on FixedLender.sol)",
          "liquidator": "address to validate where the seized assets will be received"
        }
      },
      "setCollateralFactor(address,uint256)": {
        "params": {
          "collateralFactor": "collateral factor for the underlying asset.",
          "fixedLender": "address of the market to change collateral factor for."
        }
      },
      "setLiquidationIncentive(uint256)": {
        "params": {
          "_liquidationIncentive": "new liquidation incentive. It's a factor, so 15% would be 1.15e18"
        }
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "params": {
          "fixedLenders": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "setOracle(address)": {
        "details": "Function to set Oracle's to be used",
        "params": {
          "_priceOracleAddress": "address of the new oracle"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "validateAccountShortfall(address,address,uint256)": {
        "details": "Function to be called before someone wants to interact with its smart pool position.      This function checks if the user has no outstanding debts.      This function is called indirectly from fixedLender contracts(withdraw), eToken transfers and directly from      this contract when the user wants to exit a market.",
        "params": {
          "account": "address of the user to check for possible shortfall",
          "amount": "amount that the user wants to withdraw or transfer",
          "fixedLenderAddress": "address of the fixedLender where the smart pool belongs"
        }
      },
      "validateBorrowMP(address,address)": {
        "details": "Hook function to be called after calling the poolAccounting borrowMP function. Validates      that the current state of the position and system are valid (liquidity)",
        "params": {
          "borrower": "address of the user that will borrow money from a maturity date",
          "fixedLenderAddress": "address of the fixedLender that will lend money in a maturity"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MarketEntered(address,address)": {
        "notice": "Event emitted when a user enters a market to use his deposit as collateral         for a loan"
      },
      "MarketExited(address,address)": {
        "notice": "Event emitted when a user leaves a market. This means that he would stop using         his deposit as collateral and it won't ask for any loans in this market"
      },
      "MarketListed(address)": {
        "notice": "Event emitted when a new market is listed for borrow/lending"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Event emitted when a new borrow cap has been set for a certain fixedLender         If newBorrowCap is 0, that means that there's no cap"
      },
      "NewCollateralFactor(address,uint256)": {
        "notice": "emitted when a collateral factor is changed by admin."
      },
      "OracleChanged(address)": {
        "notice": "Event emitted when a new Oracle has been set"
      }
    },
    "kind": "user",
    "methods": {
      "exitMarket(address)": {
        "notice": "Removes fixedLender from sender's account liquidity calculation"
      },
      "setCollateralFactor(address,uint256)": {
        "notice": "sets the collateral factor for a certain fixedLender."
      },
      "setLiquidationIncentive(uint256)": {
        "notice": "Set liquidation incentive for the whole ecosystem"
      },
      "setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given fixedLender markets. Borrowing that brings total borrows to or above borrow cap will revert."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3583,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "book",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Book)9431_storage"
      },
      {
        "astId": 3586,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "closeFactor",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3591,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "liquidationIncentive",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3594,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "marketsAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3597,
        "contract": "contracts/Auditor.sol:Auditor",
        "label": "oracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IOracle)9078"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IFixedLender)9030)dyn_storage": {
        "base": "t_contract(IFixedLender)9030",
        "encoding": "dynamic_array",
        "label": "contract IFixedLender[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFixedLender)9030": {
        "encoding": "inplace",
        "label": "contract IFixedLender",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9078": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(IFixedLender)9030)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IFixedLender[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IFixedLender)9030)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Market)9446_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketsLib.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)9446_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Book)9431_storage": {
        "encoding": "inplace",
        "label": "struct MarketsLib.Book",
        "members": [
          {
            "astId": 9420,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "markets",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Market)9446_storage)"
          },
          {
            "astId": 9424,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "borrowCaps",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9430,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "accountAssets",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_array(t_contract(IFixedLender)9030)dyn_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Market)9446_storage": {
        "encoding": "inplace",
        "label": "struct MarketsLib.Market",
        "members": [
          {
            "astId": 9433,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9435,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9437,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "isListed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9439,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9441,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "decimals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 9445,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "accountMembership",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Auditor.sol:Auditor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}