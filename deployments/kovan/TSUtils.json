{
  "address": "0x9Cb53e5c24Fa1d1cd68c19f5d6f9135E7600bdDb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "alternativeState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolStateMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INTERVAL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxPools",
          "type": "uint8"
        }
      ],
      "name": "getPoolState",
      "outputs": [
        {
          "internalType": "enum TSUtils.State",
          "name": "",
          "type": "TSUtils.State"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isPoolID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestampFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestampTo",
          "type": "uint256"
        }
      ],
      "name": "secondsPre",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb046e324f7da0608cc8cf12df60fa923251d1df553f2ae650759a796f399dc69",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x9Cb53e5c24Fa1d1cd68c19f5d6f9135E7600bdDb",
    "transactionIndex": 11,
    "gasUsed": "373002",
    "logsBloom": "0x
    "blockHash": "0xdefef53c29a2b7ea59dab9846d49cae4bbad100a1b1060691119abc33bf8e9e4",
    "transactionHash": "0xb046e324f7da0608cc8cf12df60fa923251d1df553f2ae650759a796f399dc69",
    "logs": [],
    "blockNumber": 30309706,
    "cumulativeGasUsed": "10226609",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b29e96ef9678c31f24803a302d5ef6ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alternativeState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolStateMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPools\",\"type\":\"uint8\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"enum TSUtils.State\",\"name\":\"\",\"type\":\"TSUtils.State\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isPoolID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestampFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampTo\",\"type\":\"uint256\"}],\"name\":\"secondsPre\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPoolState(uint256,uint256,uint8)\":{\"params\":{\"currentTimestamp\":\"timestamp of the current time\",\"maxPools\":\"number of pools available in the time horizon to be available\",\"timestamp\":\"used as POOLID\"}},\"isPoolID(uint256)\":{\"params\":{\"timestamp\":\"to validate if is a POOLID\"}},\"secondsPre(uint256,uint256)\":{\"params\":{\"timestampFrom\":\"to calculate the difference in seconds from a date\",\"timestampTo\":\"to calculate the difference in seconds to a date\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPoolState(uint256,uint256,uint8)\":{\"notice\":\"Function to return a pool _time_ state based on the current time,         maxPools available, and the INTERVALS configured, all to return         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\"},\"isPoolID(uint256)\":{\"notice\":\"Function that validates if a certain timestamp is a POOLID based on the INTERVALS         configured for this library\"},\"secondsPre(uint256,uint256)\":{\"notice\":\"Function to calculate how many seconds are left to a certain date\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/TSUtils.sol\":\"TSUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nlibrary TSUtils {\\n    enum State {\\n        NONE,\\n        INVALID,\\n        MATURED,\\n        VALID,\\n        NOT_READY\\n    }\\n\\n    error UnmatchedPoolState(uint8 state, uint8 requiredState);\\n    error UnmatchedPoolStateMultiple(\\n        uint8 state,\\n        uint8 requiredState,\\n        uint8 alternativeState\\n    );\\n\\n    uint32 public constant INTERVAL = 7 days;\\n\\n    /**\\n     * @notice Function to calculate how many seconds are left to a certain date\\n     * @param timestampFrom to calculate the difference in seconds from a date\\n     * @param timestampTo to calculate the difference in seconds to a date\\n     */\\n    function secondsPre(uint256 timestampFrom, uint256 timestampTo)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n    }\\n\\n    /**\\n     * @notice Function to return a pool _time_ state based on the current time,\\n     *         maxPools available, and the INTERVALS configured, all to return\\n     *         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED\\n     * @param currentTimestamp timestamp of the current time\\n     * @param timestamp used as POOLID\\n     * @param maxPools number of pools available in the time horizon to be available\\n     */\\n    function getPoolState(\\n        uint256 currentTimestamp,\\n        uint256 timestamp,\\n        uint8 maxPools\\n    ) public pure returns (State) {\\n        if (timestamp % INTERVAL != 0) {\\n            return State.INVALID;\\n        }\\n\\n        if (timestamp < currentTimestamp) {\\n            return State.MATURED;\\n        }\\n\\n        uint256 totalSecondsForEnabledPools = INTERVAL * maxPools;\\n        if (\\n            timestamp >\\n            currentTimestamp -\\n                (currentTimestamp % INTERVAL) +\\n                totalSecondsForEnabledPools\\n        ) {\\n            return State.NOT_READY;\\n        }\\n\\n        return State.VALID;\\n    }\\n\\n    /**\\n     * @notice Function that validates if a certain timestamp is a POOLID based on the INTERVALS\\n     *         configured for this library\\n     * @param timestamp to validate if is a POOLID\\n     */\\n    function isPoolID(uint256 timestamp) public pure returns (bool) {\\n        return (timestamp % INTERVAL) == 0;\\n    }\\n\\n    /**\\n     * @dev Function to verify that a maturityDate is VALID, MATURED, NOT_READY or INVALID.\\n     *      If expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n     * @param maturityDate timestamp of the maturity date to be verified\\n     * @param requiredState state required by the caller to be verified (see TSUtils.State() for description)\\n     * @param alternativeState state required by the caller to be verified (see TSUtils.State() for description)\\n     */\\n    function validateRequiredPoolState(\\n        uint8 maxFuturePools,\\n        uint256 maturityDate,\\n        State requiredState,\\n        State alternativeState\\n    ) internal view {\\n        State poolState = getPoolState(\\n            block.timestamp,\\n            maturityDate,\\n            maxFuturePools\\n        );\\n\\n        if (poolState != requiredState && poolState != alternativeState) {\\n            if (alternativeState == State.NONE) {\\n                revert UnmatchedPoolState(\\n                    uint8(poolState),\\n                    uint8(requiredState)\\n                );\\n            }\\n            revert UnmatchedPoolStateMultiple(\\n                uint8(poolState),\\n                uint8(requiredState),\\n                uint8(alternativeState)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to return all the future pool IDs give in a certain time horizon that\\n     *         gets calculated using a startTime, the amount of pools to returns, and the INTERVAL\\n     *         configured in this library\\n     */\\n    function futurePools(uint8 maxFuturePools)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory poolIDs = new uint256[](maxFuturePools);\\n        uint256 timestamp = block.timestamp - (block.timestamp % INTERVAL);\\n        for (uint256 i = 0; i < maxFuturePools; i++) {\\n            timestamp += INTERVAL;\\n            poolIDs[i] = timestamp;\\n        }\\n        return poolIDs;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b88ac2787f2cd0a2d0b23d2ad94c49361127b3636ead1c7227aea5a03dc0b6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6105cd610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063883d07091461005b57806389facb201461008b578063b142980a146100a9578063da4b8a4c146100d9575b600080fd5b61007560048036038101906100709190610244565b610109565b6040516100829190610341565b60405180910390f35b61009361012e565b6040516100a0919061035c565b60405180910390f35b6100c360048036038101906100be919061021b565b610135565b6040516100d0919061030b565b60405180910390f35b6100f360048036038101906100ee9190610280565b610155565b6040516101009190610326565b60405180910390f35b6000818310610119576000610126565b8282610125919061040b565b5b905092915050565b62093a8081565b60008062093a8063ffffffff168361014d9190610497565b149050919050565b60008062093a8063ffffffff168461016d9190610497565b1461017b57600190506101ea565b8383101561018c57600290506101ea565b60008260ff1662093a806101a091906103cd565b63ffffffff1690508062093a8063ffffffff16866101be9190610497565b866101c9919061040b565b6101d39190610377565b8411156101e45760049150506101ea565b60039150505b9392505050565b60008135905061020081610569565b92915050565b60008135905061021581610580565b92915050565b60006020828403121561022d57600080fd5b600061023b848285016101f1565b91505092915050565b6000806040838503121561025757600080fd5b6000610265858286016101f1565b9250506020610276858286016101f1565b9150509250929050565b60008060006060848603121561029557600080fd5b60006102a3868287016101f1565b93505060206102b4868287016101f1565b92505060406102c586828701610206565b9150509250925092565b6102d88161043f565b82525050565b6102e781610485565b82525050565b6102f68161045e565b82525050565b61030581610468565b82525050565b600060208201905061032060008301846102cf565b92915050565b600060208201905061033b60008301846102de565b92915050565b600060208201905061035660008301846102ed565b92915050565b600060208201905061037160008301846102fc565b92915050565b60006103828261045e565b915061038d8361045e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103c2576103c16104c8565b5b828201905092915050565b60006103d882610468565b91506103e383610468565b92508163ffffffff0483118215151615610400576103ff6104c8565b5b828202905092915050565b60006104168261045e565b91506104218361045e565b925082821015610434576104336104c8565b5b828203905092915050565b60008115159050919050565b600081905061045982610555565b919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006104908261044b565b9050919050565b60006104a28261045e565b91506104ad8361045e565b9250826104bd576104bc6104f7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061056657610565610526565b5b50565b6105728161045e565b811461057d57600080fd5b50565b61058981610478565b811461059457600080fd5b5056fea2646970667358221220aed47a1aa4718152950eef0d10e77b10dd5c3fb944d4f391f90507806cc4787f64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063883d07091461005b57806389facb201461008b578063b142980a146100a9578063da4b8a4c146100d9575b600080fd5b61007560048036038101906100709190610244565b610109565b6040516100829190610341565b60405180910390f35b61009361012e565b6040516100a0919061035c565b60405180910390f35b6100c360048036038101906100be919061021b565b610135565b6040516100d0919061030b565b60405180910390f35b6100f360048036038101906100ee9190610280565b610155565b6040516101009190610326565b60405180910390f35b6000818310610119576000610126565b8282610125919061040b565b5b905092915050565b62093a8081565b60008062093a8063ffffffff168361014d9190610497565b149050919050565b60008062093a8063ffffffff168461016d9190610497565b1461017b57600190506101ea565b8383101561018c57600290506101ea565b60008260ff1662093a806101a091906103cd565b63ffffffff1690508062093a8063ffffffff16866101be9190610497565b866101c9919061040b565b6101d39190610377565b8411156101e45760049150506101ea565b60039150505b9392505050565b60008135905061020081610569565b92915050565b60008135905061021581610580565b92915050565b60006020828403121561022d57600080fd5b600061023b848285016101f1565b91505092915050565b6000806040838503121561025757600080fd5b6000610265858286016101f1565b9250506020610276858286016101f1565b9150509250929050565b60008060006060848603121561029557600080fd5b60006102a3868287016101f1565b93505060206102b4868287016101f1565b92505060406102c586828701610206565b9150509250925092565b6102d88161043f565b82525050565b6102e781610485565b82525050565b6102f68161045e565b82525050565b61030581610468565b82525050565b600060208201905061032060008301846102cf565b92915050565b600060208201905061033b60008301846102de565b92915050565b600060208201905061035660008301846102ed565b92915050565b600060208201905061037160008301846102fc565b92915050565b60006103828261045e565b915061038d8361045e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103c2576103c16104c8565b5b828201905092915050565b60006103d882610468565b91506103e383610468565b92508163ffffffff0483118215151615610400576103ff6104c8565b5b828202905092915050565b60006104168261045e565b91506104218361045e565b925082821015610434576104336104c8565b5b828203905092915050565b60008115159050919050565b600081905061045982610555565b919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006104908261044b565b9050919050565b60006104a28261045e565b91506104ad8361045e565b9250826104bd576104bc6104f7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061056657610565610526565b5b50565b6105728161045e565b811461057d57600080fd5b50565b61058981610478565b811461059457600080fd5b5056fea2646970667358221220aed47a1aa4718152950eef0d10e77b10dd5c3fb944d4f391f90507806cc4787f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPoolState(uint256,uint256,uint8)": {
        "params": {
          "currentTimestamp": "timestamp of the current time",
          "maxPools": "number of pools available in the time horizon to be available",
          "timestamp": "used as POOLID"
        }
      },
      "isPoolID(uint256)": {
        "params": {
          "timestamp": "to validate if is a POOLID"
        }
      },
      "secondsPre(uint256,uint256)": {
        "params": {
          "timestampFrom": "to calculate the difference in seconds from a date",
          "timestampTo": "to calculate the difference in seconds to a date"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPoolState(uint256,uint256,uint8)": {
        "notice": "Function to return a pool _time_ state based on the current time,         maxPools available, and the INTERVALS configured, all to return         if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED"
      },
      "isPoolID(uint256)": {
        "notice": "Function that validates if a certain timestamp is a POOLID based on the INTERVALS         configured for this library"
      },
      "secondsPre(uint256,uint256)": {
        "notice": "Function to calculate how many seconds are left to a certain date"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}