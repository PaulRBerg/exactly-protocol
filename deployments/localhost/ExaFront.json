{
  "address": "0x1c7B43a0bbab0a5EA0A1435F31D1c8e05Cc6aE98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IExafin",
          "name": "exafin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract IExafin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "enableMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "exafins",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "getMarketByAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        }
      ],
      "name": "listMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "listedMarkets",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct ExaFront.BaseMarket",
          "name": "baseMarket",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "pauseBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exafin",
          "type": "address"
        }
      ],
      "name": "unlistMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0c3f278e2a9c0e06395ef09eba90b89d507f3a501a98df9b7c9a0ecc19d6b62",
  "receipt": {
    "to": null,
    "from": "0xd1Cd4c2e15Bf0D05796c7C9f7c0Eaba30119f454",
    "contractAddress": "0x1c7B43a0bbab0a5EA0A1435F31D1c8e05Cc6aE98",
    "transactionIndex": 0,
    "gasUsed": "4640847",
    "logsBloom": "0x
    "blockHash": "0x17680805b566834851977444442a7429355f96a56547e9f05731139ae9e71d26",
    "transactionHash": "0xf0c3f278e2a9c0e06395ef09eba90b89d507f3a501a98df9b7c9a0ecc19d6b62",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13231915,
        "transactionHash": "0xf0c3f278e2a9c0e06395ef09eba90b89d507f3a501a98df9b7c9a0ecc19d6b62",
        "address": "0x1c7B43a0bbab0a5EA0A1435F31D1c8e05Cc6aE98",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x17680805b566834851977444442a7429355f96a56547e9f05731139ae9e71d26"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13231915,
        "transactionHash": "0xf0c3f278e2a9c0e06395ef09eba90b89d507f3a501a98df9b7c9a0ecc19d6b62",
        "address": "0x1c7B43a0bbab0a5EA0A1435F31D1c8e05Cc6aE98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x17680805b566834851977444442a7429355f96a56547e9f05731139ae9e71d26"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13231915,
        "transactionHash": "0xf0c3f278e2a9c0e06395ef09eba90b89d507f3a501a98df9b7c9a0ecc19d6b62",
        "address": "0x1c7B43a0bbab0a5EA0A1435F31D1c8e05Cc6aE98",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454",
          "0x000000000000000000000000d1cd4c2e15bf0d05796c7c9f7c0eaba30119f454"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x17680805b566834851977444442a7429355f96a56547e9f05731139ae9e71d26"
      }
    ],
    "blockNumber": 13231915,
    "cumulativeGasUsed": "4640847",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6d2299c48a8dd07a872fdd0f8233924872ad1071"
  ],
  "solcInputHash": "f4edefc07f15eaaed019105c5613081f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IExafin\",\"name\":\"exafin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract IExafin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"enableMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"exafins\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getMarketByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"}],\"name\":\"listMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedMarkets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct ExaFront.BaseMarket\",\"name\":\"baseMarket\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"pauseBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exafin\",\"type\":\"address\"}],\"name\":\"unlistMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enableMarket(address,uint256,string,string)\":{\"details\":\"Function to enable a certain Exafin market to be used as collateral\",\"params\":{\"collateralFactor\":\"exafin's collateral factor for the underlying asset\",\"exafin\":\"address to add to the protocol\"}},\"enterMarkets(address[])\":{\"details\":\"Allows wallet to enter certain markets (exafinDAI, exafinETH, etc) By performing this action, the wallet's money could be used as collateral\",\"params\":{\"exafins\":\"contracts addresses to enable for `msg.sender`\"}},\"getAccountLiquidity(address,uint256)\":{\"details\":\"Function to get account's liquidity for a certain maturity pool\",\"params\":{\"account\":\"wallet to retrieve liquidity for a certain maturity date\",\"maturityDate\":\"timestamp to calculate maturity's pool\"}},\"getMarketByAddress(address)\":{\"details\":\"Get market data filtered by address\",\"params\":{\"contractAddress\":\"address to get market data\"}},\"getMarkets()\":{\"details\":\"List all markets, listed or not\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"listMarket(address)\":{\"details\":\"Add market to listedMarkets and change boolean to true\",\"params\":{\"exafin\":\"address to add to the protocol\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseBorrow(address,bool)\":{\"details\":\"Function to pause/unpause borrowing on a certain market\",\"params\":{\"exafin\":\"address to pause\",\"paused\":\"true/false\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setOracle(address)\":{\"details\":\"Function to set Oracle's to be used\",\"params\":{\"_priceOracleAddress\":\"address of the new oracle\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlistMarket(address)\":{\"details\":\"Delete market to listedMarkets and change boolean to false\",\"params\":{\"exafin\":\"address to add to the protocol\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExaFront.sol\":\"ExaFront\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/ExaFront.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IExafin.sol\\\";\\nimport \\\"./interfaces/IExaFront.sol\\\";\\nimport \\\"./interfaces/Oracle.sol\\\";\\nimport \\\"./utils/TSUtils.sol\\\";\\nimport \\\"./utils/DecimalMath.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ExaFront is Ownable, IExaFront, AccessControl {\\n    bytes32 public constant TEAM_ROLE = keccak256(\\\"TEAM_ROLE\\\");\\n\\n    using TSUtils for uint256;\\n    using DecimalMath for uint256;\\n\\n    event MarketEntered(IExafin exafin, address account);\\n    event ActionPaused(address exafin, string action, bool paused);\\n\\n    mapping(address => Market) public markets;\\n    mapping(address => BaseMarket) public listedMarkets;\\n    mapping(address => bool) public borrowPaused;\\n    mapping(address => uint256) public borrowCaps;\\n    mapping(address => IExafin[]) public accountAssets;\\n\\n    uint256 private marketCount = 0;\\n    address[] marketsAddress;\\n\\n    struct BaseMarket {\\n        string symbol;\\n        string name;\\n        bool isListed;\\n        uint256 collateralFactor;\\n        bool exists;\\n    }\\n\\n    struct Market {\\n        BaseMarket baseMarket;\\n        mapping(address => bool) accountMembership;\\n    }\\n\\n    struct AccountLiquidity {\\n        uint256 balance;\\n        uint256 borrowBalance;\\n        uint256 collateralFactor;\\n        uint256 oraclePrice;\\n        uint256 sumCollateral;\\n        uint256 sumDebt;\\n    }\\n\\n    Oracle private oracle;\\n\\n    constructor(address _priceOracleAddress) {\\n        oracle = Oracle(_priceOracleAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(TEAM_ROLE, msg.sender);\\n    }\\n\\n    /**\\n        @dev Allows wallet to enter certain markets (exafinDAI, exafinETH, etc)\\n             By performing this action, the wallet's money could be used as collateral\\n        @param exafins contracts addresses to enable for `msg.sender`\\n     */\\n    function enterMarkets(address[] calldata exafins)\\n        external\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = exafins.length;\\n\\n        uint256[] memory results = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            IExafin exafin = IExafin(exafins[i]);\\n\\n            results[i] = uint256(addToMarketInternal(exafin, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n        @dev (internal)\\n            Allows wallet to enter certain markets (exafinDAI, exafinETH, etc)\\n            By performing this action, the wallet's money could be used as collateral\\n        @param exafin contracts addresses to enable\\n        @param borrower wallet that wants to enter a market\\n     */\\n    function addToMarketInternal(IExafin exafin, address borrower)\\n        internal\\n        returns (Error)\\n    {\\n        Market storage marketToJoin = markets[address(exafin)];\\n\\n        if (!marketToJoin.baseMarket.isListed) {\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            return Error.NO_ERROR;\\n        }\\n\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(exafin);\\n\\n        emit MarketEntered(exafin, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n        @dev Function to get account's liquidity for a certain maturity pool\\n        @param account wallet to retrieve liquidity for a certain maturity date\\n        @param maturityDate timestamp to calculate maturity's pool\\n     */\\n    function getAccountLiquidity(address account, uint256 maturityDate)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            Error err,\\n            uint256 liquidity,\\n            uint256 shortfall\\n        ) = accountLiquidityInternal(account, maturityDate, address(0), 0, 0);\\n\\n        return (uint256(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n        @dev Function to get account's liquidity for a certain maturity pool\\n        @param account wallet to retrieve liquidity for a certain maturity date\\n        @param maturityDate timestamp to calculate maturity's pool\\n     */\\n    function accountLiquidityInternal(\\n        address account,\\n        uint256 maturityDate,\\n        address exafinToSimulate,\\n        uint256 redeemAmount,\\n        uint256 borrowAmount\\n    )\\n        internal\\n        view\\n        returns (\\n            Error,\\n            uint256,\\n            uint256\\n        )\\n    {\\n\\n        AccountLiquidity memory vars; // Holds all our calculation results\\n        uint256 oErr;\\n\\n        // For each asset the account is in\\n        IExafin[] memory assets = accountAssets[account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IExafin asset = assets[i];\\n\\n            // Read the balances // TODO calculate using NFT\\n            (oErr, vars.balance, vars.borrowBalance) = asset.getAccountSnapshot(\\n                account,\\n                maturityDate\\n            );\\n            require(oErr == uint256(Error.NO_ERROR), \\\"Snapshot error\\\");\\n\\n            vars.collateralFactor = markets[address(asset)]\\n                .baseMarket\\n                .collateralFactor;\\n\\n            // Get the normalized price of the asset (6 decimals)\\n            vars.oraclePrice = oracle.price(asset.tokenName());\\n            require(vars.oraclePrice != 0, \\\"Price Oracle error\\\");\\n\\n            // We sum all the collateral prices\\n            vars.sumCollateral += vars.balance.mul_(vars.collateralFactor).mul_(\\n                vars.oraclePrice,\\n                1e6\\n            );\\n\\n            // We sum all the debt\\n            vars.sumDebt += vars.borrowBalance.mul_(vars.oraclePrice, 1e6);\\n\\n            // Simulate the effects of borrowing from/lending to a pool\\n            if (asset == IExafin(exafinToSimulate)) {\\n                // Calculate the effects of borrowing exafins\\n                if (borrowAmount != 0) {\\n                    vars.sumDebt += borrowAmount.mul_(vars.oraclePrice, 1e6);\\n                }\\n\\n                // Calculate the effects of redeeming exafins\\n                // (having less collateral is the same as having more debt for this calculation)\\n                if (redeemAmount != 0) {\\n                    vars.sumDebt += redeemAmount\\n                        .mul_(vars.collateralFactor)\\n                        .mul_(vars.oraclePrice, 1e6);\\n                }\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumDebt) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumDebt, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumDebt - vars.sumCollateral);\\n        }\\n    }\\n\\n    function borrowAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint256 borrowAmount,\\n        uint256 maturityDate\\n    ) external override returns (uint256) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowPaused[exafinAddress], \\\"borrow is paused\\\");\\n\\n        if (!markets[exafinAddress].baseMarket.isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[exafinAddress].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == exafinAddress, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error errAdd = addToMarketInternal(IExafin(msg.sender), borrower);\\n            if (errAdd != Error.NO_ERROR) {\\n                return uint256(errAdd);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[exafinAddress].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.price(IExafin(exafinAddress).tokenName()) == 0) {\\n            return uint256(Error.PRICE_ERROR);\\n        }\\n\\n        uint256 borrowCap = borrowCaps[exafinAddress];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint256 totalBorrows = IExafin(exafinAddress).getTotalBorrows(\\n                maturityDate\\n            );\\n            uint256 nextTotalBorrows = totalBorrows + borrowAmount;\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (Error err, , uint256 shortfall) = accountLiquidityInternal(\\n            borrower,\\n            maturityDate,\\n            exafinAddress,\\n            0,\\n            borrowAmount\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowed(\\n        address exafinAddress,\\n        address redeemer,\\n        uint256 redeemTokens,\\n        uint256 maturityDate\\n    ) external view override returns (uint256) {\\n        if (!markets[exafinAddress].baseMarket.isListed) {\\n            return uint256(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[exafinAddress].accountMembership[redeemer]) {\\n            return uint256(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        (Error err, , uint256 shortfall) = accountLiquidityInternal(\\n            redeemer,\\n            maturityDate,\\n            exafinAddress,\\n            redeemTokens,\\n            0\\n        );\\n        if (err != Error.NO_ERROR) {\\n            return uint256(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint256(Error.NO_ERROR);\\n    }\\n\\n    function repayAllowed(\\n        address exafinAddress,\\n        address borrower,\\n        uint repayAmount) override external view returns (uint) {\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[exafinAddress].baseMarket.isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n        @dev Function to enable a certain Exafin market to be used as collateral\\n        @param exafin address to add to the protocol\\n        @param collateralFactor exafin's collateral factor for the underlying asset\\n     */\\n    function enableMarket(\\n        address exafin,\\n        uint256 collateralFactor,\\n        string memory symbol,\\n        string memory name\\n    ) public onlyRole(TEAM_ROLE) {\\n        Market storage market = markets[exafin];\\n        market.baseMarket.isListed = true;\\n        market.baseMarket.exists = true;\\n        market.baseMarket.collateralFactor = collateralFactor;\\n        market.baseMarket.symbol = symbol;\\n        market.baseMarket.name = name;\\n\\n        listedMarkets[exafin] = market.baseMarket;\\n\\n        marketCount += 1;\\n        marketsAddress.push(exafin);\\n    }\\n\\n    /**\\n        @dev List all markets, listed or not\\n     */\\n    function getMarkets()\\n        public\\n        view\\n        returns (\\n            address[] memory,\\n            string[] memory,\\n            bool[] memory,\\n            uint256[] memory,\\n            string[] memory\\n        )\\n    {\\n        bool[] memory marketsListed = new bool[](marketCount);\\n        string[] memory marketsSymbol = new string[](marketCount);\\n        string[] memory marketsName = new string[](marketCount);\\n        uint256[] memory marketsCollateralFactor = new uint256[](marketCount);\\n\\n        for (uint256 i = 0; i < marketCount; i++) {\\n            Market storage market = markets[marketsAddress[i]];\\n            marketsListed[i] = market.baseMarket.isListed;\\n            marketsSymbol[i] = market.baseMarket.symbol;\\n            marketsName[i] = market.baseMarket.name;\\n            marketsCollateralFactor[i] = market.baseMarket.collateralFactor;\\n        }\\n\\n        return (\\n            marketsAddress,\\n            marketsSymbol,\\n            marketsListed,\\n            marketsCollateralFactor,\\n            marketsName\\n        );\\n    }\\n\\n    /**\\n        @dev Get market data filtered by address\\n        @param contractAddress address to get market data\\n     */\\n    function getMarketByAddress(address contractAddress)\\n        public\\n        view\\n        returns (\\n            address,\\n            string memory,\\n            bool,\\n            uint256,\\n            string memory\\n        )\\n    {\\n        Market storage market = markets[contractAddress];\\n\\n        return (\\n            contractAddress,\\n            market.baseMarket.symbol,\\n            market.baseMarket.isListed,\\n            market.baseMarket.collateralFactor,\\n            market.baseMarket.name\\n        );\\n    }\\n\\n    /**\\n        @dev Add market to listedMarkets and change boolean to true\\n        @param exafin address to add to the protocol\\n     */\\n    function listMarket(address exafin) public onlyRole(TEAM_ROLE) {\\n        require(markets[exafin].baseMarket.exists, \\\"Address is not a market\\\");\\n        markets[exafin].baseMarket.isListed = true;\\n        listedMarkets[exafin] = markets[exafin].baseMarket;\\n    }\\n\\n    /**\\n        @dev Delete market to listedMarkets and change boolean to false\\n        @param exafin address to add to the protocol\\n     */\\n    function unlistMarket(address exafin) public onlyRole(TEAM_ROLE) {\\n        require(markets[exafin].baseMarket.exists, \\\"Address is not a market\\\");\\n        markets[exafin].baseMarket.isListed = false;\\n        delete listedMarkets[exafin];\\n    }\\n\\n    /**\\n        @dev Function to pause/unpause borrowing on a certain market\\n        @param exafin address to pause\\n        @param paused true/false\\n     */\\n    function pauseBorrow(address exafin, bool paused)\\n        public\\n        onlyRole(TEAM_ROLE)\\n        returns (bool)\\n    {\\n        require(markets[exafin].baseMarket.isListed, \\\"not listed\\\");\\n\\n        borrowPaused[address(exafin)] = paused;\\n        emit ActionPaused(exafin, \\\"Borrow\\\", paused);\\n        return paused;\\n    }\\n\\n    /**\\n        @dev Function to set Oracle's to be used\\n        @param _priceOracleAddress address of the new oracle\\n     */\\n    function setOracle(address _priceOracleAddress) public onlyRole(TEAM_ROLE) {\\n        oracle = Oracle(_priceOracleAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x9e0623fbd81e58781eac53df6894faf0b790d1bbf387d1522e0c9ea820e1bb71\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IExaFront.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IExaFront {\\n    function getAccountLiquidity(address account, uint256 maturityDate) external view returns (uint, uint, uint);\\n    function borrowAllowed(address exafinAddress, address borrower, uint borrowAmount, uint maturityDate) external returns (uint);\\n    function redeemAllowed(address exafinAddress, address redeemer, uint redeemTokens, uint maturityDate) external view returns (uint);\\n    function repayAllowed(address exafinAddress, address borrower, uint repayAmount) external returns (uint);\\n}\\n\",\"keccak256\":\"0x7f9975ebf543a8ffdafdeb4008790dfa81cec42c6c976c9a4bc7faf22bc6bfb8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IExafin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nstruct Pool {\\n    uint256 lent;\\n    uint256 supplied;\\n}\\n\\ninterface IExafin {\\n    function rateForSupply(uint256 amount, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, Pool memory);\\n\\n    function rateToBorrow(uint256 amount, uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256, Pool memory);\\n\\n    function borrow(\\n        address to,\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function supply(\\n        address from,\\n        uint256 amount,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function redeem(\\n        address payable redeemer,\\n        uint256 redeemAmount,\\n        uint256 commission,\\n        uint256 maturityDate\\n    ) external;\\n\\n    function repay(\\n        address payable borrower,\\n        uint256 repayAmount,\\n        uint256 commission,\\n        uint256 maturityDate\\n    ) external;\\n    \\n    function tokenName() external view returns (string calldata);\\n\\n    function getAccountSnapshot(address who, uint256 timestamp)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getTotalBorrows(uint256 maturityDate)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc4a62253fcbf388e4f8cee62f4c48d815e7810ce0e2c6abce8cb4ed726f0780\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    function price(string memory symbol) external view returns (uint); // use 0x6d2299c48a8dd07a872fdd0f8233924872ad1071\\n}\\n\",\"keccak256\":\"0x5683ae0f4fa8a5dd36bc0e0b31fcd5fec9a6e2edba6dc8e7365bd280704e7ba8\",\"license\":\"MIT\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary DecimalMath {\\n\\n    uint private constant NUMBER_SCALE = 1e18;\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return a * b / NUMBER_SCALE;\\n    }\\n\\n    function mul_(uint a, uint b, uint scale) internal pure returns (uint) {\\n        return a * b / scale;\\n    }\\n}\",\"keccak256\":\"0x95893eca27c41923d4c3ea2fc5f17be760178836839676b85ed25e050910345e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nenum Error {\\n    NO_ERROR,\\n    MARKET_NOT_LISTED,\\n    SNAPSHOT_ERROR,\\n    PRICE_ERROR,\\n    INSUFFICIENT_LIQUIDITY\\n}\\n\",\"keccak256\":\"0x06f053772698921b4f4f9579a77bdb7cc98f838324eec3a232f5ff35fcabea1c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary TSUtils {\\n    function trimmedDay(uint256 timestamp) internal pure returns (uint256) { \\n        return timestamp - (timestamp % 86400);\\n    }\\n\\n    function trimmedMonth(uint256 timestamp) internal pure returns (uint256) { \\n        return timestamp - (timestamp % 30 days);\\n    }\\n\\n    function nextMonth(uint256 timestamp) internal pure returns (uint256) { \\n        return timestamp + 30 days;\\n    }\\n}\",\"keccak256\":\"0x008c05361bc8a32492e1ec7dd711992cd2c6f6b7be64a3122580693cecc1a8a4\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b50604051620055073803806200550783398181016040528101906200003c91906200030c565b60006200004e6200017b60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001426000801b336200018360201b60201c565b620001747f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33336200018360201b60201c565b5062000386565b600033905090565b6200019582826200019960201b60201c565b5050565b620001ab82826200028a60201b60201c565b6200028657600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200022b6200017b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008151905062000306816200036c565b92915050565b6000602082840312156200031f57600080fd5b60006200032f84828501620002f5565b91505092915050565b600062000345826200034c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620003778162000338565b81146200038357600080fd5b50565b61517180620003966000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638e8f294b116100f9578063d547741f11610097578063dec481b811610071578063dec481b814610567578063df26c46814610597578063ec2c9016146105cb578063f2fde38b146105ed576101c4565b8063d547741f146104eb578063d76a677914610507578063dce1544914610537576101c4565b8063a217fddf116100d3578063a217fddf14610451578063b962aaeb1461046f578063c29982381461049f578063ce819019146104cf576101c4565b80638e8f294b146103bf57806391d14854146103ef5780639e35e1421461041f576101c4565b80632f8832d6116101665780634a584432116101405780634a5844321461034b578063715018a61461037b5780637adbf973146103855780638da5cb5b146103a1576101c4565b80632f8832d6146102e157806336568abe1461031157806349d5e6041461032d576101c4565b8063248a9ca3116101a2578063248a9ca31461024557806326319519146102755780632ee01216146102915780632f2ff15d146102c5576101c4565b806301ffc9a7146101c9578063059a8008146101f95780630686dab614610229575b600080fd5b6101e360048036038101906101de9190613f2b565b610609565b6040516101f0919061490f565b60405180910390f35b610213600480360381019061020e9190613d13565b610683565b6040516102209190614b8e565b60405180910390f35b610243600480360381019061023e9190613c9b565b610e3b565b005b61025f600480360381019061025a9190613ec6565b610ff3565b60405161026c919061492a565b60405180910390f35b61028f600480360381019061028a9190613c9b565b611013565b005b6102ab60048036038101906102a69190613c9b565b611261565b6040516102bc9594939291906149ab565b60405180910390f35b6102df60048036038101906102da9190613eef565b6113c1565b005b6102fb60048036038101906102f69190613d13565b6113ea565b6040516103089190614b8e565b60405180910390f35b61032b60048036038101906103269190613eef565b6116b8565b005b61033561173b565b604051610342919061492a565b60405180910390f35b61036560048036038101906103609190613c9b565b61175f565b6040516103729190614b8e565b60405180910390f35b610383611777565b005b61039f600480360381019061039a9190613c9b565b6118b1565b005b6103a9611928565b6040516103b69190614796565b60405180910390f35b6103d960048036038101906103d49190613c9b565b611951565b6040516103e69190614b6c565b60405180910390f35b61040960048036038101906104049190613eef565b611add565b604051610416919061490f565b60405180910390f35b61043960048036038101906104349190613db2565b611b48565b60405161044893929190614ba9565b60405180910390f35b610459611bb1565b604051610466919061492a565b60405180910390f35b61048960048036038101906104849190613cc4565b611bb8565b6040516104969190614b8e565b60405180910390f35b6104b960048036038101906104b49190613e81565b611c96565b6040516104c691906148ed565b60405180910390f35b6104e960048036038101906104e49190613dee565b611e17565b005b61050560048036038101906105009190613eef565b61207f565b005b610521600480360381019061051c9190613c9b565b6120a8565b60405161052e919061490f565b60405180910390f35b610551600480360381019061054c9190613db2565b6120c8565b60405161055e9190614945565b60405180910390f35b610581600480360381019061057c9190613d76565b612116565b60405161058e919061490f565b60405180910390f35b6105b160048036038101906105ac9190613c9b565b612276565b6040516105c29594939291906147b1565b60405180910390f35b6105d361241a565b6040516105e4959493929190614877565b60405180910390f35b61060760048036038101906106029190613c9b565b6129c1565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067c575061067b82612b6a565b5b9050919050565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990614b2c565b60405180910390fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff166107aa57600160048111156107a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050610e33565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a32578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090614aac565b60405180910390fd5b60006108b53386612bd4565b9050600060048111156108f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561092a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461097057806004811115610968577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b915050610e33565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a30577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b505b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c61988773ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015610ab857600080fd5b505afa158015610acc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610af59190613f54565b6040518263ffffffff1660e01b8152600401610b119190614989565b60206040518083038186803b158015610b2957600080fd5b505afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190613f95565b1415610ba85760036004811115610ba1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050610e33565b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610cd65760008673ffffffffffffffffffffffffffffffffffffffff1663ea1cd41f856040518263ffffffff1660e01b8152600401610c2f9190614b8e565b60206040518083038186803b158015610c4757600080fd5b505afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190613f95565b905060008582610c8f9190614d5d565b9050828110610cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90614aec565b60405180910390fd5b50505b600080610ce787868a60008a612ddf565b925050915060006004811115610d26577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826004811115610d5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610da757816004811115610d9d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9350505050610e33565b6000811115610df357600480811115610de9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9350505050610e33565b60006004811115610e2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b93505050505b949350505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33610e6d81610e686133b1565b6133b9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160040160009054906101000a900460ff16610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690614b0c565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160006101000a81548160ff021916908315150217905550600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610fad919061395d565b600182016000610fbd919061395d565b6002820160006101000a81549060ff021916905560038201600090556004820160006101000a81549060ff021916905550505050565b600060016000838152602001908152602001600020600101549050919050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611045816110406133b1565b6133b9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160040160009054906101000a900460ff166110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90614b0c565b60405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160006101000a81548160ff021916908315150217905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201816000019080546111ca90614f80565b6111d592919061399d565b5060018201816001019080546111ea90614f80565b6111f592919061399d565b506002820160009054906101000a900460ff168160020160006101000a81548160ff021916908315150217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083151502179055509050505050565b600360205280600052604060002060009150905080600001805461128490614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546112b090614f80565b80156112fd5780601f106112d2576101008083540402835291602001916112fd565b820191906000526020600020905b8154815290600101906020018083116112e057829003601f168201915b50505050509080600101805461131290614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461133e90614f80565b801561138b5780601f106113605761010080835404028352916020019161138b565b820191906000526020600020905b81548152906001019060200180831161136e57829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154908060040160009054906101000a900460ff16905085565b6113ca82610ff3565b6113db816113d66133b1565b6133b9565b6113e58383613456565b505050565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff16611484576001600481111561147d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90506116b0565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611556576000600481111561154f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90506116b0565b600080611567868589886000612ddf565b9250509150600060048111156115a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260048111156115df577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146116265781600481111561161d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050506116b0565b600081111561167157600480811115611668577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050506116b0565b600060048111156116ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050505b949350505050565b6116c06133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461172d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172490614b4c565b60405180910390fd5b6117378282613536565b5050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3381565b60056020528060005260406000206000915090505481565b61177f6133b1565b73ffffffffffffffffffffffffffffffffffffffff1661179d611928565b73ffffffffffffffffffffffffffffffffffffffff16146117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90614a6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b336118e3816118de6133b1565b6133b9565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002602052806000526040600020600091509050806000016040518060a001604052908160008201805461198490614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546119b090614f80565b80156119fd5780601f106119d2576101008083540402835291602001916119fd565b820191906000526020600020905b8154815290600101906020018083116119e057829003601f168201915b50505050508152602001600182018054611a1690614f80565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4290614f80565b8015611a8f5780601f10611a6457610100808354040283529160200191611a8f565b820191906000526020600020905b815481529060010190602001808311611a7257829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905081565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600080600080611b6088886000806000612ddf565b925092509250826004811115611b9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82829550955095505050509250925092565b6000801b81565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff16611c525760016004811115611c4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050611c8f565b60006004811115611c8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90505b9392505050565b6060600083839050905060008167ffffffffffffffff811115611ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d105781602001602082028036833780820191505090505b50905060005b82811015611e0b576000868683818110611d59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611d6e9190613c9b565b9050611d7a8133612bd4565b6004811115611db2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b838381518110611deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050508080611e0390614fb2565b915050611d16565b50809250505092915050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611e4981611e446133b1565b6133b9565b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160020160006101000a81548160ff02191690831515021790555060018160000160040160006101000a81548160ff02191690831515021790555084816000016003018190555083816000016000019080519060200190611ef3929190613a2a565b5082816000016001019080519060200190611f0f929190613a2a565b5080600001600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820181600001908054611f6790614f80565b611f7292919061399d565b506001820181600101908054611f8790614f80565b611f9292919061399d565b506002820160009054906101000a900460ff168160020160006101000a81548160ff021916908315150217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690831515021790555090505060016007600082825461200d9190614d5d565b925050819055506008869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b61208882610ff3565b612099816120946133b1565b6133b9565b6120a38383613536565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b600660205281600052604060002081815481106120e457600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361214a816121456133b1565b6133b9565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff166121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d390614acc565b60405180910390fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612264929190614812565b60405180910390a18291505092915050565b6000606060008060606000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905086816000016000018260000160020160009054906101000a900460ff168360000160030154846000016001018380546122fa90614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461232690614f80565b80156123735780601f1061234857610100808354040283529160200191612373565b820191906000526020600020905b81548152906001019060200180831161235657829003601f168201915b5050505050935080805461238690614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546123b290614f80565b80156123ff5780601f106123d4576101008083540402835291602001916123ff565b820191906000526020600020905b8154815290600101906020018083116123e257829003601f168201915b50505050509050955095509550955095505091939590929450565b6060806060806060600060075467ffffffffffffffff811115612466577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156124945781602001602082028036833780820191505090505b509050600060075467ffffffffffffffff8111156124db577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561250e57816020015b60608152602001906001900390816124f95790505b509050600060075467ffffffffffffffff811115612555577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561258857816020015b60608152602001906001900390816125735790505b509050600060075467ffffffffffffffff8111156125cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156125fd5781602001602082028036833780820191505090505b50905060005b60075481101561291d576000600260006008848154811061264d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160020160009054906101000a900460ff16868381518110612702577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101901515908115158152505080600001600001805461272690614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461275290614f80565b801561279f5780601f106127745761010080835404028352916020019161279f565b820191906000526020600020905b81548152906001019060200180831161278257829003601f168201915b50505050508583815181106127dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508060000160010180546127fa90614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461282690614f80565b80156128735780601f1061284857610100808354040283529160200191612873565b820191906000526020600020905b81548152906001019060200180831161285657829003601f168201915b50505050508483815181106128b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080600001600301548383815181106128fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050808061291590614fb2565b915050612603565b50600883858385848054806020026020016040519081016040528092919081815260200182805480156129a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161295b575b5050505050945098509850985098509850505050509091929394565b6129c96133b1565b73ffffffffffffffffffffffffffffffffffffffff166129e7611928565b73ffffffffffffffffffffffffffffffffffffffff1614612a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3490614a6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa490614a2c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160020160009054906101000a900460ff16612c3b576001915050612dd9565b600115158160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612ca0576000915050612dd9565b60018160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a58484604051612dcb929190614960565b60405180910390a160009150505b92915050565b6000806000612dec613ab0565b600080600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612eae57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612e64575b5050505050905060005b815181101561334e576000828281518110612efc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8e8e6040518363ffffffff1660e01b8152600401612f4192919061484e565b60606040518083038186803b158015612f5957600080fd5b505afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190613fbe565b8760000188602001828152508281525082965050505060006004811115612fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8414613022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301990614a4c565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160030154856040018181525050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c61988273ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b1580156130f557600080fd5b505afa158015613109573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906131329190613f54565b6040518263ffffffff1660e01b815260040161314e9190614989565b60206040518083038186803b15801561316657600080fd5b505afa15801561317a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319e9190613f95565b8560600181815250506000856060015114156131ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131e690614a8c565b60405180910390fd5b6132258560600151620f42406132168860400151896000015161361890919063ffffffff16565b6136419092919063ffffffff16565b856080018181516132369190614d5d565b9150818152505061325d8560600151620f424087602001516136419092919063ffffffff16565b8560a00181815161326e9190614d5d565b915081815250508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561333a57600089146132e6576132cd8560600151620f42408b6136419092919063ffffffff16565b8560a0018181516132de9190614d5d565b915081815250505b60008a14613339576133208560600151620f424061331188604001518e61361890919063ffffffff16565b6136419092919063ffffffff16565b8560a0018181516133319190614d5d565b915081815250505b5b50808061334690614fb2565b915050612eb8565b508260a00151836080015111156133855760008360a0015184608001516133759190614e3e565b60009550955095505050506133a6565b60008084608001518560a0015161339c9190614e3e565b9550955095505050505b955095509592505050565b600033905090565b6133c38282611add565b613452576133e88173ffffffffffffffffffffffffffffffffffffffff166014613663565b6133f68360001c6020613663565b60405160200161340792919061475c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134499190614989565b60405180910390fd5b5050565b6134608282611add565b61353257600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506134d76133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6135408282611add565b156136145760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506135b96133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a7640000828461362f9190614de4565b6136399190614db3565b905092915050565b60008183856136509190614de4565b61365a9190614db3565b90509392505050565b6060600060028360026136769190614de4565b6136809190614d5d565b67ffffffffffffffff8111156136bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136f15781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061374f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026138199190614de4565b6138239190614d5d565b90505b600181111561390f577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061388b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106138c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061390890614f56565b9050613826565b5060008414613953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394a90614a0c565b60405180910390fd5b8091505092915050565b50805461396990614f80565b6000825580601f1061397b575061399a565b601f0160209004906000526020600020908101906139999190613ae6565b5b50565b8280546139a990614f80565b90600052602060002090601f0160209004810192826139cb5760008555613a19565b82601f106139dc5780548555613a19565b82800160010185558215613a1957600052602060002091601f016020900482015b82811115613a185782548255916001019190600101906139fd565b5b509050613a269190613ae6565b5090565b828054613a3690614f80565b90600052602060002090601f016020900481019282613a585760008555613a9f565b82601f10613a7157805160ff1916838001178555613a9f565b82800160010185558215613a9f579182015b82811115613a9e578251825591602001919060010190613a83565b5b509050613aac9190613ae6565b5090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613aff576000816000905550600101613ae7565b5090565b6000613b16613b1184614c11565b614be0565b905082815260208101848484011115613b2e57600080fd5b613b39848285614f14565b509392505050565b6000613b54613b4f84614c11565b614be0565b905082815260208101848484011115613b6c57600080fd5b613b77848285614f23565b509392505050565b600081359050613b8e816150c8565b92915050565b60008083601f840112613ba657600080fd5b8235905067ffffffffffffffff811115613bbf57600080fd5b602083019150836020820283011115613bd757600080fd5b9250929050565b600081359050613bed816150df565b92915050565b600081359050613c02816150f6565b92915050565b600081359050613c178161510d565b92915050565b600082601f830112613c2e57600080fd5b8135613c3e848260208601613b03565b91505092915050565b600082601f830112613c5857600080fd5b8151613c68848260208601613b41565b91505092915050565b600081359050613c8081615124565b92915050565b600081519050613c9581615124565b92915050565b600060208284031215613cad57600080fd5b6000613cbb84828501613b7f565b91505092915050565b600080600060608486031215613cd957600080fd5b6000613ce786828701613b7f565b9350506020613cf886828701613b7f565b9250506040613d0986828701613c71565b9150509250925092565b60008060008060808587031215613d2957600080fd5b6000613d3787828801613b7f565b9450506020613d4887828801613b7f565b9350506040613d5987828801613c71565b9250506060613d6a87828801613c71565b91505092959194509250565b60008060408385031215613d8957600080fd5b6000613d9785828601613b7f565b9250506020613da885828601613bde565b9150509250929050565b60008060408385031215613dc557600080fd5b6000613dd385828601613b7f565b9250506020613de485828601613c71565b9150509250929050565b60008060008060808587031215613e0457600080fd5b6000613e1287828801613b7f565b9450506020613e2387828801613c71565b935050604085013567ffffffffffffffff811115613e4057600080fd5b613e4c87828801613c1d565b925050606085013567ffffffffffffffff811115613e6957600080fd5b613e7587828801613c1d565b91505092959194509250565b60008060208385031215613e9457600080fd5b600083013567ffffffffffffffff811115613eae57600080fd5b613eba85828601613b94565b92509250509250929050565b600060208284031215613ed857600080fd5b6000613ee684828501613bf3565b91505092915050565b60008060408385031215613f0257600080fd5b6000613f1085828601613bf3565b9250506020613f2185828601613b7f565b9150509250929050565b600060208284031215613f3d57600080fd5b6000613f4b84828501613c08565b91505092915050565b600060208284031215613f6657600080fd5b600082015167ffffffffffffffff811115613f8057600080fd5b613f8c84828501613c47565b91505092915050565b600060208284031215613fa757600080fd5b6000613fb584828501613c86565b91505092915050565b600080600060608486031215613fd357600080fd5b6000613fe186828701613c86565b9350506020613ff286828701613c86565b925050604061400386828701613c86565b9150509250925092565b60006140198383614069565b60208301905092915050565b60006140318383614216565b60208301905092915050565b60006140498383614252565b905092915050565b600061405d838361473e565b60208301905092915050565b61407281614e72565b82525050565b61408181614e72565b82525050565b600061409282614c81565b61409c8185614cec565b93506140a783614c41565b8060005b838110156140d85781516140bf888261400d565b97506140ca83614cb8565b9250506001810190506140ab565b5085935050505092915050565b60006140f082614c8c565b6140fa8185614cfd565b935061410583614c51565b8060005b8381101561413657815161411d8882614025565b975061412883614cc5565b925050600181019050614109565b5085935050505092915050565b600061414e82614c97565b6141588185614d0e565b93508360208202850161416a85614c61565b8060005b858110156141a65784840389528151614187858261403d565b945061419283614cd2565b925060208a0199505060018101905061416e565b50829750879550505050505092915050565b60006141c382614ca2565b6141cd8185614d1f565b93506141d883614c71565b8060005b838110156142095781516141f08882614051565b97506141fb83614cdf565b9250506001810190506141dc565b5085935050505092915050565b61421f81614e84565b82525050565b61422e81614e84565b82525050565b61423d81614e90565b82525050565b61424c81614ef0565b82525050565b600061425d82614cad565b6142678185614d30565b9350614277818560208601614f23565b614280816150b7565b840191505092915050565b600061429682614cad565b6142a08185614d41565b93506142b0818560208601614f23565b6142b9816150b7565b840191505092915050565b60006142cf82614cad565b6142d98185614d52565b93506142e9818560208601614f23565b80840191505092915050565b6000614302602083614d41565b91507f537472696e67733a20686578206c656e67746820696e73756666696369656e746000830152602082019050919050565b6000614342602683614d41565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143a8600683614d41565b91507f426f72726f7700000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006143e8600e83614d41565b91507f536e617073686f74206572726f720000000000000000000000000000000000006000830152602082019050919050565b6000614428602083614d41565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614468601283614d41565b91507f5072696365204f7261636c65206572726f7200000000000000000000000000006000830152602082019050919050565b60006144a8601583614d41565b91507f73656e646572206d7573742062652063546f6b656e00000000000000000000006000830152602082019050919050565b60006144e8600a83614d41565b91507f6e6f74206c6973746564000000000000000000000000000000000000000000006000830152602082019050919050565b6000614528601983614d41565b91507f6d61726b657420626f72726f77206361702072656163686564000000000000006000830152602082019050919050565b6000614568601783614d41565b91507f41646472657373206973206e6f742061206d61726b65740000000000000000006000830152602082019050919050565b60006145a8601783614d52565b91507f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006000830152601782019050919050565b60006145e8601183614d52565b91507f206973206d697373696e6720726f6c65200000000000000000000000000000006000830152601182019050919050565b6000614628601083614d41565b91507f626f72726f7720697320706175736564000000000000000000000000000000006000830152602082019050919050565b6000614668602f83614d41565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b600060a08301600083015184820360008601526146de8282614252565b915050602083015184820360208601526146f88282614252565b915050604083015161470d6040860182614216565b506060830151614720606086018261473e565b5060808301516147336080860182614216565b508091505092915050565b61474781614ee6565b82525050565b61475681614ee6565b82525050565b60006147678261459b565b915061477382856142c4565b915061477e826145db565b915061478a82846142c4565b91508190509392505050565b60006020820190506147ab6000830184614078565b92915050565b600060a0820190506147c66000830188614078565b81810360208301526147d8818761428b565b90506147e76040830186614225565b6147f4606083018561474d565b8181036080830152614806818461428b565b90509695505050505050565b60006060820190506148276000830185614078565b81810360208301526148388161439b565b90506148476040830184614225565b9392505050565b60006040820190506148636000830185614078565b614870602083018461474d565b9392505050565b600060a08201905081810360008301526148918188614087565b905081810360208301526148a58187614143565b905081810360408301526148b981866140e5565b905081810360608301526148cd81856141b8565b905081810360808301526148e18184614143565b90509695505050505050565b6000602082019050818103600083015261490781846141b8565b905092915050565b60006020820190506149246000830184614225565b92915050565b600060208201905061493f6000830184614234565b92915050565b600060208201905061495a6000830184614243565b92915050565b60006040820190506149756000830185614243565b6149826020830184614078565b9392505050565b600060208201905081810360008301526149a3818461428b565b905092915050565b600060a08201905081810360008301526149c5818861428b565b905081810360208301526149d9818761428b565b90506149e86040830186614225565b6149f5606083018561474d565b614a026080830184614225565b9695505050505050565b60006020820190508181036000830152614a25816142f5565b9050919050565b60006020820190508181036000830152614a4581614335565b9050919050565b60006020820190508181036000830152614a65816143db565b9050919050565b60006020820190508181036000830152614a858161441b565b9050919050565b60006020820190508181036000830152614aa58161445b565b9050919050565b60006020820190508181036000830152614ac58161449b565b9050919050565b60006020820190508181036000830152614ae5816144db565b9050919050565b60006020820190508181036000830152614b058161451b565b9050919050565b60006020820190508181036000830152614b258161455b565b9050919050565b60006020820190508181036000830152614b458161461b565b9050919050565b60006020820190508181036000830152614b658161465b565b9050919050565b60006020820190508181036000830152614b8681846146c1565b905092915050565b6000602082019050614ba3600083018461474d565b92915050565b6000606082019050614bbe600083018661474d565b614bcb602083018561474d565b614bd8604083018461474d565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715614c0757614c06615088565b5b8060405250919050565b600067ffffffffffffffff821115614c2c57614c2b615088565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614d6882614ee6565b9150614d7383614ee6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614da857614da7614ffb565b5b828201905092915050565b6000614dbe82614ee6565b9150614dc983614ee6565b925082614dd957614dd861502a565b5b828204905092915050565b6000614def82614ee6565b9150614dfa83614ee6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614e3357614e32614ffb565b5b828202905092915050565b6000614e4982614ee6565b9150614e5483614ee6565b925082821015614e6757614e66614ffb565b5b828203905092915050565b6000614e7d82614ec6565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614efb82614f02565b9050919050565b6000614f0d82614ec6565b9050919050565b82818337600083830152505050565b60005b83811015614f41578082015181840152602081019050614f26565b83811115614f50576000848401525b50505050565b6000614f6182614ee6565b91506000821415614f7557614f74614ffb565b5b600182039050919050565b60006002820490506001821680614f9857607f821691505b60208210811415614fac57614fab615059565b5b50919050565b6000614fbd82614ee6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ff057614fef614ffb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6150d181614e72565b81146150dc57600080fd5b50565b6150e881614e84565b81146150f357600080fd5b50565b6150ff81614e90565b811461510a57600080fd5b50565b61511681614e9a565b811461512157600080fd5b50565b61512d81614ee6565b811461513857600080fd5b5056fea2646970667358221220aa871cdaa954a25f6e2050e8b6d5d6bfa36375660c8b7d9abeddd897aed9c5b564736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638e8f294b116100f9578063d547741f11610097578063dec481b811610071578063dec481b814610567578063df26c46814610597578063ec2c9016146105cb578063f2fde38b146105ed576101c4565b8063d547741f146104eb578063d76a677914610507578063dce1544914610537576101c4565b8063a217fddf116100d3578063a217fddf14610451578063b962aaeb1461046f578063c29982381461049f578063ce819019146104cf576101c4565b80638e8f294b146103bf57806391d14854146103ef5780639e35e1421461041f576101c4565b80632f8832d6116101665780634a584432116101405780634a5844321461034b578063715018a61461037b5780637adbf973146103855780638da5cb5b146103a1576101c4565b80632f8832d6146102e157806336568abe1461031157806349d5e6041461032d576101c4565b8063248a9ca3116101a2578063248a9ca31461024557806326319519146102755780632ee01216146102915780632f2ff15d146102c5576101c4565b806301ffc9a7146101c9578063059a8008146101f95780630686dab614610229575b600080fd5b6101e360048036038101906101de9190613f2b565b610609565b6040516101f0919061490f565b60405180910390f35b610213600480360381019061020e9190613d13565b610683565b6040516102209190614b8e565b60405180910390f35b610243600480360381019061023e9190613c9b565b610e3b565b005b61025f600480360381019061025a9190613ec6565b610ff3565b60405161026c919061492a565b60405180910390f35b61028f600480360381019061028a9190613c9b565b611013565b005b6102ab60048036038101906102a69190613c9b565b611261565b6040516102bc9594939291906149ab565b60405180910390f35b6102df60048036038101906102da9190613eef565b6113c1565b005b6102fb60048036038101906102f69190613d13565b6113ea565b6040516103089190614b8e565b60405180910390f35b61032b60048036038101906103269190613eef565b6116b8565b005b61033561173b565b604051610342919061492a565b60405180910390f35b61036560048036038101906103609190613c9b565b61175f565b6040516103729190614b8e565b60405180910390f35b610383611777565b005b61039f600480360381019061039a9190613c9b565b6118b1565b005b6103a9611928565b6040516103b69190614796565b60405180910390f35b6103d960048036038101906103d49190613c9b565b611951565b6040516103e69190614b6c565b60405180910390f35b61040960048036038101906104049190613eef565b611add565b604051610416919061490f565b60405180910390f35b61043960048036038101906104349190613db2565b611b48565b60405161044893929190614ba9565b60405180910390f35b610459611bb1565b604051610466919061492a565b60405180910390f35b61048960048036038101906104849190613cc4565b611bb8565b6040516104969190614b8e565b60405180910390f35b6104b960048036038101906104b49190613e81565b611c96565b6040516104c691906148ed565b60405180910390f35b6104e960048036038101906104e49190613dee565b611e17565b005b61050560048036038101906105009190613eef565b61207f565b005b610521600480360381019061051c9190613c9b565b6120a8565b60405161052e919061490f565b60405180910390f35b610551600480360381019061054c9190613db2565b6120c8565b60405161055e9190614945565b60405180910390f35b610581600480360381019061057c9190613d76565b612116565b60405161058e919061490f565b60405180910390f35b6105b160048036038101906105ac9190613c9b565b612276565b6040516105c29594939291906147b1565b60405180910390f35b6105d361241a565b6040516105e4959493929190614877565b60405180910390f35b61060760048036038101906106029190613c9b565b6129c1565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067c575061067b82612b6a565b5b9050919050565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990614b2c565b60405180910390fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff166107aa57600160048111156107a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050610e33565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a32578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090614aac565b60405180910390fd5b60006108b53386612bd4565b9050600060048111156108f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561092a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461097057806004811115610968577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b915050610e33565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a30577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b505b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c61988773ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b158015610ab857600080fd5b505afa158015610acc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610af59190613f54565b6040518263ffffffff1660e01b8152600401610b119190614989565b60206040518083038186803b158015610b2957600080fd5b505afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190613f95565b1415610ba85760036004811115610ba1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050610e33565b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114610cd65760008673ffffffffffffffffffffffffffffffffffffffff1663ea1cd41f856040518263ffffffff1660e01b8152600401610c2f9190614b8e565b60206040518083038186803b158015610c4757600080fd5b505afa158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190613f95565b905060008582610c8f9190614d5d565b9050828110610cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90614aec565b60405180910390fd5b50505b600080610ce787868a60008a612ddf565b925050915060006004811115610d26577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826004811115610d5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610da757816004811115610d9d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9350505050610e33565b6000811115610df357600480811115610de9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9350505050610e33565b60006004811115610e2d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b93505050505b949350505050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33610e6d81610e686133b1565b6133b9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160040160009054906101000a900460ff16610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690614b0c565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160006101000a81548160ff021916908315150217905550600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000610fad919061395d565b600182016000610fbd919061395d565b6002820160006101000a81549060ff021916905560038201600090556004820160006101000a81549060ff021916905550505050565b600060016000838152602001908152602001600020600101549050919050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611045816110406133b1565b6133b9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160040160009054906101000a900460ff166110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90614b0c565b60405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160006101000a81548160ff021916908315150217905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201816000019080546111ca90614f80565b6111d592919061399d565b5060018201816001019080546111ea90614f80565b6111f592919061399d565b506002820160009054906101000a900460ff168160020160006101000a81548160ff021916908315150217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083151502179055509050505050565b600360205280600052604060002060009150905080600001805461128490614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546112b090614f80565b80156112fd5780601f106112d2576101008083540402835291602001916112fd565b820191906000526020600020905b8154815290600101906020018083116112e057829003601f168201915b50505050509080600101805461131290614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461133e90614f80565b801561138b5780601f106113605761010080835404028352916020019161138b565b820191906000526020600020905b81548152906001019060200180831161136e57829003601f168201915b5050505050908060020160009054906101000a900460ff16908060030154908060040160009054906101000a900460ff16905085565b6113ca82610ff3565b6113db816113d66133b1565b6133b9565b6113e58383613456565b505050565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff16611484576001600481111561147d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90506116b0565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611556576000600481111561154f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90506116b0565b600080611567868589886000612ddf565b9250509150600060048111156115a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260048111156115df577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146116265781600481111561161d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050506116b0565b600081111561167157600480811115611668577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050506116b0565b600060048111156116ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b925050505b949350505050565b6116c06133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461172d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172490614b4c565b60405180910390fd5b6117378282613536565b5050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3381565b60056020528060005260406000206000915090505481565b61177f6133b1565b73ffffffffffffffffffffffffffffffffffffffff1661179d611928565b73ffffffffffffffffffffffffffffffffffffffff16146117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90614a6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b336118e3816118de6133b1565b6133b9565b81600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002602052806000526040600020600091509050806000016040518060a001604052908160008201805461198490614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546119b090614f80565b80156119fd5780601f106119d2576101008083540402835291602001916119fd565b820191906000526020600020905b8154815290600101906020018083116119e057829003601f168201915b50505050508152602001600182018054611a1690614f80565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4290614f80565b8015611a8f5780601f10611a6457610100808354040283529160200191611a8f565b820191906000526020600020905b815481529060010190602001808311611a7257829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905081565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600080600080611b6088886000806000612ddf565b925092509250826004811115611b9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82829550955095505050509250925092565b6000801b81565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff16611c525760016004811115611c4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050611c8f565b60006004811115611c8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90505b9392505050565b6060600083839050905060008167ffffffffffffffff811115611ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d105781602001602082028036833780820191505090505b50905060005b82811015611e0b576000868683818110611d59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611d6e9190613c9b565b9050611d7a8133612bd4565b6004811115611db2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b838381518110611deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050508080611e0390614fb2565b915050611d16565b50809250505092915050565b7f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b33611e4981611e446133b1565b6133b9565b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160020160006101000a81548160ff02191690831515021790555060018160000160040160006101000a81548160ff02191690831515021790555084816000016003018190555083816000016000019080519060200190611ef3929190613a2a565b5082816000016001019080519060200190611f0f929190613a2a565b5080600001600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820181600001908054611f6790614f80565b611f7292919061399d565b506001820181600101908054611f8790614f80565b611f9292919061399d565b506002820160009054906101000a900460ff168160020160006101000a81548160ff021916908315150217905550600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff02191690831515021790555090505060016007600082825461200d9190614d5d565b925050819055506008869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b61208882610ff3565b612099816120946133b1565b6133b9565b6120a38383613536565b505050565b60046020528060005260406000206000915054906101000a900460ff1681565b600660205281600052604060002081815481106120e457600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f5146a08baf902532d0ee2f909971144f12ca32651cd70cbee1117cddfb3b3b3361214a816121456133b1565b6133b9565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160020160009054906101000a900460ff166121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d390614acc565b60405180910390fd5b82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b08484604051612264929190614812565b60405180910390a18291505092915050565b6000606060008060606000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905086816000016000018260000160020160009054906101000a900460ff168360000160030154846000016001018380546122fa90614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461232690614f80565b80156123735780601f1061234857610100808354040283529160200191612373565b820191906000526020600020905b81548152906001019060200180831161235657829003601f168201915b5050505050935080805461238690614f80565b80601f01602080910402602001604051908101604052809291908181526020018280546123b290614f80565b80156123ff5780601f106123d4576101008083540402835291602001916123ff565b820191906000526020600020905b8154815290600101906020018083116123e257829003601f168201915b50505050509050955095509550955095505091939590929450565b6060806060806060600060075467ffffffffffffffff811115612466577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156124945781602001602082028036833780820191505090505b509050600060075467ffffffffffffffff8111156124db577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561250e57816020015b60608152602001906001900390816124f95790505b509050600060075467ffffffffffffffff811115612555577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561258857816020015b60608152602001906001900390816125735790505b509050600060075467ffffffffffffffff8111156125cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156125fd5781602001602082028036833780820191505090505b50905060005b60075481101561291d576000600260006008848154811061264d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160020160009054906101000a900460ff16868381518110612702577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101901515908115158152505080600001600001805461272690614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461275290614f80565b801561279f5780601f106127745761010080835404028352916020019161279f565b820191906000526020600020905b81548152906001019060200180831161278257829003601f168201915b50505050508583815181106127dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508060000160010180546127fa90614f80565b80601f016020809104026020016040519081016040528092919081815260200182805461282690614f80565b80156128735780601f1061284857610100808354040283529160200191612873565b820191906000526020600020905b81548152906001019060200180831161285657829003601f168201915b50505050508483815181106128b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080600001600301548383815181106128fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050808061291590614fb2565b915050612603565b50600883858385848054806020026020016040519081016040528092919081815260200182805480156129a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161295b575b5050505050945098509850985098509850505050509091929394565b6129c96133b1565b73ffffffffffffffffffffffffffffffffffffffff166129e7611928565b73ffffffffffffffffffffffffffffffffffffffff1614612a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3490614a6c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa490614a2c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160020160009054906101000a900460ff16612c3b576001915050612dd9565b600115158160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612ca0576000915050612dd9565b60018160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a58484604051612dcb929190614960565b60405180910390a160009150505b92915050565b6000806000612dec613ab0565b600080600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612eae57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612e64575b5050505050905060005b815181101561334e576000828281518110612efc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166355a1ac2e8e8e6040518363ffffffff1660e01b8152600401612f4192919061484e565b60606040518083038186803b158015612f5957600080fd5b505afa158015612f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f919190613fbe565b8760000188602001828152508281525082965050505060006004811115612fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8414613022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301990614a4c565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160030154856040018181525050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe2c61988273ffffffffffffffffffffffffffffffffffffffff16636c02a9316040518163ffffffff1660e01b815260040160006040518083038186803b1580156130f557600080fd5b505afa158015613109573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906131329190613f54565b6040518263ffffffff1660e01b815260040161314e9190614989565b60206040518083038186803b15801561316657600080fd5b505afa15801561317a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319e9190613f95565b8560600181815250506000856060015114156131ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131e690614a8c565b60405180910390fd5b6132258560600151620f42406132168860400151896000015161361890919063ffffffff16565b6136419092919063ffffffff16565b856080018181516132369190614d5d565b9150818152505061325d8560600151620f424087602001516136419092919063ffffffff16565b8560a00181815161326e9190614d5d565b915081815250508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561333a57600089146132e6576132cd8560600151620f42408b6136419092919063ffffffff16565b8560a0018181516132de9190614d5d565b915081815250505b60008a14613339576133208560600151620f424061331188604001518e61361890919063ffffffff16565b6136419092919063ffffffff16565b8560a0018181516133319190614d5d565b915081815250505b5b50808061334690614fb2565b915050612eb8565b508260a00151836080015111156133855760008360a0015184608001516133759190614e3e565b60009550955095505050506133a6565b60008084608001518560a0015161339c9190614e3e565b9550955095505050505b955095509592505050565b600033905090565b6133c38282611add565b613452576133e88173ffffffffffffffffffffffffffffffffffffffff166014613663565b6133f68360001c6020613663565b60405160200161340792919061475c565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134499190614989565b60405180910390fd5b5050565b6134608282611add565b61353257600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506134d76133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6135408282611add565b156136145760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506135b96133b1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000670de0b6b3a7640000828461362f9190614de4565b6136399190614db3565b905092915050565b60008183856136509190614de4565b61365a9190614db3565b90509392505050565b6060600060028360026136769190614de4565b6136809190614d5d565b67ffffffffffffffff8111156136bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156136f15781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061374f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026138199190614de4565b6138239190614d5d565b90505b600181111561390f577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061388b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106138c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061390890614f56565b9050613826565b5060008414613953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161394a90614a0c565b60405180910390fd5b8091505092915050565b50805461396990614f80565b6000825580601f1061397b575061399a565b601f0160209004906000526020600020908101906139999190613ae6565b5b50565b8280546139a990614f80565b90600052602060002090601f0160209004810192826139cb5760008555613a19565b82601f106139dc5780548555613a19565b82800160010185558215613a1957600052602060002091601f016020900482015b82811115613a185782548255916001019190600101906139fd565b5b509050613a269190613ae6565b5090565b828054613a3690614f80565b90600052602060002090601f016020900481019282613a585760008555613a9f565b82601f10613a7157805160ff1916838001178555613a9f565b82800160010185558215613a9f579182015b82811115613a9e578251825591602001919060010190613a83565b5b509050613aac9190613ae6565b5090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613aff576000816000905550600101613ae7565b5090565b6000613b16613b1184614c11565b614be0565b905082815260208101848484011115613b2e57600080fd5b613b39848285614f14565b509392505050565b6000613b54613b4f84614c11565b614be0565b905082815260208101848484011115613b6c57600080fd5b613b77848285614f23565b509392505050565b600081359050613b8e816150c8565b92915050565b60008083601f840112613ba657600080fd5b8235905067ffffffffffffffff811115613bbf57600080fd5b602083019150836020820283011115613bd757600080fd5b9250929050565b600081359050613bed816150df565b92915050565b600081359050613c02816150f6565b92915050565b600081359050613c178161510d565b92915050565b600082601f830112613c2e57600080fd5b8135613c3e848260208601613b03565b91505092915050565b600082601f830112613c5857600080fd5b8151613c68848260208601613b41565b91505092915050565b600081359050613c8081615124565b92915050565b600081519050613c9581615124565b92915050565b600060208284031215613cad57600080fd5b6000613cbb84828501613b7f565b91505092915050565b600080600060608486031215613cd957600080fd5b6000613ce786828701613b7f565b9350506020613cf886828701613b7f565b9250506040613d0986828701613c71565b9150509250925092565b60008060008060808587031215613d2957600080fd5b6000613d3787828801613b7f565b9450506020613d4887828801613b7f565b9350506040613d5987828801613c71565b9250506060613d6a87828801613c71565b91505092959194509250565b60008060408385031215613d8957600080fd5b6000613d9785828601613b7f565b9250506020613da885828601613bde565b9150509250929050565b60008060408385031215613dc557600080fd5b6000613dd385828601613b7f565b9250506020613de485828601613c71565b9150509250929050565b60008060008060808587031215613e0457600080fd5b6000613e1287828801613b7f565b9450506020613e2387828801613c71565b935050604085013567ffffffffffffffff811115613e4057600080fd5b613e4c87828801613c1d565b925050606085013567ffffffffffffffff811115613e6957600080fd5b613e7587828801613c1d565b91505092959194509250565b60008060208385031215613e9457600080fd5b600083013567ffffffffffffffff811115613eae57600080fd5b613eba85828601613b94565b92509250509250929050565b600060208284031215613ed857600080fd5b6000613ee684828501613bf3565b91505092915050565b60008060408385031215613f0257600080fd5b6000613f1085828601613bf3565b9250506020613f2185828601613b7f565b9150509250929050565b600060208284031215613f3d57600080fd5b6000613f4b84828501613c08565b91505092915050565b600060208284031215613f6657600080fd5b600082015167ffffffffffffffff811115613f8057600080fd5b613f8c84828501613c47565b91505092915050565b600060208284031215613fa757600080fd5b6000613fb584828501613c86565b91505092915050565b600080600060608486031215613fd357600080fd5b6000613fe186828701613c86565b9350506020613ff286828701613c86565b925050604061400386828701613c86565b9150509250925092565b60006140198383614069565b60208301905092915050565b60006140318383614216565b60208301905092915050565b60006140498383614252565b905092915050565b600061405d838361473e565b60208301905092915050565b61407281614e72565b82525050565b61408181614e72565b82525050565b600061409282614c81565b61409c8185614cec565b93506140a783614c41565b8060005b838110156140d85781516140bf888261400d565b97506140ca83614cb8565b9250506001810190506140ab565b5085935050505092915050565b60006140f082614c8c565b6140fa8185614cfd565b935061410583614c51565b8060005b8381101561413657815161411d8882614025565b975061412883614cc5565b925050600181019050614109565b5085935050505092915050565b600061414e82614c97565b6141588185614d0e565b93508360208202850161416a85614c61565b8060005b858110156141a65784840389528151614187858261403d565b945061419283614cd2565b925060208a0199505060018101905061416e565b50829750879550505050505092915050565b60006141c382614ca2565b6141cd8185614d1f565b93506141d883614c71565b8060005b838110156142095781516141f08882614051565b97506141fb83614cdf565b9250506001810190506141dc565b5085935050505092915050565b61421f81614e84565b82525050565b61422e81614e84565b82525050565b61423d81614e90565b82525050565b61424c81614ef0565b82525050565b600061425d82614cad565b6142678185614d30565b9350614277818560208601614f23565b614280816150b7565b840191505092915050565b600061429682614cad565b6142a08185614d41565b93506142b0818560208601614f23565b6142b9816150b7565b840191505092915050565b60006142cf82614cad565b6142d98185614d52565b93506142e9818560208601614f23565b80840191505092915050565b6000614302602083614d41565b91507f537472696e67733a20686578206c656e67746820696e73756666696369656e746000830152602082019050919050565b6000614342602683614d41565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143a8600683614d41565b91507f426f72726f7700000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006143e8600e83614d41565b91507f536e617073686f74206572726f720000000000000000000000000000000000006000830152602082019050919050565b6000614428602083614d41565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614468601283614d41565b91507f5072696365204f7261636c65206572726f7200000000000000000000000000006000830152602082019050919050565b60006144a8601583614d41565b91507f73656e646572206d7573742062652063546f6b656e00000000000000000000006000830152602082019050919050565b60006144e8600a83614d41565b91507f6e6f74206c6973746564000000000000000000000000000000000000000000006000830152602082019050919050565b6000614528601983614d41565b91507f6d61726b657420626f72726f77206361702072656163686564000000000000006000830152602082019050919050565b6000614568601783614d41565b91507f41646472657373206973206e6f742061206d61726b65740000000000000000006000830152602082019050919050565b60006145a8601783614d52565b91507f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006000830152601782019050919050565b60006145e8601183614d52565b91507f206973206d697373696e6720726f6c65200000000000000000000000000000006000830152601182019050919050565b6000614628601083614d41565b91507f626f72726f7720697320706175736564000000000000000000000000000000006000830152602082019050919050565b6000614668602f83614d41565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b600060a08301600083015184820360008601526146de8282614252565b915050602083015184820360208601526146f88282614252565b915050604083015161470d6040860182614216565b506060830151614720606086018261473e565b5060808301516147336080860182614216565b508091505092915050565b61474781614ee6565b82525050565b61475681614ee6565b82525050565b60006147678261459b565b915061477382856142c4565b915061477e826145db565b915061478a82846142c4565b91508190509392505050565b60006020820190506147ab6000830184614078565b92915050565b600060a0820190506147c66000830188614078565b81810360208301526147d8818761428b565b90506147e76040830186614225565b6147f4606083018561474d565b8181036080830152614806818461428b565b90509695505050505050565b60006060820190506148276000830185614078565b81810360208301526148388161439b565b90506148476040830184614225565b9392505050565b60006040820190506148636000830185614078565b614870602083018461474d565b9392505050565b600060a08201905081810360008301526148918188614087565b905081810360208301526148a58187614143565b905081810360408301526148b981866140e5565b905081810360608301526148cd81856141b8565b905081810360808301526148e18184614143565b90509695505050505050565b6000602082019050818103600083015261490781846141b8565b905092915050565b60006020820190506149246000830184614225565b92915050565b600060208201905061493f6000830184614234565b92915050565b600060208201905061495a6000830184614243565b92915050565b60006040820190506149756000830185614243565b6149826020830184614078565b9392505050565b600060208201905081810360008301526149a3818461428b565b905092915050565b600060a08201905081810360008301526149c5818861428b565b905081810360208301526149d9818761428b565b90506149e86040830186614225565b6149f5606083018561474d565b614a026080830184614225565b9695505050505050565b60006020820190508181036000830152614a25816142f5565b9050919050565b60006020820190508181036000830152614a4581614335565b9050919050565b60006020820190508181036000830152614a65816143db565b9050919050565b60006020820190508181036000830152614a858161441b565b9050919050565b60006020820190508181036000830152614aa58161445b565b9050919050565b60006020820190508181036000830152614ac58161449b565b9050919050565b60006020820190508181036000830152614ae5816144db565b9050919050565b60006020820190508181036000830152614b058161451b565b9050919050565b60006020820190508181036000830152614b258161455b565b9050919050565b60006020820190508181036000830152614b458161461b565b9050919050565b60006020820190508181036000830152614b658161465b565b9050919050565b60006020820190508181036000830152614b8681846146c1565b905092915050565b6000602082019050614ba3600083018461474d565b92915050565b6000606082019050614bbe600083018661474d565b614bcb602083018561474d565b614bd8604083018461474d565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715614c0757614c06615088565b5b8060405250919050565b600067ffffffffffffffff821115614c2c57614c2b615088565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614d6882614ee6565b9150614d7383614ee6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614da857614da7614ffb565b5b828201905092915050565b6000614dbe82614ee6565b9150614dc983614ee6565b925082614dd957614dd861502a565b5b828204905092915050565b6000614def82614ee6565b9150614dfa83614ee6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614e3357614e32614ffb565b5b828202905092915050565b6000614e4982614ee6565b9150614e5483614ee6565b925082821015614e6757614e66614ffb565b5b828203905092915050565b6000614e7d82614ec6565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614efb82614f02565b9050919050565b6000614f0d82614ec6565b9050919050565b82818337600083830152505050565b60005b83811015614f41578082015181840152602081019050614f26565b83811115614f50576000848401525b50505050565b6000614f6182614ee6565b91506000821415614f7557614f74614ffb565b5b600182039050919050565b60006002820490506001821680614f9857607f821691505b60208210811415614fac57614fab615059565b5b50919050565b6000614fbd82614ee6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614ff057614fef614ffb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6150d181614e72565b81146150dc57600080fd5b50565b6150e881614e84565b81146150f357600080fd5b50565b6150ff81614e90565b811461510a57600080fd5b50565b61511681614e9a565b811461512157600080fd5b50565b61512d81614ee6565b811461513857600080fd5b5056fea2646970667358221220aa871cdaa954a25f6e2050e8b6d5d6bfa36375660c8b7d9abeddd897aed9c5b564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enableMarket(address,uint256,string,string)": {
        "details": "Function to enable a certain Exafin market to be used as collateral",
        "params": {
          "collateralFactor": "exafin's collateral factor for the underlying asset",
          "exafin": "address to add to the protocol"
        }
      },
      "enterMarkets(address[])": {
        "details": "Allows wallet to enter certain markets (exafinDAI, exafinETH, etc) By performing this action, the wallet's money could be used as collateral",
        "params": {
          "exafins": "contracts addresses to enable for `msg.sender`"
        }
      },
      "getAccountLiquidity(address,uint256)": {
        "details": "Function to get account's liquidity for a certain maturity pool",
        "params": {
          "account": "wallet to retrieve liquidity for a certain maturity date",
          "maturityDate": "timestamp to calculate maturity's pool"
        }
      },
      "getMarketByAddress(address)": {
        "details": "Get market data filtered by address",
        "params": {
          "contractAddress": "address to get market data"
        }
      },
      "getMarkets()": {
        "details": "List all markets, listed or not"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "listMarket(address)": {
        "details": "Add market to listedMarkets and change boolean to true",
        "params": {
          "exafin": "address to add to the protocol"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseBorrow(address,bool)": {
        "details": "Function to pause/unpause borrowing on a certain market",
        "params": {
          "exafin": "address to pause",
          "paused": "true/false"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setOracle(address)": {
        "details": "Function to set Oracle's to be used",
        "params": {
          "_priceOracleAddress": "address of the new oracle"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlistMarket(address)": {
        "details": "Delete market to listedMarkets and change boolean to false",
        "params": {
          "exafin": "address to add to the protocol"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 62,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 2010,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "markets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Market)2054_storage)"
      },
      {
        "astId": 2015,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "listedMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(BaseMarket)2046_storage)"
      },
      {
        "astId": 2019,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "borrowPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2023,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2029,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "accountAssets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_contract(IExafin)4076)dyn_storage)"
      },
      {
        "astId": 2032,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "marketCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2035,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "marketsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2070,
        "contract": "contracts/ExaFront.sol:ExaFront",
        "label": "oracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(Oracle)4086"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IExafin)4076)dyn_storage": {
        "base": "t_contract(IExafin)4076",
        "encoding": "dynamic_array",
        "label": "contract IExafin[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IExafin)4076": {
        "encoding": "inplace",
        "label": "contract IExafin",
        "numberOfBytes": "20"
      },
      "t_contract(Oracle)4086": {
        "encoding": "inplace",
        "label": "contract Oracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(IExafin)4076)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IExafin[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IExafin)4076)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(BaseMarket)2046_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExaFront.BaseMarket)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseMarket)2046_storage"
      },
      "t_mapping(t_address,t_struct(Market)2054_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExaFront.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)2054_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BaseMarket)2046_storage": {
        "encoding": "inplace",
        "label": "struct ExaFront.BaseMarket",
        "members": [
          {
            "astId": 2037,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2039,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2041,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "isListed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2043,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2045,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Market)2054_storage": {
        "encoding": "inplace",
        "label": "struct ExaFront.Market",
        "members": [
          {
            "astId": 2049,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "baseMarket",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BaseMarket)2046_storage"
          },
          {
            "astId": 2053,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "accountMembership",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/ExaFront.sol:ExaFront",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}